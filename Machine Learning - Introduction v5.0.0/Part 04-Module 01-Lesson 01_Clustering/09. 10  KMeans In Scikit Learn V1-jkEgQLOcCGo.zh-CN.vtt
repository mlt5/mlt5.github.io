WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.970
如果你进入下一页

00:00:01.970 --> 00:00:05.009
你会注意到有一个叫Changing K的notebook

00:00:05.009 --> 00:00:08.219
我在教室里喜欢做的一件事是

00:00:08.220 --> 00:00:11.679
左键点击这里 选择打开一个新标签页

00:00:11.679 --> 00:00:13.589
如果你进入这个新标签页

00:00:13.589 --> 00:00:15.984
你将会看到它的幕后有很多其他文件

00:00:15.984 --> 00:00:17.579
但是我们要用的notebook

00:00:17.579 --> 00:00:19.554
是这个Changing K notebook

00:00:19.554 --> 00:00:22.280
在这个notebook中 我们将要看到的是

00:00:22.280 --> 00:00:26.250
用K - 均值聚类算法来拟合一组点

00:00:26.250 --> 00:00:28.379
在这个例子中，我们要做的第一件事是

00:00:28.379 --> 00:00:30.484
导入我们要用到的库

00:00:30.484 --> 00:00:33.644
然后 一旦我们完成导入库

00:00:33.645 --> 00:00:35.575
让我们来看第一个问题

00:00:35.575 --> 00:00:36.780
第一个问题是

00:00:36.780 --> 00:00:41.160
我们将用这个helpers2文件来生成一些模拟数据

00:00:41.159 --> 00:00:42.869
因此 我们做的第一件事

00:00:42.869 --> 00:00:44.699
实际上是阅读这个文档

00:00:44.700 --> 00:00:47.780
以便知道如何使用这个函数

00:00:47.780 --> 00:00:50.340
所以 如果我们只是运行那个单元格

00:00:50.340 --> 00:00:52.060
你会注意到它告诉我们

00:00:52.060 --> 00:00:54.425
基本上 这里有个simulate_data 函数

00:00:54.424 --> 00:00:58.759
它将模拟N个点  这是特征数参数

00:00:58.759 --> 00:01:03.119
这里是你将要创建的数据的形心的数量

00:01:03.119 --> 00:01:04.480
作为这一部分

00:01:04.480 --> 00:01:06.490
所以 这是一个非常有用的函数

00:01:06.489 --> 00:01:09.274
能够快速生成我们想要的模拟数据

00:01:09.275 --> 00:01:11.035
在这个示例中

00:01:11.034 --> 00:01:12.554
我们想要200个点

00:01:12.555 --> 00:01:14.690
5个特征和4个中心

00:01:14.689 --> 00:01:18.105
让我们继续创建这个数据集

00:01:18.105 --> 00:01:23.320
所以 200个点  5个特征和4个中心

00:01:23.319 --> 00:01:25.864
这里应该是h 点. 

00:01:25.864 --> 00:01:28.074
看来我们可以继续了

00:01:28.075 --> 00:01:31.109
别忘了那个h 因为你是从helper文件读入它的

00:01:31.109 --> 00:01:34.715
因为我们用四个中心来拟合这个模型

00:01:34.715 --> 00:01:37.180
它问 “k的值应该是多少？”

00:01:37.180 --> 00:01:39.125
k的值应该是4。

00:01:39.125 --> 00:01:42.055
如果我们运行那个单元格 它会告诉我们 “正确”

00:01:42.055 --> 00:01:43.655
接下来我们要做的就是

00:01:43.655 --> 00:01:47.269
在我们的数据集上实际运行k-means 算法

00:01:47.269 --> 00:01:50.804
看看如果有四个形心会是什么样子

00:01:50.805 --> 00:01:54.960
所以 这让我们大概看了一下这个过程应该是什么样子

00:01:54.959 --> 00:01:57.304
首先 我们应该实例化我们的模型

00:01:57.305 --> 00:01:59.045
然后 用模型拟合数据

00:01:59.045 --> 00:02:01.579
然后 我们预测数据的标签

00:02:01.579 --> 00:02:03.584
最后一步你可以看到

00:02:03.584 --> 00:02:04.724
我们在这里绘制数据的图形

00:02:04.724 --> 00:02:06.879
所以 这里我们实例化模型

00:02:06.879 --> 00:02:09.439
然后 拟合数据  预测标签

00:02:09.439 --> 00:02:10.710
我们会得到数据的图形

00:02:10.710 --> 00:02:13.340
这是你将看到的任何非监督算法

00:02:13.340 --> 00:02:16.259
都应该遵循的基本流程

00:02:16.259 --> 00:02:17.750
我们可能要做的第一件事

00:02:17.750 --> 00:02:19.490
就是查看文档

00:02:19.490 --> 00:02:21.475
你可以看到我从这里读入它

00:02:21.474 --> 00:02:25.305
然后快速的Google搜索会把你带到KMeans类的文档

00:02:25.305 --> 00:02:29.000
所以 你可以看到我们正在从sklearn.cluster库

00:02:29.000 --> 00:02:30.905
导入这个模块

00:02:30.905 --> 00:02:37.069
从本质上讲要创建一个 KMeans对象 我们要输入聚类数量和一堆其他

00:02:37.069 --> 00:02:39.209
我们不必改动的参数

00:02:39.210 --> 00:02:40.760
我们应该看到的是

00:02:40.759 --> 00:02:43.524
要 取四个形心的KMeans

00:02:43.525 --> 00:02:48.629
所以 如果我们回到这里 然后通过在这里传递4

00:02:48.629 --> 00:02:50.789
来构造这个KMeans算法实例

00:02:50.789 --> 00:02:54.009
下一步我们应该做的就是拟合这个模型

00:02:54.090 --> 00:02:56.409
如果你看一下文档

00:02:56.409 --> 00:03:00.109
你可以找到所有可用的方法

00:03:00.110 --> 00:03:02.880
所以 你可以看到他们有KMeans

00:03:02.879 --> 00:03:04.490
这里是进行预测

00:03:04.490 --> 00:03:06.175
他们会得到不同的标签

00:03:06.175 --> 00:03:08.780
这是fit_ predict 函数 这个是fit函数

00:03:08.780 --> 00:03:10.969
所以 文档中有很多东西

00:03:10.969 --> 00:03:13.080
我只想告诉你这是如何快速完成的

00:03:13.080 --> 00:03:14.990
一旦你做过几次

00:03:14.990 --> 00:03:16.340
这就会变得很自然

00:03:16.340 --> 00:03:20.490
因此 我们想拟合我们的数据

00:03:21.039 --> 00:03:23.074
然后 要做的是

00:03:23.074 --> 00:03:25.109
预测标签

00:03:25.110 --> 00:03:27.370
同样如果你想的话 

00:03:27.370 --> 00:03:30.914
也可以一步到位 用那个拟合预测函数

00:03:30.914 --> 00:03:35.150
这个函数叫kmeans_4

00:03:35.150 --> 00:03:39.344
这个函数是我实际上用来创建这个模型的

00:03:39.344 --> 00:03:41.840
好的所以 我拟合这个模型

00:03:41.840 --> 00:03:43.444
把它保存在这儿

00:03:43.444 --> 00:03:45.409
我用这个模型来预测数据

00:03:45.409 --> 00:03:49.789
所以 我实例化KMeans类  我用数据拟合这个模型

00:03:49.789 --> 00:03:52.870
然后用这个模型来预测数据集

00:03:52.870 --> 00:03:54.355
所以 这是通常的过程

00:03:54.354 --> 00:03:59.840
先实例化 用这个模型实例来拟合你的数据

00:03:59.840 --> 00:04:03.140
然后这个模型来预测你的数据集

00:04:03.139 --> 00:04:08.129
所以 在这里你可以看到我们的模型预测的每一种颜色

00:04:08.129 --> 00:04:10.090
这些点属于哪个聚类

00:04:10.090 --> 00:04:11.330
在下一页中

00:04:11.330 --> 00:04:12.570
你将自己完成此操作

00:04:12.569 --> 00:04:14.930
如果你没有用四个 而是用其他不同数量的聚类

00:04:14.930 --> 00:04:17.870
你将会看到它的样子

