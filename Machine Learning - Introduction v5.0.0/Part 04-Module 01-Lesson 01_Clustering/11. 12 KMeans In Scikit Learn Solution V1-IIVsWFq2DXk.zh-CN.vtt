WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.549
所以在上一个关于聚类的截屏视频中

00:00:02.549 --> 00:00:06.269
你看到了我们如何生成模拟数据集

00:00:06.269 --> 00:00:10.509
然后用KMeans模型拟合数据来看有多少个聚类

00:00:10.509 --> 00:00:11.844
现在是轮到你的时候了

00:00:11.845 --> 00:00:14.545
你将尝试使用不同数量的聚类

00:00:14.544 --> 00:00:20.934
因此 你可能已经创建了一个包含两个而不是四个聚类的模型

00:00:20.934 --> 00:00:25.259
将其与你的数据集进行拟合 

00:00:25.260 --> 00:00:29.350
并最终在你的数据集上进行预测  来看一下你的数据会是什么样子

00:00:29.350 --> 00:00:32.750
你可以看到如果有两个聚类的话 它将这样分组

00:00:32.750 --> 00:00:36.125
然后再次 你可以尝试用7

00:00:36.125 --> 00:00:42.140
这个过程可能会以一种重复方式帮助你

00:00:42.140 --> 00:00:45.439
了解如何将其扩展到其他算法

00:00:45.439 --> 00:00:49.780
因为这是它们经历的过程是一样的

00:00:49.780 --> 00:00:52.070
然后 这就是当我们有七个的样子

00:00:52.070 --> 00:00:55.740
因此 你可以看到这些颜色是如何与此图中的不同聚类相关联

00:00:55.740 --> 00:00:58.405
最后 一旦你用Kmeans拟合了数据

00:00:58.405 --> 00:01:00.814
有一种评分的方法来获取数据

00:01:00.814 --> 00:01:04.739
这个分数表示这些点离中心有多远

00:01:04.739 --> 00:01:07.990
所以 这里他们想让你对形心数是

00:01:07.989 --> 00:01:10.354
从1到10的不同模型做这个的过程

00:01:10.355 --> 00:01:13.325
所以 这个需要一点时间

00:01:13.325 --> 00:01:18.520
但是 范围1 – 11会给我们 1 到 10

00:01:18.519 --> 00:01:22.699
因为 对于每个形心和范围1-11

00:01:22.700 --> 00:01:26.790
这是不包括在内的

00:01:26.790 --> 00:01:31.370
我们想得到每个模型的评分 基本上我们可以遵循相同的步骤

00:01:31.370 --> 00:01:39.550
我们想把它与一定数量的中心进行拟合

00:01:39.549 --> 00:01:42.280
你其实不想要这些标签

00:01:42.280 --> 00:01:45.364
他们想让我们做的是运行评分方法

00:01:45.364 --> 00:01:47.334
我将删掉这些

00:01:47.334 --> 00:01:52.839
所以 我们拟合这个Kmeans模型 然后对这个数据评分

00:01:52.840 --> 00:01:55.299
我将创建一个分数向量

00:01:55.299 --> 00:01:57.784
所以 我要把这个变量叫做scores

00:01:57.784 --> 00:02:01.229
它是个列表 然后

00:02:01.230 --> 00:02:08.868
我将把这些模型的分数以元组的形式添加到这个列表中

00:02:08.868 --> 00:02:12.479
在这里会记录中心数和分数

00:02:12.479 --> 00:02:16.134
所以 这将会取中心和模型的分数

00:02:16.134 --> 00:02:19.254
将其放入一个元组中 然后将其添加到列表中

00:02:19.254 --> 00:02:22.754
然后它说 “尝试创建你自己的碎石图”

00:02:22.754 --> 00:02:25.104
我想创建一些中心

00:02:25.104 --> 00:02:30.984
等于 列表其范围是1到11

00:02:30.985 --> 00:02:34.015
然后 我现在有两个列表 并且我能做一个

00:02:34.014 --> 00:02:38.239
简单的图 然后在我们的例子里

00:02:38.240 --> 00:02:40.670
x轴表示的是

00:02:40.669 --> 00:02:45.768
是中心数量  y轴表示的是这些分数

00:02:45.769 --> 00:02:50.814
我想应该是这样然后我们想画图

00:02:50.814 --> 00:02:56.884
我们可以在上面加上一个标题 称之为碎石图

00:02:56.884 --> 00:03:05.899
x轴的标签是中心的数量 然后y轴的标签是

00:03:06.419 --> 00:03:14.324
它的得分或距中心的平均距离

00:03:14.324 --> 00:03:17.849
让我们看看这是不是错了 哦 是的 

00:03:17.849 --> 00:03:21.025
这是一个R语法 它应是一个逗号

00:03:21.025 --> 00:03:24.230
它应该是绝对值

00:03:24.229 --> 00:03:28.569
Python做了一些奇怪的事情 是的 我们开始了

00:03:28.569 --> 00:03:31.729
所以 Python做了一些奇怪的事情 他们想要所有的分数

00:03:31.729 --> 00:03:34.949
当他们越低就越糟

00:03:34.949 --> 00:03:36.709
这里就是这个 p

00:03:36.710 --> 00:03:38.275
如果取绝对值

00:03:38.275 --> 00:03:39.760
真是奇怪

00:03:39.759 --> 00:03:42.219
但这个绝对值是实际距离

00:03:42.219 --> 00:03:44.830
取绝对值前它是负值

00:03:44.830 --> 00:03:48.180
这只是因为这是scikit-learn的评分方式

00:03:48.180 --> 00:03:49.680
所以基于此

00:03:49.680 --> 00:03:53.920
你可以看到在下面这里是一个肘部  它从这里开始变得变平缓

00:03:53.919 --> 00:03:56.649
所以 在四个点之前平均距离一直有大幅下降

00:03:56.650 --> 00:04:00.450
然后 然后它基本上变平缓了

00:04:00.449 --> 00:04:02.554
如果我们看看这个

00:04:02.555 --> 00:04:05.810
你可以看到它们看起来很相似

00:04:05.810 --> 00:04:08.819
根据这个碎石图 你建议由多少个聚类？

00:04:08.819 --> 00:04:14.099
也许不出所料 我们会提出与我们之前看到的相同的数字

00:04:14.099 --> 00:04:16.860
所以对了 我们可以看到数据是四个聚类

00:04:16.860 --> 00:04:18.495
哦 法老很高兴

00:04:18.495 --> 00:04:21.204
我们可以看到在4个聚类后有一个很明显的平缓

00:04:21.204 --> 00:04:24.805
这个是让你写答案的单元格

00:04:24.805 --> 00:04:29.129
我建议四个

