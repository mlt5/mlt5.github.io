WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.150
在看一些关于 DBSCAN 的应用例子之前

00:00:03.150 --> 00:00:06.420
我们先来讨论一下它的优缺点

00:00:06.420 --> 00:00:08.820
使用 DBSCAN 的第一个优点是

00:00:08.820 --> 00:00:11.430
我们不需要指明类的数量

00:00:11.430 --> 00:00:14.370
DBSCAN 能根据点的分布密度

00:00:14.370 --> 00:00:17.355
以及我们输入的其他指令 如邻域或点的最小数量

00:00:17.355 --> 00:00:20.595
从而找到类

00:00:20.595 --> 00:00:24.360
DBSCAN 的第二个优点是

00:00:24.360 --> 00:00:29.215
能灵活的找到并分离各种形状和大小的类

00:00:29.215 --> 00:00:32.465
DBSCAN 不局限于某种外形的类

00:00:32.465 --> 00:00:35.690
只要点的密度能形成外形

00:00:35.690 --> 00:00:39.530
它就能描绘出这些集群点的形状

00:00:39.530 --> 00:00:42.890
最后 它能够强有力的处理

00:00:42.890 --> 00:00:46.940
我们传递的数据集中的噪声和离群值

00:00:46.940 --> 00:00:51.410
另一方面 DBSCAN 也有一些小缺陷

00:00:51.410 --> 00:00:57.215
第一个缺点就是 从两个类可达的边界点

00:00:57.215 --> 00:00:59.450
被分配给了另一个类 因为这个类先发现的这个边界点

00:00:59.450 --> 00:01:03.770
由于各个点是被随机拜访的

00:01:03.770 --> 00:01:09.510
如果出现这种情况的话 DBSCAN 不能保证传回相同的聚类

00:01:09.510 --> 00:01:13.560
尽管如此 幸运的是大多数数据集不会面临这个问题

00:01:13.560 --> 00:01:16.800
DBSCAN 的第二个缺点是

00:01:16.800 --> 00:01:21.000
在找到不同密度的类方面有一定的困难

00:01:21.000 --> 00:01:22.815
然而 针对这样的情况

00:01:22.815 --> 00:01:26.595
我们可以用 DBSCAN 的变体 HDBSCAN 即具有噪声的基于密度的高层次空间聚类算法

00:01:26.595 --> 00:01:30.570
视频下方的文本中有相关链接

00:01:30.570 --> 00:01:34.650
现在我们可以看几个 DBSCAN 应用的范例

00:01:34.650 --> 00:01:36.630
这篇论文研究的是网络流量

00:01:36.630 --> 00:01:41.265
试图用聚类算法将其分类

00:01:41.265 --> 00:01:45.690
假如说你是一个网络管理员

00:01:45.690 --> 00:01:50.358
发现人们在你的网络上运行比特流 你想对流量进行分类

00:01:50.358 --> 00:01:54.383
一类是比特流 一类是常规网络流量

00:01:54.383 --> 00:01:59.775
特别是你没有办法看到实际的包从而得到判断

00:01:59.775 --> 00:02:05.010
这篇论文比较了在这个分类下的 K-均值聚类法和 DBSCAN

00:02:05.010 --> 00:02:08.430
即网络流量的非监督分类

00:02:08.430 --> 00:02:11.970
这份图标展示了 基于不同的邻域值

00:02:11.970 --> 00:02:16.815
所得到的分类的准确率

00:02:16.815 --> 00:02:22.470
这儿 我们能看到不同的邻域值

00:02:22.470 --> 00:02:25.485
不同的点的最小数量

00:02:25.485 --> 00:02:29.040
以及二者对分类准确性产生的影响

00:02:29.040 --> 00:02:31.725
另外一个范例是

00:02:31.725 --> 00:02:34.860
这篇论文用 DBSCAN 对温度数据做异常检测

00:02:34.860 --> 00:02:40.035
方法是 设定点的最小数量以及邻域值

00:02:40.035 --> 00:02:46.125
从而让数据集中的大多数数据能分成一个或几个类

00:02:46.125 --> 00:02:48.840
对于被标记为噪声的点

00:02:48.840 --> 00:02:52.245
我们把它们看做离群值或者异常

00:02:52.245 --> 00:02:57.780
通过改变点的最小数量和邻域值

00:02:57.780 --> 00:03:04.095
我们能够改变这个异常检测的许可度或攻击性

00:03:04.095 --> 00:03:10.058
大家可以在下方的链接中找到这两篇论文的链接

00:03:10.058 --> 00:03:14.970
我非常喜欢这篇网络流量的论文 因为它用完整的思维过程

00:03:14.970 --> 00:03:20.040
从头到尾完整地展示了聚类方法的流程

00:03:20.040 --> 00:03:21.540
是一个非常棒的例子

00:03:21.540 --> 00:03:23.800
我建议大家读一下这篇论文

