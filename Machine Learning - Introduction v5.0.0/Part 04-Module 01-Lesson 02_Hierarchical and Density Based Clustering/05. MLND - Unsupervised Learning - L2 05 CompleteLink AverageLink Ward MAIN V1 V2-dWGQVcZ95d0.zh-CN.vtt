WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.710
这节课 我们将学习

00:00:01.710 --> 00:00:05.580
除单连接聚类法以外的

00:00:05.580 --> 00:00:07.814
三种不同的层次聚类法

00:00:07.815 --> 00:00:09.535
事实上

00:00:09.535 --> 00:00:13.800
如果你要在 Scikit-learn 框架中使用单连接聚类法

00:00:13.800 --> 00:00:17.445
你是做不到的 因为压根没有

00:00:17.445 --> 00:00:22.359
我们这节课要学习的三种层次聚类法都是

00:00:22.359 --> 00:00:26.769
Scikit-learn 框架中凝聚聚类成分的一部分

00:00:26.769 --> 00:00:29.914
所谓凝聚聚类法并不包括单连接聚类法

00:00:29.914 --> 00:00:32.875
但包括全连接聚类

00:00:32.875 --> 00:00:35.920
凝聚聚类法是层次聚类法的一部分

00:00:35.920 --> 00:00:39.216
同样是自下而上

00:00:39.216 --> 00:00:43.949
先假设每个点是一个类 然后由此建立其他的类

00:00:43.950 --> 00:00:48.550
所以 要区分开这种聚类法与其他的聚类法或者层次聚类法

00:00:48.549 --> 00:00:51.250
那些聚类法先假定所有事物都是一个类

00:00:51.250 --> 00:00:54.325
然后将这个大类分成若干小类

00:00:54.325 --> 00:00:58.594
全连接聚类法和单连接聚类法的运作模式非常相似

00:00:58.594 --> 00:01:00.887
它们的开始方式都是一样的

00:01:00.887 --> 00:01:03.369
假定每个点是一个类

00:01:03.369 --> 00:01:05.500
然后计算任意两个类之间的距离

00:01:05.500 --> 00:01:09.534
再把距离最近的两个类合并成一个类

00:01:09.534 --> 00:01:13.492
所以 首先 距离最近的两个类是 4 号点和 5 号点

00:01:13.492 --> 00:01:15.640
我们把它们合并成一个类

00:01:15.640 --> 00:01:17.004
标记在右侧

00:01:17.004 --> 00:01:19.045
然后合并 1 号点和 2 号点 6 号点和 8 号点

00:01:19.045 --> 00:01:21.415
就像单连接聚类法一样

00:01:21.415 --> 00:01:23.395
这儿有一点不同

00:01:23.394 --> 00:01:25.750
7 号点和橙色类之间的距离

00:01:25.750 --> 00:01:31.045
并不是 7 号点和离它最近的 6 号点之间的距离

00:01:31.045 --> 00:01:36.186
全连接聚类法关注的是两个类中两点之间的最远距离

00:01:36.186 --> 00:01:38.884
将它定义为两类之间的距离

00:01:38.885 --> 00:01:43.390
因此 这两个类之间的距离就是 7号点和 8 号点之间的距离

00:01:43.390 --> 00:01:44.515
其中一个类只包含一个点 7 号点

00:01:44.515 --> 00:01:46.284
另外一个类就是这个橙色类

00:01:46.284 --> 00:01:50.064
这就是两个类之间的最小距离

00:01:50.064 --> 00:01:52.810
所以将它们合并成一个类

00:01:52.810 --> 00:01:56.015
跟单连接聚类法一样 但聚类的原理有所区别

00:01:56.015 --> 00:01:59.439
在这个示例的数据集中 这一步

00:01:59.439 --> 00:02:03.259
是区分单连接聚类法和全连接聚类法的唯一区别

00:02:03.260 --> 00:02:08.485
然后我们继续建构系统树 直到最后形成一个完整的系统树

00:02:08.485 --> 00:02:10.405
然后 我们就要选择

00:02:10.405 --> 00:02:12.905
我们想要几个类？两个？

00:02:12.905 --> 00:02:14.254
那么我们在这个地方切断树

00:02:14.254 --> 00:02:15.889
这是一个类

00:02:15.889 --> 00:02:17.679
这是另一个类

00:02:17.680 --> 00:02:20.500
所以 全连接聚类法中的距离衡量方法

00:02:20.500 --> 00:02:24.289
是两类中最远的两点之间的距离

00:02:24.289 --> 00:02:26.109
假设我们走一步

00:02:26.110 --> 00:02:27.445
这一步是

00:02:27.444 --> 00:02:29.454
我们有三个类

00:02:29.455 --> 00:02:33.535
那么粉色类和紫色类之间的距离

00:02:33.534 --> 00:02:35.199
就是最远的这两点之间的距离

00:02:35.199 --> 00:02:37.614
绿色类和紫色类之间的距离就是这两点间的距离

00:02:37.615 --> 00:02:41.695
绿色类和粉色类之间的距离就是这两点之间的距离

00:02:41.694 --> 00:02:46.560
现在我们已经计算出了所有类之间的距离

00:02:46.560 --> 00:02:49.569
接着来选择一下两类间的最小距离

00:02:49.569 --> 00:02:51.875
然后将这两个类合并成一个类

00:02:51.875 --> 00:02:57.669
全连接聚类法中 这样的距离衡量方法使得产生的类比较紧凑

00:02:57.669 --> 00:03:03.250
比单连接聚类法产生的类更紧凑 更好

00:03:03.250 --> 00:03:05.875
但同样 最佳距离衡量方法

00:03:05.875 --> 00:03:09.960
取决于数据集和目标效果

00:03:09.960 --> 00:03:11.680
全连接聚类法的挑战是

00:03:11.680 --> 00:03:13.495
和我们在单连接聚类法中讲到的一样

00:03:13.495 --> 00:03:15.990
只关注一个点

00:03:15.990 --> 00:03:20.200
一旦确定最远两点后

00:03:20.199 --> 00:03:22.479
就不再考虑其他的点了

00:03:22.479 --> 00:03:24.519
所以在这个例子中

00:03:24.520 --> 00:03:29.635
这些点可能是其他类的一部分

00:03:29.634 --> 00:03:31.539
但是

00:03:31.539 --> 00:03:35.644
全连接聚类法就忽视了他们 只考虑最远的两点

00:03:35.645 --> 00:03:40.314
因此 可能要寻找其他的方式来计算距离

00:03:40.314 --> 00:03:43.525
这些方式就包括 组平均聚类法

00:03:43.525 --> 00:03:45.939
它也是 Scikit-learn 框架的一部分 通常

00:03:45.939 --> 00:03:51.289
它计算的是任意两类中任意两点之间的距离

00:03:51.289 --> 00:03:56.590
然后取平均值 即为两类之间的距离

00:03:56.590 --> 00:03:59.469
最后 还有离差平方和法

00:03:59.469 --> 00:04:05.965
这是 Scikit-learn 框架中一种预设的层次聚类法

00:04:05.965 --> 00:04:11.319
这种方法的目的是把合并类时的变量最小化

00:04:11.319 --> 00:04:14.784
离差平方和法计算两类间的距离的方法是

00:04:14.784 --> 00:04:17.430
例如计算图中类 A 与类 B 之间的距离

00:04:17.430 --> 00:04:22.295
找一个中心点 这一步很简单

00:04:22.295 --> 00:04:26.790
取所有点之间的平均位置 所得即为中心点

00:04:26.790 --> 00:04:31.155
然后就算所有点与中心点之间的距离

00:04:31.154 --> 00:04:33.459
分别计算其平方

00:04:33.459 --> 00:04:36.094
然后把结果相加

00:04:36.095 --> 00:04:40.990
但我们要减去类中的变量

00:04:40.990 --> 00:04:43.990
方法是找每个类中的中心点

00:04:43.990 --> 00:04:46.220
这是类 A 的中心点

00:04:46.220 --> 00:04:50.815
然后减去 A1 的平方 减去 A2 的平方

00:04:50.814 --> 00:04:53.290
A1 指的是第一个点到类 A 中心点之间的距离

00:04:53.290 --> 00:04:56.030
A2 指的是第二个点到类 A 中心点之间的距离

00:04:56.029 --> 00:04:58.474
类 B 也是同样的计算方式

00:04:58.475 --> 00:05:02.350
最后结果就是这两个类之间的距离

00:05:02.350 --> 00:05:04.060
计算这两个类之间的距离也是用同样的方法

00:05:04.060 --> 00:05:05.274
然后计算这两个类之间的距离

00:05:05.274 --> 00:05:08.620
最后结果中哪个数值最小

00:05:08.620 --> 00:05:10.509
就把相关的两个类合并成一个类

00:05:10.509 --> 00:05:12.800
这就是离差平方和法

00:05:12.800 --> 00:05:14.045
下节课中

00:05:14.045 --> 00:05:16.000
我们将介绍具体的使用方法

