WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.940
你可能会有另一个问题

00:00:05.940 --> 00:00:10.060
为什么你选择将这些点拟合为这条线 ?

00:00:10.060 --> 00:00:12.915
为什么不是这条线 ?

00:00:12.914 --> 00:00:18.530
为此 我们需要进一步了解如何选择主成分

00:00:18.530 --> 00:00:22.370
一个数据集的主成分有两个属性

00:00:22.370 --> 00:00:25.500
第一个属性是

00:00:25.500 --> 00:00:29.015
你希望该成分能捕获数据集剩余的最大的方差

00:00:29.015 --> 00:00:33.310
通过选择包括数据集中最大方差的成分

00:00:33.310 --> 00:00:36.560
你将丢失最少的信息量

00:00:36.560 --> 00:00:40.915
你可以通过直接观察 查看每个点到该成分的距离

00:00:40.914 --> 00:00:45.850
来了解丢失的信息量

00:00:45.850 --> 00:00:48.005
因此 从我们的数据集来看 

00:00:48.005 --> 00:00:52.700
假设我们考虑这两个成分  

00:00:52.700 --> 00:00:57.734
将数据移动到这个成分时丢失的信息 可以看作这些距离的总和

00:00:57.734 --> 00:00:59.630
如果我们把它们放在一起 

00:00:59.630 --> 00:01:01.935
这就是丢失了多少信息

00:01:01.935 --> 00:01:05.545
或者 让我们考虑这个成分 

00:01:05.545 --> 00:01:07.680
将丢失的信息量 

00:01:07.680 --> 00:01:10.965
可视化为这些距离的总和

00:01:10.965 --> 00:01:13.700
如果我们比较这些丢失的信息量

00:01:13.700 --> 00:01:17.525
则可以看到这个成分丢失的信息较少

00:01:17.525 --> 00:01:20.030
关于主成分 第二个必须正确的事情

00:01:20.030 --> 00:01:23.900
是这些成分必须相互正交

00:01:23.900 --> 00:01:25.950
这到底是什么意思 ?

00:01:25.950 --> 00:01:28.939
这可能需要对线性代数做一点回顾 

00:01:28.938 --> 00:01:31.919
但我将在这里解释这个想法的本质

00:01:31.920 --> 00:01:36.840
正交成分是指相互成 90 度角的成分

00:01:36.840 --> 00:01:39.935
这两个成分是正交的

00:01:39.935 --> 00:01:43.340
或者 两个没有 90 度夹角

00:01:43.340 --> 00:01:48.365
的成分不是正交的 就像这里这样

00:01:48.364 --> 00:01:51.649
尽管到目前为止 

00:01:51.650 --> 00:01:55.410
你看到的所有示例在实际执行主成分分析时都是二维数据 

00:01:55.409 --> 00:02:00.344
但实际上你的数据可能会具有更多维度

00:02:00.344 --> 00:02:03.448
因此 能够使用 scikit-learn 执行这些操作

00:02:03.448 --> 00:02:06.495
将是我们的下一个任务

00:02:06.495 --> 00:02:07.890
我将向你展示如何执行这些操作 

00:02:07.890 --> 00:02:11.729
然后你将自己使用它们

