WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.609
假设有这么一个 git 仓库

00:00:02.609 --> 00:00:07.740
我们发现最后几个 commit 只是一些小的更改 例如拼写错误更改

00:00:07.740 --> 00:00:10.253
如果将这些 commit 合并成一个 commit

00:00:10.253 --> 00:00:13.500
git log 中会显示的更清晰

00:00:13.500 --> 00:00:17.339
我们可以运行 git rebase -i HEAD~3

00:00:17.339 --> 00:00:22.324
将最后三个 commit 合并或压制成一个 commit

00:00:22.324 --> 00:00:25.513
注意 HEAD 指向当前位置

00:00:25.513 --> 00:00:27.745
对我们来说 我们位于 master 分支上

00:00:27.745 --> 00:00:29.594
因此 HEAD 指向 master 分支

00:00:29.594 --> 00:00:33.009
Head~1 是 HEAD 前的一个 commit

00:00:33.009 --> 00:00:35.594
是当前所在 commit 的上一个或父 commit

00:00:35.594 --> 00:00:38.625
Head~2 是 HEAD 前两个的 commit

00:00:38.625 --> 00:00:40.408
是祖父 commit

00:00:40.408 --> 00:00:44.204
猜对了 Head~3 是 HEAD 前 3 个的 commit

00:00:44.204 --> 00:00:47.059
是当前所在 commit 的曾祖父

00:00:47.060 --> 00:00:49.599
我们不希望删掉

00:00:49.598 --> 00:00:51.464
Head~3 所指向的 commit 8

00:00:51.465 --> 00:00:53.925
这是 git rebase 命令

00:00:53.924 --> 00:00:55.919
因此 我们使用 Head~3 作为基底

00:00:55.920 --> 00:00:59.405
其他 commit 将被放在这个 commit 上

00:00:59.405 --> 00:01:00.570
听起来有点难

00:01:00.570 --> 00:01:02.730
最简单的记法就是

00:01:02.729 --> 00:01:04.004
如果你想压制 (Squash)

00:01:04.004 --> 00:01:05.789
17 个 commit

00:01:05.790 --> 00:01:09.660
只需要使用数字 17 即可

00:01:09.659 --> 00:01:12.284
因此将变成 head~17

00:01:12.284 --> 00:01:15.959
运行 git rebase -i HEAD~3

00:01:15.959 --> 00:01:20.609
将使我们所在的 commit 和前两个 commit 压制为一个 commit

00:01:20.609 --> 00:01:22.469
这样会创建一个新的 commit SHA

00:01:22.469 --> 00:01:25.799
并移动 master 分支使其指向这个新的 commit

00:01:25.799 --> 00:01:29.939
但是注意没有分支指向原始 commit

00:01:29.939 --> 00:01:31.629
因此它们不会出现在 git log 输出结果中

00:01:31.629 --> 00:01:34.379
git 最终将完全清除它们

00:01:34.379 --> 00:01:37.933
如果你担心损坏仓库并想要备份下

00:01:37.933 --> 00:01:42.500
那么就需要进行备份 我们马上重新开始

00:01:42.500 --> 00:01:47.025
当我使用 git rebase 时 我创建了一个直接叫做 backup 的分支

00:01:47.025 --> 00:01:50.680
将其放在和要 rebase 的分支所在的位置相同的位置

00:01:50.680 --> 00:01:52.830
我依然在 master 上 因此没有检出 backup 分支

00:01:52.829 --> 00:01:56.840
我将运行相同的命令

00:01:56.840 --> 00:01:58.680
这样使多个 commit 压制为一个

00:01:58.680 --> 00:02:01.320
并使 master 指向这个新的 commit

00:02:01.319 --> 00:02:06.194
但是原始 commit 没有被删除 且依然会显示在 git log 输出结果中

00:02:06.194 --> 00:02:08.340
因为有一个分支指向了它们

