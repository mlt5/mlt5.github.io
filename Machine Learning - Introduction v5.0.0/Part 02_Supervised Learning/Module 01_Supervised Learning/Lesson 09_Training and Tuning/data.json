{
  "data": {
    "lesson": {
      "id": 591205,
      "key": "44b3cd6a-32f0-48ab-a6ba-d777d6dbc6fe",
      "title": "Training and Tuning",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn the main types of errors that can occur during training, and several methods to deal with them and optimize your machine learning models.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/44b3cd6a-32f0-48ab-a6ba-d777d6dbc6fe/591205/1545423929976/Training+and+Tuning+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/44b3cd6a-32f0-48ab-a6ba-d777d6dbc6fe/591205/1545423926243/Training+and+Tuning+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 331472,
          "key": "c21db724-de37-4b72-8ee5-0811b3b98f7b",
          "title": "Types of Errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c21db724-de37-4b72-8ee5-0811b3b98f7b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 331473,
              "key": "06935d96-c3c0-4f1d-bff6-51fb1cd7ffb1",
              "title": "04 L Types Of Errors",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Twf1qnPZeSY",
                "china_cdn_id": "Twf1qnPZeSY.mp4"
              }
            }
          ]
        },
        {
          "id": 331406,
          "key": "5336629a-1eb2-4a56-a462-e3297d9827cf",
          "title": "Model Complexity Graph",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5336629a-1eb2-4a56-a462-e3297d9827cf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 331411,
              "key": "6fd93ac6-277e-4673-b3a3-8bbfe7ed933b",
              "title": "Model Complexity Graph-Question",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YS5OQCA5cLY",
                "china_cdn_id": "YS5OQCA5cLY.mp4"
              }
            },
            {
              "id": 348155,
              "key": "bed89933-7cd1-422a-8c9f-a51ae3b89748",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/July/596d4a0b_complexity/complexity.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bed89933-7cd1-422a-8c9f-a51ae3b89748",
              "caption": "",
              "alt": null,
              "width": 1002,
              "height": 602,
              "instructor_notes": null
            },
            {
              "id": 348157,
              "key": "d1af5b8c-33e1-47a6-955f-2da797052968",
              "title": "Model Complexity Graph Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d1af5b8c-33e1-47a6-955f-2da797052968",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the model above, how many training and testing errors are there?\nPlease enter your answer as a string composed of the two numbers, separated by a comma and a space. For example, if you find 1 training error and 4 testing errors, your answer should be `1, 4`.",
                "matchers": [
                  {
                    "expression": "0, 2"
                  },
                  {
                    "expression": "0,2"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 348158,
          "key": "d9bb8167-05da-4fff-a7d1-cc6b4a88ae6d",
          "title": "Cross Validation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d9bb8167-05da-4fff-a7d1-cc6b4a88ae6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 348159,
              "key": "8260431b-7521-4087-a75b-598a2d3b9dd0",
              "title": "Model-Complexity-Graph Solution 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5pWHGkNyRhA",
                "china_cdn_id": "5pWHGkNyRhA.mp4"
              }
            }
          ]
        },
        {
          "id": 331474,
          "key": "a5290356-4c84-4cd0-9af3-dc8e06117fb4",
          "title": "K-Fold Cross Validation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5290356-4c84-4cd0-9af3-dc8e06117fb4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 797601,
              "key": "caff4a4d-eaf2-4551-b278-6e14bc89a19a",
              "title": "KFold Cross Validation V3 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9W6o6eWGi-0",
                "china_cdn_id": "9W6o6eWGi-0.mp4"
              }
            }
          ]
        },
        {
          "id": 331407,
          "key": "ddc42022-25b1-41e7-9daa-a9e9a0614e9f",
          "title": "Learning Curves",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ddc42022-25b1-41e7-9daa-a9e9a0614e9f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385977,
              "key": "9d4dc4af-ac8a-4787-bb15-01013b870620",
              "title": "Learning Curves SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "_Correction: In the first plots, the horizontal axis is labeled \"Degree\", and it should labeled \"Number of Training Points\"._\n_At 4:10: The graph represents  *High Variance* to the left side of the video instead of  *High Bias*_",
              "video": {
                "youtube_id": "ZNhnNVKl8NM",
                "china_cdn_id": "ZNhnNVKl8NM.mp4"
              }
            }
          ]
        },
        {
          "id": 331476,
          "key": "c1d77b32-2c63-4cf3-ab9b-3c07470df57c",
          "title": "Detecting Overfitting and Underfitting with Learning Curves",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c1d77b32-2c63-4cf3-ab9b-3c07470df57c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339788,
              "key": "0aed84fb-b40d-47fd-a80f-e6dada5cb20c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Detect Overfitting and Underfitting with Learning Curves\n\nFor this quiz, we'll be using three models to train the circular dataset below.\n- A Decision Tree model,\n- a Logistic Regression model, and\n- a Support Vector Machine model.",
              "instructor_notes": ""
            },
            {
              "id": 339804,
              "key": "527610a8-c712-457f-8763-04498c4e574f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594dc6ee_circle-data/circle-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/527610a8-c712-457f-8763-04498c4e574f",
              "caption": "",
              "alt": null,
              "width": 370,
              "height": 245,
              "instructor_notes": null
            },
            {
              "id": 339746,
              "key": "087bf7e2-40c1-432c-bfb7-c0f9bbb50c51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One of the models overfits, one underfits, and the other one is just right. First, we'll write some code to draw the learning curves for each model, and finally we'll look at the learning curves to decide which model is which.\n\nFirst, let's remember that the way the curves look for the three models, is as follows:",
              "instructor_notes": ""
            },
            {
              "id": 339784,
              "key": "d6e3d17e-3e98-4b88-815e-d5550ce5a671",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594dbe26_learning-curves/learning-curves.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d6e3d17e-3e98-4b88-815e-d5550ce5a671",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 815,
              "instructor_notes": null
            },
            {
              "id": 339786,
              "key": "cfe5a4f2-025f-4f22-a1c7-4ff09e237f22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For the first part of the quiz, all you need is to uncomment one of the classifiers, and hit 'Test Run' to see the graph of the Learning Curve. But if you like coding, here are some details. We'll be using the function called `learning_curve`:\n\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=None, n_jobs=1, train_sizes=np.linspace(.1, 1.0, num_trainings))\n\nNo need to worry about all the parameters of this function (you can read some more in [here](http://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html), but here we'll explain the main ones:\n- `estimator`, is the actual classifier we're using for the data, e.g., `LogisticRegression()` or `GradientBoostingClassifier()`.\n- `X` and `y` is our data, split into features and labels.\n- `train_sizes` are the sizes of the chunks of data used to draw each point in the curve.\n- ` train_scores` are the training scores for the algorithm trained on each chunk of data.\n- ` test_scores` are the testing scores for the algorithm trained on each chunk of data.\n\nTwo very important observations:\n- The training and testing scores come in as a list of 3 values, and this is because the function uses 3-Fold Cross-Validation.\n- **Very important:** As you can see, we defined our curves with Training and Testing **Error**, and this function defines them with Training and Testing **Score**. These are opposite, so the higher the error, the lower the score. Thus, when you see the curve, you need to flip it upside down in your mind, in order to compare it with the curves above.\n\n### Part 1: Drawing the learning curves\n\nIn here, we'll be comparing three models:\n- A **Logistic Regression** model.\n- A **Decision Tree** model.\n- A **Support Vector Machine** model with an rbf kernel, and a gamma parameter of 1000 (this is another type of model, don't worry about how it works for now).\n\nUncomment the code for each one, and examine the learning curve that gets drawn. If you're curious about the code used to draw the learning curves, it's on the **utils.py** tab.",
              "instructor_notes": ""
            },
            {
              "id": 339787,
              "key": "c1f9d2d9-bccb-48cb-a6df-9090a91cec26",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c1f9d2d9-bccb-48cb-a6df-9090a91cec26",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5131883301175296",
                "initial_code_files": [
                  {
                    "text": "# Import, read, and split data\nimport pandas as pd\ndata = pd.read_csv('data.csv')\nimport numpy as np\nX = np.array(data[['x1', 'x2']])\ny = np.array(data['y'])\n\n# Fix random seed\nnp.random.seed(55)\n\n### Imports\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\n\n# TODO: Uncomment one of the three classifiers, and hit \"Test Run\"\n# to see the learning curve. Use these to answer the quiz below.\n\n### Logistic Regression\n#estimator = LogisticRegression()\n\n### Decision Tree\n#estimator = GradientBoostingClassifier()\n\n### Support Vector Machine\n#estimator = SVC(kernel='rbf', gamma=1000)",
                    "name": "quiz.py"
                  },
                  {
                    "text": "from sklearn.model_selection import learning_curve\n\n# It is good to randomize the data before drawing Learning Curves\ndef randomize(X, Y):\n    permutation = np.random.permutation(Y.shape[0])\n    X2 = X[permutation,:]\n    Y2 = Y[permutation]\n    return X2, Y2\n\nX2, y2 = randomize(X, y)\n\ndef draw_learning_curves(X, y, estimator, num_trainings):\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X2, y2, cv=None, n_jobs=1, train_sizes=np.linspace(.1, 1.0, num_trainings))\n\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n\n    plt.grid()\n\n    plt.title(\"Learning Curves\")\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n\n    plt.plot(train_scores_mean, 'o-', color=\"g\",\n             label=\"Training score\")\n    plt.plot(test_scores_mean, 'o-', color=\"y\",\n             label=\"Cross-validation score\")\n\n\n    plt.legend(loc=\"best\")\n\n    plt.show()",
                    "name": "utils.py"
                  },
                  {
                    "text": "x1,x2,y\n0.336493583877,-0.985950993354,-1.0\n-0.0110425297266,-0.10552856162,1.0\n0.238159509297,-0.61741666482,1.0\n-0.366782883496,-0.713818716912,1.0\n1.22192307438,-1.03939898614,-1.0\n-1.30456799971,0.59261847015,-1.0\n-0.407809098981,-0.509110509763,1.0\n0.893188941965,1.18285985648,-1.0\n-0.00546337259365,-0.589551228864,1.0\n0.406423768278,0.611062234636,1.0\n-0.145506766722,0.0365463997206,1.0\n-0.0404887876421,-0.0566500319512,1.0\n1.60355997627,0.0908139379574,-1.0\n-0.604838450284,-0.111340204903,1.0\n-0.534401237223,-1.04875779188,-1.0\n0.977706756346,-1.35281793296,-1.0\n-0.422036924523,-0.274418973593,1.0\n1.69051344717,-0.929766839195,-1.0\n0.655534595433,-0.244533046405,1.0\n0.384609916121,-0.334328465856,1.0\n-0.109341027267,0.273694976361,1.0\n-1.28710021847,-0.406756443289,-1.0\n0.435217566287,-0.192221316649,1.0\n0.0555208008113,1.024011876,-1.0\n1.5088217057,-0.799489053235,-1.0\n0.75932306599,0.775189603256,-1.0\n0.967078497167,-0.707726241999,-1.0\n-0.0231301769156,1.34060202328,-1.0\n-0.274591142835,-0.549682228079,1.0\n-1.2080749077,-1.41385342554,-1.0\n0.381259079564,-0.852947496234,1.0\n0.404870623291,-0.38564643089,1.0\n0.0173135930664,0.787433467901,1.0\n-0.650474497449,0.377281547969,1.0\n-0.175095703948,0.557524657143,1.0\n0.090747012995,0.146764389396,1.0\n-0.23406335446,-1.14282728744,-1.0\n-0.023240502157,0.0329251073349,1.0\n-0.98177853269,-0.614024199162,-1.0\n0.863118366276,0.626452589641,-1.0\n-0.494201528321,-1.2458627184,-1.0\n0.560657440533,0.960463847964,-1.0\n0.517532460272,-1.015620433,-1.0\n-1.07674778462,1.64110648889,-1.0\n-0.40295146753,1.74395283754,-1.0\n1.26250128528,-0.0880456579187,-1.0\n-1.13554604657,0.691274079866,-1.0\n-1.88154070755,0.579520022541,-1.0\n1.61949373896,-1.16815366758,-1.0\n-0.167382068846,0.318140979545,1.0\n-0.731515970032,-0.626052631824,1.0\n0.14962052078,1.24000574432,-1.0\n1.16720084422,0.521580749715,-1.0\n-0.436063303539,0.043680311306,1.0\n-0.827638902506,0.275166403707,1.0\n1.36953107467,0.971233523422,-1.0\n0.690612759144,-1.27804624607,-1.0\n1.26986688391,0.575808793135,-1.0\n0.208866020688,-0.146742455013,1.0\n-0.437203222578,0.52116507147,1.0\n-0.378363762158,-0.0769780148552,1.0\n-0.423820115256,-0.836137209863,1.0\n-0.560756181289,-0.41037775405,1.0\n0.336052960763,-0.224802048045,1.0\n-1.33543072512,-0.990358481473,-1.0\n-0.0289733996866,0.441010128386,1.0\n-1.3193906415,-0.37764709941,-1.0\n-0.808411080806,1.2283790386,-1.0\n1.35995943884,1.12161870845,-1.0\n-0.872069364163,-0.252522725967,1.0\n-1.88887517471,0.144098536459,-1.0\n1.60845822722,-0.774759253864,-1.0\n-0.358639909549,0.784305199745,1.0\n0.520332593218,-0.62185400704,1.0\n0.306204273961,0.25448089669,1.0\n-1.51072939376,0.00594704976351,-1.0\n0.956067338203,-0.533023015577,-1.0\n0.288866739458,-0.725155662248,1.0\n0.403468553933,-1.75945770781,-1.0\n0.0859415686163,-0.958846823471,1.0\n0.381957047469,0.0124143718471,1.0\n0.336004016976,-0.259620737798,1.0\n1.02869639688,-0.785051442286,-1.0\n-0.181058441906,0.00266871780379,1.0\n0.279139768315,0.148068778283,1.0\n-0.700587484192,0.118422440942,1.0\n-0.474343136475,-0.162548759675,1.0\n-1.29581526521,0.755926314388,-1.0\n0.140673267698,-1.60264376179,-1.0\n0.328196143279,0.444738575921,1.0\n-0.940761503292,-1.00437673463,-1.0\n0.4177654822,1.11423358886,-1.0\n-0.802874871784,-1.27790346857,-1.0\n-0.596842011584,0.593623894204,1.0\n-0.112331263254,0.174318514314,1.0\n-1.45753325136,-1.30679050369,-1.0\n1.63561447039,0.27394296313,-1.0\n0.113120402388,0.0204651461722,1.0\n0.753405102224,0.1938301221,1.0\n-0.538129041247,-0.000723035827331,1.0\n",
                    "name": "data.csv"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 340529,
              "key": "66617ef9-1d21-4748-86dc-bacd99d11de3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Part 2: Analyzing the learning curves\nFor this second part of the quiz, you can look at the curves you've drawn before, to decide which one of the three models underfits, which one overfits, and which one is just right.",
              "instructor_notes": ""
            },
            {
              "id": 339824,
              "key": "ccead897-592e-409c-87e8-315514580830",
              "title": "Underfitting Overfitting Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ccead897-592e-409c-87e8-315514580830",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "From the models above, which model underfits, which one overfits, and which one is just right?"
                },
                "concepts_label": "Model",
                "answers_label": "Overfits, Undefits, Just Right?",
                "concepts": [
                  {
                    "text": "Logistic Regression",
                    "correct_answer": {
                      "id": "a1498269860285",
                      "text": "Underfits"
                    }
                  },
                  {
                    "text": "Decision Tree",
                    "correct_answer": {
                      "id": "a1498269910514",
                      "text": "Just Right"
                    }
                  },
                  {
                    "text": "Support Vector Machine",
                    "correct_answer": {
                      "id": "a1498269911319",
                      "text": "Overfit"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1498269911319",
                    "text": "Overfit"
                  },
                  {
                    "id": "a1498269860285",
                    "text": "Underfits"
                  },
                  {
                    "id": "a1498269910514",
                    "text": "Just Right"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 339825,
          "key": "4ec344f3-4512-43bb-8a14-ccad4c665ec1",
          "title": "Solution: Detecting Overfitting and Underfitting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4ec344f3-4512-43bb-8a14-ccad4c665ec1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339826,
              "key": "b8829466-4775-4d43-a314-53efb8bca304",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Using Learning Curves to Detect Overfitting and Underfitting\n\nCongratulations! That was not an easy quiz. Here are the curves you should have obtained:",
              "instructor_notes": ""
            },
            {
              "id": 340532,
              "key": "b926b5b8-fdb5-46c9-9089-c9ba9debda65",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/5952e130_learning-curves/learning-curves.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b926b5b8-fdb5-46c9-9089-c9ba9debda65",
              "caption": "",
              "alt": null,
              "width": 5120,
              "height": 1352,
              "instructor_notes": null
            },
            {
              "id": 340533,
              "key": "cf5aed68-2a2c-41ae-aad1-f0a1f4479985",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can observe from the curves that:\n- The **Logistic Regression** model has a low training and testing score.\n- The **Decision Tree** model has a high training and testing score.\n- The **Support Vector Machine** model has a high training score, and a low testing score.\n\nFrom here, we can determine that the Logistic Regression model underfits, the SVM model overfits, and the Decision Tree model is just right.\n\nEquivalently, we can flip this curves (as they measure score, and our original curves measure error), and compare them with the following three curves, we can see that they look a lot like the three curves we saw before. (*Note: The fact that we flip the curves doesn't mean that the error is 1 minus the score. It only means that as the model gets better, the error decreases, and the score increases.)*",
              "instructor_notes": ""
            },
            {
              "id": 340534,
              "key": "84de0168-f0cc-4844-923d-9410cd264247",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/594dbe26_learning-curves/learning-curves.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/84de0168-f0cc-4844-923d-9410cd264247",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 815,
              "instructor_notes": null
            },
            {
              "id": 340536,
              "key": "af52f28b-5427-4448-b06d-4f370559880f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, we should check if this is visible in the actual model. When we plot the boundary curves for each one of these models, we get the following:",
              "instructor_notes": ""
            },
            {
              "id": 340538,
              "key": "ab1393ed-9b9f-49a8-9d30-4397ed5d341b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/5952e5bd_models/models.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ab1393ed-9b9f-49a8-9d30-4397ed5d341b",
              "caption": "",
              "alt": null,
              "width": 2560,
              "height": 920,
              "instructor_notes": null
            },
            {
              "id": 340540,
              "key": "ba394c5d-0363-4496-86f4-00c175ed56fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When we look at the models above, does it make sense that the first one underfits, the second one is right, and the third one overfits? It does, right? We can see that the data is correctly bounded by a circle, or a square. What our models do, is the following:\n- The **Logistic Regression** model uses a line, which is too simplistic. It doesn't do very well on the training set. Thus, it **underfits**.\n- The **Decision Tree** model uses a square, which is a pretty good fit, and generalizes well. Thus, this model is **good**.\n- The **Support Vector Machine** model actually draws a tiny circle around each point. This is clearly just memorizing the training set, and won't generalize well. Thus, it **overfits**.\n\nIt's always good to do a reality check when we can, and see that our models actually do have the behavior that the metrics tell us.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 331409,
          "key": "92ba91b9-818e-4755-ab69-8e123561e7ef",
          "title": "Grid Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "92ba91b9-818e-4755-ab69-8e123561e7ef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 385978,
              "key": "f94793c2-f490-4e78-9f8f-56f03feedd1a",
              "title": "Grid Search SC V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "_Note:_ In this video, Luis says \"gamma\", while a \"C\" appears in the screen. The correct one is \"C\". Also, these parameters about SVMs and decision trees are only showed here for exposition, and are discussed in more detail in the Supervised Learning section of the course.",
              "video": {
                "youtube_id": "zDw-ZGiHW5I",
                "china_cdn_id": "zDw-ZGiHW5I.mp4"
              }
            }
          ]
        },
        {
          "id": 502614,
          "key": "8989b650-f40d-49f2-8b0e-35cb2d44c100",
          "title": "Grid Search in sklearn",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8989b650-f40d-49f2-8b0e-35cb2d44c100",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502617,
              "key": "88b65d40-0eca-461e-9a2b-8b4cce464e21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Grid Search in sklearn\n\nGrid Search in sklearn is very simple. We'll illustrate it with an example. Let's say we'd like to train a support vector machine, and we'd like to decide between the following parameters:\n- kernel: `poly` or `rbf`.\n- C: 0.1, 1, or 10.\n\n(_**Note:** These parameters can be used as a black box now, but we'll see them in detail in the **Supervised Learning Section** of the nanodegree._)\n\nThe steps are the following:\n### 1. Import GridSearchCV\n```\nfrom sklearn.model_selection import GridSearchCV\n```\n\n### 2. Select the parameters:\nHere we pick what are the parameters we want to choose from, and form a dictionary. In this dictionary, the keys will be the names of the parameters, and the values will be the lists of possible values for each parameter.\n```\nparameters = {'kernel':['poly', 'rbf'],'C':[0.1, 1, 10]}\n```\n\n### 3. Create a scorer.\nWe need to decide what metric we'll use to score each of the candidate models. In here, we'll use F1 Score.\n```\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import f1_score\nscorer = make_scorer(f1_score)\n```\n\n### 4. Create a GridSearch Object with the parameters, and the scorer. Use this object to fit the data.\n```\n# Create the object.\ngrid_obj = GridSearchCV(clf, parameters, scoring=scorer)\n# Fit the data\ngrid_fit = grid_obj.fit(X, y)\n```\n\n### 5. Get the best estimator.\n```\nbest_clf = grid_fit.best_estimator_\n\n```\nNow you can use this estimator `best_clf` to make the predictions.\n\nIn the next page, you'll find a lab where you can use GridSearchCV to optimize a decision tree model.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 502615,
          "key": "ec709dc0-aefb-472e-a122-01fea100d264",
          "title": "Grid Search Lab",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ec709dc0-aefb-472e-a122-01fea100d264",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502616,
              "key": "030c3148-7023-452e-9bf2-41e668715784",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5f625fa6",
              "pool_id": "jupyter",
              "view_id": "5f625fa6-e261-46d7-bfc0-fc691023cea0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Grid_Search_Lab.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 502679,
          "key": "16c9df1b-43c7-4df5-99ba-45585b01d6b6",
          "title": "[Solution] Grid Search Lab",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "16c9df1b-43c7-4df5-99ba-45585b01d6b6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502680,
              "key": "219406de-ee9f-4fd3-ae58-a6e2bcacf64f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5f625fa6",
              "pool_id": "jupyter",
              "view_id": "fbb8c2f3-245b-4f12-85a2-0e2f6343acd6",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Solution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 633231,
          "key": "ce186d5c-005e-4639-ba46-0112c8efeef8",
          "title": "Putting It All Together",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce186d5c-005e-4639-ba46-0112c8efeef8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 633456,
              "key": "f9f20da4-92cf-45cb-ab64-32c324188660",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5f625fa6",
              "pool_id": "jupyter",
              "view_id": "6c2ef267-d3b8-4e10-a6e3-380250e2daa1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Diabetes%20Case%20Study.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 341206,
          "key": "c0216d38-ebaf-44b7-82c2-f038d13ee664",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c0216d38-ebaf-44b7-82c2-f038d13ee664",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 348419,
              "key": "867f0ef9-2933-493d-b90d-f3f70b72978b",
              "title": "MLND Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sFvMBncQjr8",
                "china_cdn_id": "sFvMBncQjr8.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}