{
  "data": {
    "lesson": {
      "id": 590588,
      "key": "92c3d352-002e-4517-b289-13eba9c5bb59",
      "title": "Setting Up Your Computer",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, get your computer set up with Python 3 using Anaconda, as well as setting up a text editor.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/92c3d352-002e-4517-b289-13eba9c5bb59/590588/1544197160866/Setting+Up+Your+Computer+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/92c3d352-002e-4517-b289-13eba9c5bb59/590588/1544197158367/Setting+Up+Your+Computer+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 906785,
          "key": "fdfc251b-902c-47c9-9216-ac9219e57cca",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fdfc251b-902c-47c9-9216-ac9219e57cca",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906789,
              "key": "52bc1857-c503-43ec-b1ed-6157ba0568a1",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Yg0gBpTzkMo",
                "china_cdn_id": "Yg0gBpTzkMo.mp4"
              }
            },
            {
              "id": 966820,
              "key": "8659fee1-0d81-449c-9c9f-e0b924f88131",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Juno mentions Slack in the video, although you'll find your fellow students in Student Hub now.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494902,
          "key": "fe3a8be9-705f-4c40-9c62-4ef6a3925bd4",
          "title": "Python Installation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe3a8be9-705f-4c40-9c62-4ef6a3925bd4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527383,
              "key": "ab683acd-9cf9-4fe2-a135-bc54d2877d55",
              "title": "Python Installation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2_P05aYChqQ",
                "china_cdn_id": "2_P05aYChqQ.mp4"
              }
            },
            {
              "id": 513924,
              "key": "54249c89-ef66-4f89-afb6-8202015277be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Before We Install Python:\n\n## 1. Prepare to Use Command Line\nTo install Python and follow this lesson, you will need to use the command line. We will walk you through all the details, so don't worry if you have never used it before!  If you would like to learn or refresh on command lines, we strongly recommend going through this free [Shell Workshop](http://www.udacity.com/course/shell-workshop--ud206) lesson, where you can set up and learn how to use Unix Shell commands.\n\n### ** Note to Windows Users: Install Git Bash\nAs noted in the free Shell Workshop linked above, we recommend you install Git Bash [here](https://git-scm.com/download/win) and use this as your terminal for this lesson. *Please note that during installation you should select the checkbox* **Use Git and Optional Unix tools from the Windows Command Prompt**. This will allow you to use Unix commands while in Windows. If you'd rather use PowerShell, those commands are also provided in this lesson. For more information on the different command shells, check out the Shell Workshop lesson linked above.\n\n## 2. Is Python Already Installed On Your Computer?\nIn this course, we're using the most recent major version of Python - Python 3. Although Python 2 is still being used in many places, it is no longer being updated. In order to keep up compatibility with future improvements to Python, we recommend using Python 3.\n\nMac OS X and Linux usually come with Python 2 already installed. We DO NOT recommend that you make any changes to this Python, since parts of the operating system are using Python. However, it shouldn't do any harm to your system to install Python 3 separately, too.\n\nWindows doesn't usually come with Python included, but you can still check whether you have it installed before going ahead. So, first, check that you’ve not already got Python 3 installed.\n\nOpen up your Terminal or Command Line (this would be Git Bash on Windows).\n\nIn a new terminal or command prompt, type\n```bash\n$ python --version\n```\nand press `Enter`.\n\nYou might get a response that the Python version installed is something like `Python 2.7.9`. In that case, it would tell you that you have Python 2 installed, and you'll want to follow the steps in the next couple of sections to update it to Python 3.\n\nIf instead the version number starts with a 3, then you already have Python 3 installed! Don't install Python again! \n\nAlternatively, you might see an error message - don't worry about that for now, just try the steps in the next couple of sections.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 614278,
          "key": "3a55412c-06b5-4422-8b77-5078f9cb32da",
          "title": "[For Windows] Configuring Git Bash to Run Python",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a55412c-06b5-4422-8b77-5078f9cb32da",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 615388,
              "key": "d2be7f53-ee42-453e-af30-d69f3b5ddb08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# For Windows users using Git Bash:\nIf you are on Windows and choose to use Git Bash, you'll need to run a few commands to configure it to run Python and Anaconda. We'll do this by creating a `.bashrc` file, which allows us to set up these configurations.\n\n**If you do not plan to use Git Bash, feel free to skip this section for now!** Otherwise, open the Git Bash terminal and follow the steps below.\n\n## Step 1: Enter `cd` to get to your home directory.\nThis step is important. Git Bash does not open in this directory by default, and you'll need to be here to create your `.bashrc` file.",
              "instructor_notes": ""
            },
            {
              "id": 615449,
              "key": "295cae87-710b-46e6-9039-453766ad6c36",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfb95f_step1-cd/step1-cd.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/295cae87-710b-46e6-9039-453766ad6c36",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 286,
              "instructor_notes": null
            },
            {
              "id": 644091,
              "key": "02b9be20-45d7-41a1-aba8-deda26f78e9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Troubleshooting error messages \n\nIn case you get an error message here, such as *bash: cd: command not found*, you may need to uninstall Git and reinstall Git. However, this time during installation select the checkbox **Use Git and Optional Unix tools from the Windows Command Prompt**.\n\nHere is an additional blog post on [Installing Git for Windows](https://medium.com/@GalarnykMichael/install-git-on-windows-9acf2a1944f0).\n\nThen retry Step 1 above.",
              "instructor_notes": ""
            },
            {
              "id": 615439,
              "key": "d17b52f3-77be-43d1-b9bd-3758f2febc85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 2: Enter `pwd ` to get the path to your home directory.\n`pwd` gives you the path to your current directory, which should be your home directory if you did Step 1. You'll need this for the next step. \n\nThe path to my home directory is `/c/Users/Juno`.",
              "instructor_notes": ""
            },
            {
              "id": 615452,
              "key": "379e390c-27d7-4b92-bdb5-f3484f83b7d5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfb984_step2-pwd/step2-pwd.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/379e390c-27d7-4b92-bdb5-f3484f83b7d5",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 286,
              "instructor_notes": null
            },
            {
              "id": 615441,
              "key": "4f94f79a-ae4d-4feb-bdf5-943df5fb2a47",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 3: Get the file path to your Anaconda installation.\n[*Note*: You may need to come back to this step and the next step after installing Anaconda in a couple more pages.]\n\nTo get the file path to your Anaconda installation, you need to take the path you got from the previous step and append to it with the name of your Anaconda folder.\n\nFind the name of your Anaconda folder by entering `ls`. (These are lower case letters \"l\" and \"s\", because you want to \"list\" your files.) This should print all the file names in your home directory. If you used the default settings during your Anaconda installation, this folder name is likely `Anaconda3` or `anaconda`.\n\nIn my directory, I had a folder named `Anaconda3`. So the full file path to my Anaconda installation is `/c/Users/Juno/Anaconda3`.",
              "instructor_notes": ""
            },
            {
              "id": 620613,
              "key": "21cf649f-676a-4e49-880f-851fb5ba88ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 4: Add Python and Anaconda to PATH in `.bashrc` file.\nNext, enter the following command in your terminal, replacing`[YOUR_PATH]` with the path to your Anaconda installation. For example, I would replace `[YOUR PATH]` in the string below with `/c/Users/Juno/Anaconda3`.\n\n```txt\necho 'export PATH=\"$PATH:[YOUR_PATH]:[YOUR_PATH]/Scripts\"' >> .bashrc\n```\n\n__WARNING:__ Before pressing enter, make sure you are following the syntax exactly (especially the placement of each `'`, `\"`, and `$` symbol), and double check that you are replacing `[YOUR PATH]` correctly. You can compare your complete command with mine in the screenshot below. \n\nThis step adds two paths to a `.bashrc` file, which tells Git Bash where to find the scripts it needs to execute Python and Anaconda. Again, it's important that you are in your home directory when you complete this step.",
              "instructor_notes": ""
            },
            {
              "id": 615453,
              "key": "747d5f6e-a3eb-4be1-a5ec-1148ba0d9401",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfba33_step3-path/step3-path.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/747d5f6e-a3eb-4be1-a5ec-1148ba0d9401",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 615442,
              "key": "c926af72-cbed-44d4-bb8d-5445150ba1aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 5: Add alias for Python in `.bashrc` file.\nNext, enter this command to tell Git Bash where to find the Python executable file. \n```txt\necho 'alias python=\"winpty python.exe\"' >> .bashrc\n```\nThis is an extra step that's needed for users running Python in Git Bash. This adds a command to your `.bashrc` file that says to run `winpty python.exe` whenever you enter `python` into the terminal.",
              "instructor_notes": ""
            },
            {
              "id": 615454,
              "key": "9e9ba4fd-efba-4e5c-bcbf-571de2f92d48",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfba70_step4-alias/step4-alias.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9e9ba4fd-efba-4e5c-bcbf-571de2f92d48",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 615444,
              "key": "aba8bf18-faaf-44db-b37d-bb40dc502af2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 6: Execute commands from `.bashrc`\nNow that you added the necessary commands to your `.bashrc` file, run the following line to execute the file.\n```txt\nsource .bashrc\n```\nAlternatively, you can just close and open a new Git Bash window, which would accomplish the same thing. `.bashrc` is executed every time Git Bash launches.",
              "instructor_notes": ""
            },
            {
              "id": 615455,
              "key": "cc4f9f37-3c65-492d-bed2-213b68c3531c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfbaaf_step5-source/step5-source.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cc4f9f37-3c65-492d-bed2-213b68c3531c",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 615456,
              "key": "7f8323fe-9a0f-4f4c-ba91-f5bb7dcf881e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 7: Test Run\nRun the following commands to make sure you can access conda, Python, and the Python interpreter. If you followed these steps correctly, you should now be able to run Python in Git Bash!",
              "instructor_notes": ""
            },
            {
              "id": 615457,
              "key": "32880019-6511-4521-8dd2-e2b66100f65e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5adfbb3f_step6-testrun/step6-testrun.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/32880019-6511-4521-8dd2-e2b66100f65e",
              "caption": "",
              "alt": "",
              "width": 1891,
              "height": 626,
              "instructor_notes": null
            },
            {
              "id": 616627,
              "key": "61992518-8379-4ea4-b0cf-39d4382d3ce0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Enter `exit()` to leave the Python interpreter after the last step above.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160250,
          "key": "02b53153-d18d-46dd-86c0-b19632bfeda1",
          "title": "What is Anaconda?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "02b53153-d18d-46dd-86c0-b19632bfeda1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160252,
              "key": "1cdcf052-ca58-4b42-a3c3-e9756357b5b5",
              "title": "Introductory text",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Anaconda\n\nWelcome to this lesson on using [Anaconda](https://www.anaconda.com/distribution/#download-section) to manage packages and environments for use with Python. With Anaconda, it's simple to install the packages you'll often use in data science work. You'll also use it to create virtual environments that make working on multiple projects much less mind-twisting. Anaconda has simplified my workflow and solved a lot of issues I had dealing with packages and multiple Python versions. \n\nAnaconda is actually a distribution of software that comes with `conda`, Python, and over 150 scientific packages and their dependencies. The application `conda` is a package and environment manager. Anaconda is a fairly large download (~500 MB) because it comes with the most common data science packages in Python. If you don't need all the packages or need to conserve bandwidth or storage space,  there is also **Miniconda**, a smaller distribution that includes only `conda` and Python. Miniconda can do everything Anaconda does, but doesn't have the preinstalled packages. You can still install any of the available packages with `conda`, it just doesn't come with them, so either Anaconda or Miniconda are fine for this course.\n\n`Conda` is a program you'll be using exclusively from the command line, so if you aren't comfortable using it, check out this [command prompt tutorial for Windows](https://www.lynda.com/-tutorials/Windows-command-line-basics/497312/513424-4.html) or our [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595) course for OSX/Linux.\n\nYou probably already have Python installed and wonder why you need this at all. First, since Anaconda comes with a bunch of data science packages, you'll be all set to start working with data. Secondly, using `conda` to manage your packages and environments will reduce future issues dealing with the various libraries you'll be using.\n\n## Managing Packages\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 198025,
              "key": "0297fa6e-5bd3-48c9-b06b-1ef3046d4de7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58114536_conda-install/conda-install.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0297fa6e-5bd3-48c9-b06b-1ef3046d4de7",
              "caption": "Installing numpy with conda",
              "alt": null,
              "width": 697,
              "height": 548,
              "instructor_notes": null
            },
            {
              "id": 198019,
              "key": "dde92b9f-c267-45de-bdf6-9c5f47cc808a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Package managers are used to install libraries and other software on your computer. You’re probably already familiar with pip, it’s the default package manager for Python libraries. Conda is similar to pip except that the available packages are focused around data science while pip is for general use. However, conda is *not* Python specific like pip is, it can also install non-Python packages. It is a package manager for *any* software stack. That being said, not all Python libraries are available from the Anaconda distribution and conda. You can (and will) still use pip alongside conda to install packages.\n\nConda installs precompiled packages. For example, the Anaconda distribution comes with Numpy, Scipy and Scikit-learn compiled with the [MKL library](https://docs.continuum.io/mkl-optimizations/), speeding up various math operations. The packages are maintained by contributors to the distribution which means they usually lag behind new releases. But because someone needed to build the packages for many systems, they tend to be more stable (and more convenient for you).\n\n## Environments",
              "instructor_notes": ""
            },
            {
              "id": 198028,
              "key": "d24c14d1-62bc-42da-8d40-9eca1b8401c8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58114552_conda-create-env/conda-create-env.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d24c14d1-62bc-42da-8d40-9eca1b8401c8",
              "caption": "Creating an environment with conda",
              "alt": null,
              "width": 697,
              "height": 548,
              "instructor_notes": null
            },
            {
              "id": 198020,
              "key": "60a51f93-51d1-4b96-ad14-370deb1e6a9a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Along with managing packages, Conda is also a virtual environment manager. It's similar to [virtualenv](https://virtualenv.pypa.io/en/stable/) and [pyenv](https://github.com/yyuu/pyenv), other popular environment managers. \n\nEnvironments allow you to separate and isolate the packages you are using for different projects. Often you’ll be working with code that depends on different versions of some library. For example, you could have code that uses new features in Numpy, or code that uses old features that have been removed. It’s practically impossible to have two versions of Numpy installed at once. Instead, you should make an environment for each version of Numpy then work in the appropriate environment for the project.\n\nThis issue also happens a lot when dealing with Python 2 and Python 3. You might be working with old code that doesn’t run in Python 3 and new code that doesn’t run in Python 2. Having both installed can lead to a lot of confusion and bugs. It’s much better to have separate environments.\n\nYou can also export the list of packages in an environment to a file, then include that file with your code. This allows other people to easily load all the dependencies for your code. Pip has similar functionality with `pip freeze > requirements.txt`.\n\n## Where we go from here\nNext, I'll get into the details of using Anaconda. First I'll cover installing it, then using the package manager, and finally creating and managing environments.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160253,
          "key": "d45d6e48-ff3a-4192-b377-f0264723f92e",
          "title": "Installing Anaconda",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d45d6e48-ff3a-4192-b377-f0264723f92e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160254,
              "key": "fad5f371-759d-47e0-9589-53d92bada5b9",
              "title": "Installation instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Installing Anaconda\n\nAnaconda is available for Windows, Mac OS X, and Linux. You can find the installers at [https://www.anaconda.com/download/](https://www.anaconda.com/download/) and the installation instructions [here](https://docs.anaconda.com/anaconda/install/). \n\nIf you already have Python installed on your computer, this won't break anything. Instead, the default Python used by your scripts and programs will be the one that comes with Anaconda.\n\nChoose the Python 3.7 version, you can install Python 2 versions later. Also, choose the 64-bit installer if you have a 64-bit operating system, otherwise go with the 32-bit installer. Go ahead and choose the appropriate version, then install it. Continue on afterwards!\n\nAfter installation, you’re automatically in the default conda environment with all packages installed which you can see below. You can check out your own install by entering `conda list` into your terminal.\n\n<video loop autoplay>\n  <source src=\"https://s3.amazonaws.com/content.udacity-data.com/courses/ud1111/conda_default_install.mp4\" type=\"video/mp4\">\n</video>\n\n## On Windows\nA bunch of applications are installed along with Anaconda:\n\n* **Anaconda Navigator**, a GUI for managing your environments and packages\n* **Anaconda Prompt**, a terminal where you can use the command line interface to manage your environments and packages\n* **Spyder**, an IDE geared toward scientific development\n\nTo avoid errors later, it's best to update all the packages in the default environment. Open the **Anaconda Prompt** application. In the prompt, run the following commands:\n\n    conda upgrade conda\n    conda upgrade --all\n\nand answer yes when asked if you want to install the packages. The packages that come with the initial install tend to be out of date, so updating them now will prevent future errors from out of date software.\n\n**Note:** In the previous step, running `conda upgrade conda` should not be necessary because `--all` includes the conda package itself, but some users have encountered errors without it.\n\nIn the rest of this lesson, I'll be asking you to use commands in your terminal. I highly suggest you start working with Anaconda this way, then later use the GUI if you'd like. \n\n## Troubleshooting\n\nIf you are seeing the following \"conda command not found\" and are using ZShell, you have to do the following:\n* Add `export PATH=\"/Users/username/anaconda/bin:$PATH\"` to your .zsh_config file.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 198064,
          "key": "9310a67f-9b23-449e-8949-4312dc718ef9",
          "title": "Managing packages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9310a67f-9b23-449e-8949-4312dc718ef9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 198072,
              "key": "578e3020-cf75-4a0d-9037-9a89103bfefb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Managing Packages\n\nOnce you have Anaconda installed, managing packages is fairly straightforward. To install a package, type `conda install package_name` in your terminal. For example, to install numpy, type `conda install numpy`.\n\n<video controls loop autoplay>\n  <source src=\"https://s3.amazonaws.com/content.udacity-data.com/courses/ud1111/conda_install.mp4\" type=\"video/mp4\">\n</video>\n\nYou can install multiple packages at the same time. Something like `conda install numpy scipy pandas` will install all those packages simultaneously. It's also possible to specify which version of a package you want by adding the version number such as `conda install numpy=1.10`.\n\nConda also automatically installs dependencies for you. For example `scipy` depends on `numpy`, it uses and requires `numpy`. If you install just `scipy` (`conda install scipy`), Conda will also install `numpy` if it isn't already installed.\n\nMost of the commands are pretty intuitive. To uninstall, use `conda remove package_name`. To update a package `conda update package_name`. If you want to update all packages in an environment, which is often useful, use `conda update --all`. And finally, to list installed packages, it's `conda list` which you've seen before.\n\nIf you don't know the exact name of the package you're looking for, you can try searching with `conda search *search_term*`. For example, I know I want to install [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/), but I'm not sure of the exact package name. So, I try `conda search *beautifulsoup*`. Note that your shell might expand the wildcard `*` before running the conda command. To fix this, wrap the search string in single or double quotes like `conda search '*beautifulsoup*'`.\n",
              "instructor_notes": ""
            },
            {
              "id": 627880,
              "key": "c28f045f-de8a-430d-9ddf-42070b335667",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5afae640_conda-search/conda-search.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c28f045f-de8a-430d-9ddf-42070b335667",
              "caption": "",
              "alt": "",
              "width": 2064,
              "height": 1374,
              "instructor_notes": null
            },
            {
              "id": 199395,
              "key": "0590196a-afb7-49b4-b327-cac9aeafe0b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It returns a list of the Beautiful Soup packages available with the appropriate package name, `beautifulsoup4`.",
              "instructor_notes": ""
            },
            {
              "id": 217480,
              "key": "4790ec2e-b281-4bc9-b577-da5678a07e50",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4790ec2e-b281-4bc9-b577-da5678a07e50",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these commands would you use to install the packages `numpy` and `pandas` with conda? (More than one might be correct - select all that apply.)",
                "answers": [
                  {
                    "id": "a1480541673069",
                    "text": "`conda install numpy`",
                    "is_correct": false
                  },
                  {
                    "id": "a1480541700965",
                    "text": "`conda install pandas`",
                    "is_correct": true
                  },
                  {
                    "id": "a1480541709026",
                    "text": "`conda install numpy pandas`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 229233,
          "key": "5e87a70d-c147-422b-b120-f89a392ba154",
          "title": "On Python versions at Udacity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e87a70d-c147-422b-b120-f89a392ba154",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 229252,
              "key": "13650963-1313-43c2-acd1-d73531aaaa5d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Python versions at Udacity\n\nMost Nanodegree programs at Udacity will be (or are already) using Python 3 almost exclusively. \n\n## Why we're using Python 3\n\n* Jupyter is [switching to Python 3 only](https://ipython.readthedocs.io/en/stable/whatsnew/version6.html#python-3-only-codebase)\n* Python 2.7 is [being retired](https://pythonclock.org/)\n* Python 3 has been out for almost 10 years, and there are very few dependencies (and none in this program) that are incompatible.\n\nAt this point, there are enough new features in Python 3 that it doesn't make much sense to stick with Python 2 unless you're working with old code. All new Python code should be written for version 3. Read more [here](https://wiki.python.org/moin/Python2orPython3).\n\n## The main breakage between Python 2 and 3\n\nFor the most part, Python 2 code will work with Python 3. Of course, most new features introduced with Python 3 versions won't be backwards compatible. The place where your Python 2 code will fail most often is the `print` statement.\n\nFor most of Python's history including Python 2, printing was done like so:\n\n    print \"Hello\", \"world!\"\n    > Hello world!\n\nThis was changed in Python 3 to a function.\n\n    print(\"Hello\", \"world!\")\n    > Hello world!\n\nThe `print` function was back-ported to Python 2 in version 2.6 through the `__future__` module:\n```python\n    # In Python 2.6+\n    from __future__ import print_function\n    print(\"Hello\", \"world!\")\n    > Hello world!\n```\nThe `print` statement doesn't work in Python 3. If you want to print something and have it work in both Python versions, you'll need to import `print_function` in your Python 2 code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494905,
          "key": "0e540dbc-0ab3-4c44-a2d1-548385081110",
          "title": "Running a Python Script",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0e540dbc-0ab3-4c44-a2d1-548385081110",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "first_script",
                "uri": "https://video.udacity-data.com/topher/2018/March/5aa86fd0_first-script.py/first-script.py.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 543568,
              "key": "7dc80771-e016-4181-a03c-99250dd1ea46",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you are on a Windows machine, you can follow along using [git](https://git-scm.com/download/win).  If you are on a Mac or Linux machine, the terminal should be available with a quick search.  You should then be able to follow along as shown in the video below.",
              "instructor_notes": ""
            },
            {
              "id": 527384,
              "key": "8635f469-5176-4611-a744-2b45890c7ad9",
              "title": "Running A Python Script",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vMKemwCderg",
                "china_cdn_id": "vMKemwCderg.mp4"
              }
            },
            {
              "id": 513926,
              "key": "bcec3215-b631-4157-8496-28e96a6eaf13",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Run a Python Script!\n1. Download the zip file `first_script` attached at the bottom of this page (click it to unzip the file, then move it to an appropriate directory on your computer). This might be a good time to set up a new directory for your learning if you don't have one already.\n2. Open your terminal and use `cd` to navigate to the directory containing that downloaded file.\n3. Now that you’re in the directory with the file, you can run it by typing `python first_script.py` and pressing enter. Note: You may have to enter `python3` instead of `python` to execute Python 3 if you have both versions installed on your computer.\n\nYou’ll know you’ve run the script successfully if you see this message printed to your terminal:\n```txt\nCongratulations on running this script!!\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 494906,
          "key": "f411e93c-03f8-4d45-b60f-d4c2832b63d6",
          "title": "Programming Environment Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f411e93c-03f8-4d45-b60f-d4c2832b63d6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 527385,
              "key": "12aa6983-949f-4907-935d-08b2a8b8da21",
              "title": "Programming Environment Setup",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EKxDnCK0NAk",
                "china_cdn_id": "EKxDnCK0NAk.mp4"
              }
            },
            {
              "id": 513929,
              "key": "fe5bb07d-bedf-461b-9af3-4934bec9410a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Configure Your Own Python Programming Setup\nNow you've seen my setup, take a moment to get yourself comfortable on your own computer.\n\nBelow you will find a number of different options for code editors. We recommend for all of our courses using [Atom](https://atom.io/), which will work on all operating systems. If you decide not to use Atom, for first time coders **Sublime** is also popular.  \n\n\n### For Mac and Linux:\n* [Visual Studio Code](https://code.visualstudio.com/)\n* [Atom](https://atom.io/)  \n* [Sublime Text](http://www.sublimetext.com/)  \n* [emacs](https://www.gnu.org/software/emacs/)  \n* [vim](http://www.vim.org/)\n\n### For Windows: \n* [Visual Studio Code](https://code.visualstudio.com/)\n* [Atom](https://atom.io/)  \n* [Sublime Text](http://www.sublimetext.com/)  \n* [Notepad++](https://notepad-plus-plus.org/)  \n\n\nGet your screen set up with a text editor, terminal/command line and the Udacity classroom in a web browser, so you can iterate on your Python script. Play with the display options to see what you find most comfortable to look at, and see if you can find a tab-to-four-spaces option - that'll be very useful for Python indentation.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160285,
          "key": "75e1eee0-5f81-4d5b-a1ca-eaebe3c91759",
          "title": "What are Jupyter notebooks?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "75e1eee0-5f81-4d5b-a1ca-eaebe3c91759",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 262240,
              "key": "9d21f1fa-e971-4c99-80fe-1c4583d03aa3",
              "title": "Jupyter",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qiYDWFLyXvg",
                "china_cdn_id": "qiYDWFLyXvg.mp4"
              }
            },
            {
              "id": 199565,
              "key": "8cf4aa3c-3e9a-499f-ac9c-2b84298ac321",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What are Jupyter notebooks?\n\nWelcome to this lesson on using [Jupyter](http://jupyter.org/) notebooks. The notebook is a web application that allows you to combine explanatory text, math equations, code, and visualizations all in one easily sharable document. For example, here's one of my favorite notebooks shared recently, the analysis of [gravitational waves from two colliding blackholes](https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html) detected by the [LIGO experiment](https://www.ligo.caltech.edu/news/ligo20160211). You could download the data, run the code in the notebook, and repeat the analysis, in effect detecting the gravitational waves yourself!\n\nNotebooks have quickly become an essential tool when working with data. You'll find them being used for [data cleaning and exploration](http://nbviewer.jupyter.org/github/jmsteinw/Notebooks/blob/master/IndeedJobs.ipynb), visualization, [machine learning](http://nbviewer.jupyter.org/github/masinoa/machine_learning/blob/master/04_Neural_Networks.ipynb), and [big data analysis](http://nbviewer.jupyter.org/github/tdhopper/rta-pyspark-presentation/blob/master/slides.ipynb). Here's [an example notebook](https://github.com/mcleonard/blog_posts/blob/master/body_fat_percentage.ipynb) I made for my personal blog that shows off many of the features of notebooks. Typically you'd be doing this work in a terminal, either the normal Python shell or with IPython. Your visualizations would be in separate windows, any documentation would be in separate documents, along with various scripts for functions and classes. However, with notebooks, all of these are in one place and easily read together.\n\nNotebooks are also rendered automatically on GitHub. It’s a great feature that lets you easily share your work. There is also http://nbviewer.jupyter.org/ that renders the notebooks from your GitHub repo or from notebooks stored elsewhere.   ",
              "instructor_notes": ""
            },
            {
              "id": 199609,
              "key": "c2149e65-bd98-4a6c-944c-d9513a86b4d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Literate programming\n\nNotebooks are a form of [literate programming](http://www.literateprogramming.com/) proposed by Donald Knuth in 1984. With literate programming, the documentation is written as a narrative alongside the code instead of sitting off by its own. In Donald Knuth's words, \n\n> Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.\n\nAfter all, code is written for humans, not for computers. Notebooks provide exactly this capability. You are able to write documentation as narrative text, along with code. This is not only useful for the people reading your notebooks, but for your future self coming back to the analysis. \n\nJust a small aside: recently, this idea of literate programming has been extended to a whole programming language, [Eve](http://www.witheve.com/).",
              "instructor_notes": ""
            },
            {
              "id": 199613,
              "key": "4ceb3c91-07fe-4d1b-be8e-3805c4374c3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How notebooks work\n\nJupyter notebooks grew out of the [IPython project](https://ipython.org/) started by Fernando Perez. IPython is an interactive shell, similar to the normal Python shell but with great features like syntax highlighting and code completion. Originally, notebooks worked by sending messages from the web app (the notebook you see in the browser) to an IPython kernel (an IPython application running in the background). The kernel executed the code, then sent it back to the notebook.  The current architecture is similar, drawn out below.",
              "instructor_notes": ""
            },
            {
              "id": 199614,
              "key": "dd1fe61e-27b1-46ce-8527-75760aac6a70",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/5817c83b_notebook-components/notebook-components.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/dd1fe61e-27b1-46ce-8527-75760aac6a70",
              "caption": "From [Jupyter documentation](https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html)",
              "alt": null,
              "width": 633,
              "height": 357,
              "instructor_notes": null
            },
            {
              "id": 199623,
              "key": "6f9c996a-3e4d-4c2a-a03d-ddad3c7fd2e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The central point is the notebook server. You connect to the server through your browser and the notebook is rendered as a web app. Code you write in the web app is sent through the server to the kernel. The kernel runs the code and sends it back to the server, then any output is rendered back in the browser. When you save the notebook, it is written to the server as a JSON file with a `.ipynb` file extension.\n\nThe great part of this architecture is that the kernel doesn't need to run Python. Since the notebook and the kernel are separate, code in any language can be sent between them. For example, two of the earlier non-Python kernels were for the [R](https://www.r-project.org/) and [Julia](http://julialang.org/) languages. With an R kernel, code written in R will be sent to the R kernel where it is executed, exactly the same as Python code running on a Python kernel. IPython notebooks were renamed because notebooks became language agnostic. The new name **Jupyter** comes from the combination of **Ju**lia, **Pyt**hon, and **R**. If you're interested, here's a [list of available kernels](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels).\n\nAnother benefit is that the server can be run anywhere and accessed via the internet. Typically you'll be running the server on your own machine where all your data and notebook files are stored. But, you could also [set up a server](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html) on a remote machine or cloud instance like Amazon's EC2. Then, you can access the notebooks in your browser from anywhere in the world.  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199630,
          "key": "424eddd4-9304-4207-898b-422d40a11927",
          "title": "Installing Jupyter Notebook",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "424eddd4-9304-4207-898b-422d40a11927",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199631,
              "key": "be67c80b-4731-4cbf-bc2e-820911d54dba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Installing Jupyter Notebook\n\nBy far the easiest way to install Jupyter is with Anaconda. Jupyter notebooks automatically come with the distribution. You'll be able to use notebooks from the default environment.\n\nTo install Jupyter notebooks in a conda environment, use `conda install jupyter notebook`.\n\nJupyter notebooks are also available through pip with `pip install jupyter notebook`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199665,
          "key": "7832d9b4-e925-4d5f-848e-c9289cac4f33",
          "title": "Launching the notebook server",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7832d9b4-e925-4d5f-848e-c9289cac4f33",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199667,
              "key": "fdb9bf93-ce09-43d5-a2b6-72cae0d0e200",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Launching the notebook server\n\nTo start a notebook server, enter `jupyter notebook` in your terminal or console. This will start the server in the directory you ran the command in. That means any notebook files will be saved in that directory. Typically you'd want to start the server in the directory where your notebooks live. However, you can navigate through your file system to where the notebooks are.\n\nWhen you run the command (try it yourself!), the server home should open in your browser. By default, the notebook server runs at `http://localhost:8888`. If you aren't familiar with this, `localhost` means your computer and `8888` is the port the server is communicating on. As long as the server is still running, you can always come back to it by going to http://localhost:8888 in your browser.\n\nIf you start another server, it'll try to use port `8888`, but since it is occupied, the new server will run on port `8889`. Then, you'd connect to it at `http://localhost:8889`. Every additional notebook server will increment the port number like this.\n\nIf you tried starting your own server, it should look something like this:",
              "instructor_notes": ""
            },
            {
              "id": 199669,
              "key": "cb7af561-c3e7-4f47-974d-5cd902c73da1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/5818e181_notebook-server/notebook-server.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cb7af561-c3e7-4f47-974d-5cd902c73da1",
              "caption": "",
              "alt": null,
              "width": 1285,
              "height": 889,
              "instructor_notes": null
            },
            {
              "id": 199670,
              "key": "35ce4727-8261-4e98-bcf3-2d5fb81b3631",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You might see some files and folders in the list here, it depends on where you started the server from.\n\nOver on the right, you can click on \"New\" to create a new notebook, text file, folder, or terminal. The list under \"Notebooks\" shows the kernels you have installed. Here I'm running the server in a Python 3 environment, so I have a Python 3 kernel available. You might see Python 2 here. I've also installed kernels for Scala 2.10 and 2.11 which you see in the list. See [this documentation](https://ipython.readthedocs.io/en/latest/install/kernel_install.html) for how to install kernels if you ever need to do so.",
              "instructor_notes": ""
            },
            {
              "id": 219907,
              "key": "ceac84f6-80ae-455c-bf64-3e76d4e6dbe0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The tabs at the top show *Files*, *Running*, and *Cluster*.  *Files* shows all the files and folders in the current directory. Clicking on the *Running* tab will list all the currently running notebooks. From there you can manage them.\n\n*Clusters* previously was where you'd create multiple kernels for use in parallel computing. Now that's been taken over by [ipyparallel](https://ipyparallel.readthedocs.io/en/latest/intro.html) so there isn't much to do there.\n\nYou should consider installing Notebook Conda to help manage your environments. Run the following terminal command:\n\n`conda install nb_conda`\n\nThen if you run the notebook server from a conda environment, you'll also have access to the \"Conda\" tab shown below.  Here you can manage your environments from within Jupyter. You can create new environments, install packages, update packages, export environments and more.",
              "instructor_notes": ""
            },
            {
              "id": 219910,
              "key": "6813100f-a237-4c05-8bb4-5d6b9ac9427f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58473bf5_conda-tab/conda-tab.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6813100f-a237-4c05-8bb4-5d6b9ac9427f",
              "caption": "conda tab in Jupyter",
              "alt": null,
              "width": 955,
              "height": 643,
              "instructor_notes": null
            },
            {
              "id": 322938,
              "key": "deba6348-dc72-47f9-bd49-480572444bf4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Additionally, with `nb_conda` installed you will be able to access any of your conda environments when choosing a kernel. For example, the image below shows an example of creating a new notebook on a machine with several different conda environments:",
              "instructor_notes": ""
            },
            {
              "id": 322940,
              "key": "f561436c-8769-471e-9927-94ed6f32e521",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584739ab_conda-environments/conda-environments.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f561436c-8769-471e-9927-94ed6f32e521",
              "caption": "conda environments in Jupyter",
              "alt": null,
              "width": 309,
              "height": 566,
              "instructor_notes": null
            },
            {
              "id": 219923,
              "key": "3a7efa4b-103e-4e9a-9750-85c5f0103846",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Shutting down Jupyter\n\nYou can shutdown individual notebooks by marking the checkbox next to the notebook on the server home and clicking \"Shutdown.\" Make sure you've saved your work before you do this though! Any changes since the last time you saved will be lost. You'll also need to rerun the code the next time you run the notebook.",
              "instructor_notes": ""
            },
            {
              "id": 219924,
              "key": "9f2607e6-2944-4cfd-a6d1-e3925f41779a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58474142_notebook-shutdown/notebook-shutdown.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9f2607e6-2944-4cfd-a6d1-e3925f41779a",
              "caption": "",
              "alt": null,
              "width": 970,
              "height": 446,
              "instructor_notes": null
            },
            {
              "id": 219925,
              "key": "99aad727-2c59-4bc6-a35a-ac1b119b4268",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can shutdown the entire server by pressing control + C twice in the terminal. Again, this will immediately shutdown all the running notebooks, so make sure your work is saved!",
              "instructor_notes": ""
            },
            {
              "id": 219926,
              "key": "57ae3206-1e08-4da0-96cb-8c0d7aeee50a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58474185_server-shutdown/server-shutdown.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/57ae3206-1e08-4da0-96cb-8c0d7aeee50a",
              "caption": "",
              "alt": null,
              "width": 777,
              "height": 572,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 199672,
          "key": "0d3b93d8-fd93-4dde-92f2-55594d6d458e",
          "title": "Notebook interface",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d3b93d8-fd93-4dde-92f2-55594d6d458e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199699,
              "key": "eddc9ea8-df56-4ca4-8ed2-ee4d1b989264",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Notebook interface\n\nWhen you create a new notebook, you should see something like this:",
              "instructor_notes": ""
            },
            {
              "id": 199719,
              "key": "4373fb66-0f6e-4fef-a10f-364fd9ab1e6c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/5819039f_new-notebook/new-notebook.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4373fb66-0f6e-4fef-a10f-364fd9ab1e6c",
              "caption": "",
              "alt": null,
              "width": 1324,
              "height": 889,
              "instructor_notes": null
            },
            {
              "id": 199889,
              "key": "750b34af-b8fd-4304-a0ce-670139f392f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Feel free to try this yourself and poke around a bit.\n\nYou’ll see a little box outlined in green. This is called a *cell*. Cells are where you write and run your code. You can also change it to render Markdown, a popular formatting syntax for writing web content. I'll cover Markdown in more detail later. In the toolbar, click “Code” to change it to Markdown and back. The little play button runs the cell, and the up and down arrows move cells up and down.\n\n<video loop autoplay style=\"width: 100%\">\n<source src=\"https://s3.amazonaws.com/content.udacity-data.com/courses/ud1111/notebook+interface.mp4\" type=\"video/mp4\">\n</video>\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 199940,
              "key": "0c6dacde-5288-4f4f-a3a5-85c839860552",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When you run a code cell, the output is displayed below the cell. The cell also gets numbered, you see `In [1]:` on the left. This lets you know the code was run and the order if you run multiple cells.  Running the cell in Markdown mode renders the Markdown as text.\n\n## The tool bar\n\nElsewhere on the tool bar, starting from the left:\n\n* The anachronistic symbol for \"save,\" the floppy disk. Saves the notebook!\n* The `+` button creates a new cell\n* Then, buttons to cut, copy, and paste cells. \n* Run, stop, restart the kernel\n* Cell type: code, Markdown, raw text, and header\n* Command palette (see next)\n* Cell toolbar, gives various options for cells such as using them as slides\n\n### Command palette\n\nThe little keyboard is the command palette. This will bring up a panel with a search bar where you can search for various commands. This is really helpful for speeding up your workflow as you don't need to search around in the menus with your mouse. Just open the command palette and type in what you want to do. For instance, if you want to merge two cells:\n\n<video loop autoplay style=\"width: 100%\">\n<source src=\"https://s3.amazonaws.com/content.udacity-data.com/courses/ud1111/command+palette.mp4\" type=\"video/mp4\">\n</video>",
              "instructor_notes": ""
            },
            {
              "id": 199943,
              "key": "58433b80-553f-42ce-b012-a905e9a6b96a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## More things\n\nAt the top you see the title. Click on this to rename the notebook.\n\nOver on the right is the kernel type (Python 3 in my case) and next to it, a little circle. When the kernel is running a cell, it'll fill in. For most operations which run quickly, it won't fill in. It's a little indicator to let you know longer running code is actually running.\n\nAlong with the save button in the toolbar, notebooks are automatically saved periodically. The most recent save is noted to the right of the title. You can save manually with the save button, or by pressing `escape` then `s` on your keyboard. The `escape` key changes to command mode and `s` is the shortcut for \"save.\" I'll cover command mode and keyboard shortcuts later.\n\nIn the \"File\" menu, you can download the notebook in multiple formats. You'll often want to download it as an HTML file to share with others who aren't using Jupyter. Also, you can download the notebook as a normal Python file where all the code will run like normal. The [Markdown](https://daringfireball.net/projects/markdown/) and [reST](http://docutils.sourceforge.net/rst.html) formats are great for using notebooks in blogs or documentation. ",
              "instructor_notes": ""
            },
            {
              "id": 219911,
              "key": "e3a10da0-7978-42e5-8a3c-61ee61ff4c57",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/58473c56_notebook-download/notebook-download.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e3a10da0-7978-42e5-8a3c-61ee61ff4c57",
              "caption": "",
              "alt": null,
              "width": 397,
              "height": 529,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 200050,
          "key": "b61c167c-767b-467a-85e2-6eca473f315b",
          "title": "Markdown cells",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b61c167c-767b-467a-85e2-6eca473f315b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 200051,
              "key": "8834acdc-59cb-4594-9667-dafc203d109f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Markdown cells\n\nAs mentioned before, cells can also be used for text written in Markdown. Markdown is a formatting syntax that allows you to include links, style text as bold or italicized, and format code. As with code cells, you press **Shift + Enter** or **Control + Enter** to run the Markdown cell, where it will render the Markdown to formatted text. Including text allows you to write a narrative alongside your code, as well as documenting your code and the thoughts that went into it.\n\nYou can find the [documentation here](https://daringfireball.net/projects/markdown/basics), but I'll provide a short primer.\n\n## Headers\n\nYou can write headers using the pound/hash/[octothorpe](http://www.worldwidewords.org/weirdwords/ww-oct1.htm) symbol `#` placed before the text. One `#` renders as an `h1` header, two `#`s is an h2, and so on. Looks like this:\n\n```[Markdown]\n# Header 1\n## Header 2\n### Header 3\n```\nrenders as \n\n# Header 1\n## Header 2\n### Header 3",
              "instructor_notes": ""
            },
            {
              "id": 200056,
              "key": "58d65af0-a423-42d1-b57e-ed1e3ec98078",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Links\n\nLinking in Markdown is done by enclosing text in square brackets and the URL in parentheses, like this `[Udacity's home page](https://www.udacity.com)` for a link to [Udacity's home page](https://www.udacity.com).\n\n## Emphasis\n\nYou can add emphasis through bold or italics with asterisks or underscores (`*` or `_`). For italics, wrap the text in one asterisk or underscore, `_gelato_` or `*gelato*` renders as *gelato*.\n\nBold text uses two symbols, `**aardvark**` or `__aardvark__` looks like **aardvark**.\n\nEither asterisks or underscores are fine as long as you use the same symbol on both sides of the text.",
              "instructor_notes": ""
            },
            {
              "id": 200052,
              "key": "6e64f6a3-d261-47f5-9196-f1f85a0e45cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code\n\nThere are two different ways to display code, inline with text and as a code block separated from the text. To format inline code, wrap the text in backticks. For example, `` `string.punctuation` `` renders as `string.punctuation`.\n\nTo create a code block, start a new line and wrap the text in three backticks\n\n    ```\n    import requests\n    response = requests.get('https://www.udacity.com')\n    ```\n\nor indent each line of the code block with four spaces.\n\n```python\n    import requests\n    response = requests.get('https://www.udacity.com')\n```\n\nNote: You won't see the spaces here in the page for the above! Udacity's classroom is rendering the spaces directly as a code block.",
              "instructor_notes": ""
            },
            {
              "id": 200055,
              "key": "c929d741-7e39-4f1e-85a2-83bf68017344",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Math expressions\n\nYou can create math expressions in Markdown cells using [LaTeX](https://www.latex-project.org/) symbols. Notebooks use MathJax to render the LaTeX symbols as math symbols. To start math mode, wrap the LaTeX in dollar signs `$y = mx + b$` for inline math. For a math block, use double dollar signs,\n\n```\n$$\ny = \\frac{a}{b+c}\n$$\n```\n\nThis is a really useful feature, so if you don't have experience with LaTeX, [here is a tutorial](https://www.latex-tutorial.com/) on using it to create math expressions.",
              "instructor_notes": ""
            },
            {
              "id": 200065,
              "key": "65ca51b5-4905-4b50-a1cc-0e49f4f6115a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<video loop autoplay style=\"width:100%\">\n<source src=\"https://s3.amazonaws.com/content.udacity-data.com/courses/ud1111/Markdown+cells.mp4\" type=\"video/mp4\">\n</video>",
              "instructor_notes": ""
            },
            {
              "id": 200057,
              "key": "43e525cc-d37a-4f73-aaae-27d93f9a0f32",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Wrapping up\n\nHere's [a cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) you can use as a reference for writing Markdown. My advice is to make use of the Markdown cells. Your notebooks will be much more readable compared to a bunch of code blocks.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199944,
          "key": "6dcc83a8-0521-4235-ac84-61fac4f9775d",
          "title": "Code cells",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6dcc83a8-0521-4235-ac84-61fac4f9775d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Working With Code Cells",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2016/December/58474202_working-with-code-cells/working-with-code-cells.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 200049,
              "key": "77a1bd07-9d45-4f52-aacf-10e1dccbce1b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Code cells\n\nMost of your work in notebooks will be done in code cells. This is where you write your code and it gets executed. In code cells you can write any code, assigning variables, defining functions and classes, importing packages, and more. Any code executed in one cell is available in all other cells.\n\nTo give you some practice, I created a notebook you can work through. Download the notebook **Working With Code Cells** below then run it from your own notebook server. (In your terminal, change to the directory with the notebook file, then enter `jupyter notebook`) Your browser might try to open the notebook file without downloading it. If that happens, right click on the link then choose \"Save Link As...\"",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 205545,
          "key": "6a803904-d84d-48ac-92a6-d9bee9807d44",
          "title": "Keyboard shortcuts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6a803904-d84d-48ac-92a6-d9bee9807d44",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Keyboard-Shortcuts",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/April/58e412d0_keyboard-shortcuts/keyboard-shortcuts.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 206709,
              "key": "23dea1a1-6fb0-44c3-8193-e94e7441177e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Keyboard shortcuts\n\nNotebooks come with a bunch of keyboard shortcuts that let you use your keyboard to interact with the cells, instead of using the mouse and toolbars. They take a bit of time to get used to, but when you're proficient with the shortcuts you'll be much faster at working in notebooks. To learn more about the shortcuts and get practice using them, download the notebook **Keyboard Shortcuts** below. Again, your browser might try to open it, but you want to save it to your computer. Right click on the link, then choose \"Save Link As...\"",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 208390,
          "key": "256cdd36-17d4-442a-a033-7c64ce83f7f8",
          "title": "Magic keywords",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "256cdd36-17d4-442a-a033-7c64ce83f7f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 213428,
              "key": "71b42c51-f533-4662-a3e3-fac13dfe79c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Magic keywords\n\nMagic keywords are special commands you can run in cells that let you control the notebook itself or perform system calls such as changing directories. For example, you can set up matplotlib to work interactively in the notebook with `%matplotlib`.\n\nMagic commands are preceded with one or two percent signs (`%` or `%%`) for line magics and cell magics, respectively. Line magics apply only to the line the magic command is written on, while cell magics apply to the whole cell.\n\n**NOTE:** These magic keywords are specific to the normal Python kernel. If you are using other kernels, these most likely won't work.\n\n## Timing code\n\nAt some point, you'll probably spend some effort optimizing code to run faster. Timing how quickly your code runs is essential for this optimization. You can use the `timeit` magic command to time how long it takes for a function to run, like so:\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 215665,
              "key": "5107d13d-ebbb-4cce-bdbf-cc4dae39e210",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/582f354d_magic-timeit/magic-timeit.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5107d13d-ebbb-4cce-bdbf-cc4dae39e210",
              "caption": "",
              "alt": null,
              "width": 1574,
              "height": 874,
              "instructor_notes": null
            },
            {
              "id": 215664,
              "key": "5a931da9-6ae4-448c-ac4a-0e39099c2933",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you want to time how long it takes for a whole cell to run, you’d use `%%timeit` like so:\n",
              "instructor_notes": ""
            },
            {
              "id": 216040,
              "key": "4935f7ac-3024-40c3-87f2-406dc9d73400",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/58337d71_magic-timeit2/magic-timeit2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4935f7ac-3024-40c3-87f2-406dc9d73400",
              "caption": "",
              "alt": null,
              "width": 695,
              "height": 359,
              "instructor_notes": null
            },
            {
              "id": 216044,
              "key": "993c0776-88da-46bd-bacd-ff7f04a9b6a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Embedding visualizations in notebooks\n\nAs mentioned before, notebooks let you embed images along with text and code. This is most useful when you’re using `matplotlib` or other plotting packages to create visualizations. You can use `%matplotlib` to set up `matplotlib` for interactive use in the notebook. By default figures will render in their own window. However, you can pass arguments to the command to select a specific [\"backend\"](http://matplotlib.org/faq/usage_faq.html#what-is-a-backend), the software that renders the image. To render figures directly in the notebook, you should use the inline backend with the command `%matplotlib inline`.\n\n> **Tip:** On higher resolution screens such as Retina displays, the default images in notebooks can look blurry. Use `%config InlineBackend.figure_format = 'retina'` after `%matplotlib inline` to render higher resolution images.\n",
              "instructor_notes": ""
            },
            {
              "id": 216051,
              "key": "5e263ad0-6e13-4ade-a766-5da705ce1e8e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/5833867f_magic-matplotlib/magic-matplotlib.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5e263ad0-6e13-4ade-a766-5da705ce1e8e",
              "caption": "Example figure in a notebook",
              "alt": null,
              "width": 744,
              "height": 566,
              "instructor_notes": null
            },
            {
              "id": 216041,
              "key": "2d6970b7-83b7-4268-81e0-b082a30056df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Debugging in the Notebook\n\nWith the Python kernel, you can turn on the interactive debugger using the magic command `%pdb`. When you cause an error, you'll be able to inspect the variables in the current namespace.",
              "instructor_notes": ""
            },
            {
              "id": 216042,
              "key": "bf742711-6127-4af8-8111-ea370ef8f2da",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/58337eac_magic-pdb/magic-pdb.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bf742711-6127-4af8-8111-ea370ef8f2da",
              "caption": "Debugging in a notebook",
              "alt": null,
              "width": 724,
              "height": 459,
              "instructor_notes": null
            },
            {
              "id": 216043,
              "key": "7dbf6da3-02dc-4016-99a9-d40224ec577b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Above you can see I tried to sum up a string which gives an error. The debugger raises the error and provides a prompt for inspecting your code.\n\nRead more about `pdb` in [the documentation](https://docs.python.org/3/library/pdb.html). To quit the debugger, simply enter `q` in the prompt.\n\n## More reading\n\nThere are a whole bunch of other magic commands, I just touched on a few of the ones you'll use the most often. To learn more about them, [here's the list](http://ipython.readthedocs.io/en/stable/interactive/magics.html) of all available magic commands.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215938,
          "key": "2b324ee9-d6ec-4af4-b105-c4996b53d162",
          "title": "Converting notebooks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2b324ee9-d6ec-4af4-b105-c4996b53d162",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216053,
              "key": "fadfae5b-7d0b-404e-8009-abbe22f8bc5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Converting notebooks\n\nNotebooks are just big [JSON](http://www.json.org/) files with the extension `.ipynb`.",
              "instructor_notes": ""
            },
            {
              "id": 216054,
              "key": "3478b081-7016-46ec-86c9-7e23b3316015",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/5833887b_notebook-json/notebook-json.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3478b081-7016-46ec-86c9-7e23b3316015",
              "caption": "Notebook file opened in a text editor shows JSON data",
              "alt": null,
              "width": 819,
              "height": 616,
              "instructor_notes": null
            },
            {
              "id": 216055,
              "key": "ef1caf21-4515-4d86-ab7f-3d00b03c4c9a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Since notebooks are JSON, it is simple to convert them to other formats. Jupyter comes with a utility called `nbconvert` for converting to HTML, Markdown, slideshows, etc.\n\nFor example, to convert a notebook to an HTML file, in your terminal use\n```bash\njupyter nbconvert --to html notebook.ipynb\n```\n\nConverting to HTML is useful for sharing your notebooks with others who aren't using notebooks. Markdown is great for including a notebook in blogs and other text editors that accept Markdown formatting.",
              "instructor_notes": ""
            },
            {
              "id": 216056,
              "key": "6d467407-c496-4cad-92b3-3c38f3fccdb4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/58338a48_nbconvert-example/nbconvert-example.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6d467407-c496-4cad-92b3-3c38f3fccdb4",
              "caption": "",
              "alt": null,
              "width": 857,
              "height": 623,
              "instructor_notes": null
            },
            {
              "id": 216057,
              "key": "55c8bf3a-15a8-494b-b805-1d687f76d245",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As always, learn more about `nbconvert` from the [documentation](https://nbconvert.readthedocs.io/en/latest/usage.html).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215937,
          "key": "74d96c44-fadc-4499-8c33-c48c4b4c73e4",
          "title": "Creating a slideshow",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "74d96c44-fadc-4499-8c33-c48c4b4c73e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216094,
              "key": "49a4e03c-b56a-4291-935c-e161cad17681",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating a slideshow\n\nCreate slideshows from notebooks is one of my favorite features. You can see [an example of a slideshow here](http://nbviewer.jupyter.org/format/slides/github/jorisvandenbossche/2015-PyDataParis/blob/master/pandas_introduction.ipynb#/) introducing pandas for working with data.\n\nThe slides are created in notebooks like normal, but you'll need to designate which cells are slides and the type of slide the cell will be. In the menu bar, click View > Cell Toolbar > Slideshow to bring up the slide cell menu on each cell.",
              "instructor_notes": ""
            },
            {
              "id": 216095,
              "key": "4719b8f3-6b0b-492f-9bab-8609b9c5d3ef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/58339359_slides-cell-toolbar-menu/slides-cell-toolbar-menu.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4719b8f3-6b0b-492f-9bab-8609b9c5d3ef",
              "caption": "Turning on Slideshow toolbars for cells",
              "alt": null,
              "width": 866,
              "height": 301,
              "instructor_notes": null
            },
            {
              "id": 216096,
              "key": "79e088bd-1454-4acb-99f9-d950f9cdfc95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This will show a menu dropdown on each cell that lets you choose how the cell shows up in the slideshow.",
              "instructor_notes": ""
            },
            {
              "id": 216098,
              "key": "4b6b6871-9eed-4b5c-a8dc-1eb888a2554f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/5833938f_slides-choose-slide-type/slides-choose-slide-type.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4b6b6871-9eed-4b5c-a8dc-1eb888a2554f",
              "caption": "Choose slide type",
              "alt": null,
              "width": 866,
              "height": 342,
              "instructor_notes": null
            },
            {
              "id": 216099,
              "key": "eabfb632-30f7-4d58-a27b-8d2755697269",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Slides** are full slides that you move through left to right. **Sub-slides** show up in the slideshow by pressing up or down. **Fragments** are hidden at first, then appear with a button press. You can skip cells in the slideshow with **Skip** and **Notes** leaves the cell as speaker notes.\n\n\n## Running the slideshow\n\nTo create the slideshow from the notebook file, you'll need to use `nbconvert`:\n\n```bash\n    jupyter nbconvert notebook.ipynb --to slides\n```\n\nThis just converts the notebook to the necessary files for the slideshow, but you need to serve it with an HTTP server to actually see the presentation.\n\nTo convert it and immediately see it, use\n\n```bash\njupyter nbconvert notebook.ipynb --to slides --post serve\n```\n\nThis will open up the slideshow in your browser so you can present it.\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 594324,
          "key": "c42aae84-1876-4321-9657-8ab0a228ba50",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c42aae84-1876-4321-9657-8ab0a228ba50",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 752739,
              "key": "e3dc4fa3-cac5-4c20-b1c6-1751717c2322",
              "title": "L2 02 Outro REPLACEMENT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "W-6Se0G_FVE",
                "china_cdn_id": "W-6Se0G_FVE.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}