{
  "data": {
    "lesson": {
      "id": 256062,
      "key": "280d5ccf-6440-4d27-97d1-d9f6118359bc",
      "title": "Review a Repo's History",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Knowing how to review an existing Git repository's history of commits is extremely important. You'll learn how to do just that in this lesson.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/280d5ccf-6440-4d27-97d1-d9f6118359bc/256062/1517447106603/Review%20a%20Repo%27s%20History%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/280d5ccf-6440-4d27-97d1-d9f6118359bc/256062/1517447089945/Review%20a%20Repo%27s%20History%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 264390,
          "key": "212f2bac-e7e2-4ca9-b93e-91a9e57926dd",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "212f2bac-e7e2-4ca9-b93e-91a9e57926dd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 283731,
              "key": "878b87fa-c1b2-46e2-af3f-b68b27b57e4c",
              "title": "A Repository's History - Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UBmg3syQS0E",
                "china_cdn_id": "UBmg3syQS0E.mp4"
              }
            }
          ]
        },
        {
          "id": 264391,
          "key": "ee7a6ad0-b3b6-42b4-9823-a79f7c6d0f27",
          "title": "Displaying A Repository's Commits",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ee7a6ad0-b3b6-42b4-9823-a79f7c6d0f27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264400,
              "key": "71d14157-98ee-4b4e-98e9-be7233e5a42d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> TIP: In lesson 2 you used `git clone` to clone the blog project. This is the project we'll be using in this lesson. If you skipped cloning the project in the previous lesson, then run the following command to get the project:\n\n> ```bash\n$ git clone https://github.com/udacity/course-git-blog-project\n```\n\n> Don't forget to `cd` into the project after you've cloned it.\n\n> If you have questions about this, review how to [Clone An Existing Repo](https://classroom.udacity.com/courses/ud123/lessons/437a88fc-15f5-48b8-a6a5-0cf3347e6183/concepts/59082be0-c1af-4839-8ae5-0a182dc5bfe8#) or ask in [Knowledge](https://knowledge.udacity.com/).",
              "instructor_notes": ""
            },
            {
              "id": 264401,
              "key": "da48d463-aff4-4aa8-9408-7bd77b471ff1",
              "title": "First Things, First",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "da48d463-aff4-4aa8-9408-7bd77b471ff1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "After you’ve cloned the blog project repository, navigate to the project’s directory using the command line. Once you’re located inside the blog project, what is the very first thing you should do in a Git repository?",
                "answers": [
                  {
                    "id": "a1486769275063",
                    "text": "run the `git status` command",
                    "is_correct": true
                  },
                  {
                    "id": "a1486769282496",
                    "text": "open the project in a code editor",
                    "is_correct": false
                  },
                  {
                    "id": "a1486769283048",
                    "text": "decide what new feature to work on",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264402,
              "key": "92c7b02d-43d5-40c6-a649-a872041fb2da",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589e4d46_ud123-l3-git-status-output/ud123-l3-git-status-output.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/92c7b02d-43d5-40c6-a649-a872041fb2da",
              "caption": "_The Terminal application showing the output of the `git status` command._",
              "alt": "The Terminal application showing the output of the `git status` command.",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 264403,
              "key": "28ebdfe8-e4cf-4fba-bac8-0748a0066c6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Status & Opening The Project\n\nYou can see that `git status` tells us that there's \"nothing to commit, working directory clean\". That means we're good to go ahead and check out the project!\n\nSo open the project in your favorite code editor. If you haven't yet, take a minute or two to look at the project – look over the CSS and the JavaScript files, but look particularly at the HTML file. ",
              "instructor_notes": ""
            },
            {
              "id": 264404,
              "key": "86ab129a-6958-4eca-a7f4-8c308be23b4a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589e4d9d_ud123-l3-project-in-editor/ud123-l3-project-in-editor.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86ab129a-6958-4eca-a7f4-8c308be23b4a",
              "caption": "_The course's Blog project open in a code editor. The `index.html` file is being displayed._",
              "alt": "The course's Blog project open in a code editor. The `index.html` file is being displayed.",
              "width": 2986,
              "height": 1754,
              "instructor_notes": null
            },
            {
              "id": 264407,
              "key": "e093342f-8503-46e9-bbf3-df50ad6873c0",
              "title": "When Was The Heading Added?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e093342f-8503-46e9-bbf3-df50ad6873c0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the `index.html` file, take a look at the `<h1>Expedition</h1>` heading around line 15.\n\nBased on what you can see here when was that heading added?",
                "answers": [
                  {
                    "id": "a1486769594727",
                    "text": "It was added on a Tuesday. Yeah, a Tuesday.",
                    "is_correct": false
                  },
                  {
                    "id": "a1486769626903",
                    "text": "3 weeks ago",
                    "is_correct": false
                  },
                  {
                    "id": "a1486769627713",
                    "text": "¯\\\\_(ツ)_/¯ I can't tell that by looking at the code.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264409,
              "key": "b38e46e0-de3f-4e1c-9d22-6e456d97f097",
              "title": "Who Added The Heading?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b38e46e0-de3f-4e1c-9d22-6e456d97f097",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Ok, so we're not quite sure _when_ the heading was added. How about an easier question - _who_ added this heading? Again, what can you tell from just looking at the code?",
                "answers": [
                  {
                    "id": "a1486769793801",
                    "text": "Richard did!",
                    "is_correct": false
                  },
                  {
                    "id": "a1486769810745",
                    "text": "No clue",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264410,
              "key": "e8dd4903-7b47-4128-b2c0-d29d833df458",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Git Log Command\n\nFinding the answers to these questions is exactly what `git log` can do for us! Instead of explaining everything that it can do for us, let's experience it! Go ahead and run the `git log` command in the terminal:\n\n```bash\n$ git log\n```\n\nThe terminal should display the following screen.",
              "instructor_notes": ""
            },
            {
              "id": 264411,
              "key": "131ad097-d950-4beb-bfc9-268bc10d4ff9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589e4f6a_ud123-l3-git-log-output/ud123-l3-git-log-output.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/131ad097-d950-4beb-bfc9-268bc10d4ff9",
              "caption": "_The Terminal application showing the output of the `git log` command._",
              "alt": "The Terminal application showing the output of the `git log` command.",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 273018,
              "key": "d4f294dd-7f9b-418b-9afc-d66650b1f57d",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 11 Git Log Output Explained",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xJfurQcVYfo",
                "china_cdn_id": "xJfurQcVYfo.mp4"
              }
            },
            {
              "id": 264413,
              "key": "eb768f79-dd19-4c3d-a580-fbb2a224e6dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Navigating The Log\n\nIf you're not used to a pager on the command line, navigating in <a href=\"https://en.wikipedia.org/wiki/Less_(Unix)\" target=\"_blank\">Less</a> can be a bit odd. Here are some helpful keys:\n\n* to scroll **down**, press\n  * `j` or  `↓` to move _down_ one line at a time\n  * `d` to move by half the page screen\n  * `f` to move by a whole page screen\n* to scroll **up**, press\n  * `k` or `↑` to move _up_ one line at a time\n  * `u` to move by half the page screen\n  * `b` to move by a whole page screen\n* press `q` to **quit** out of the log (returns to the regular command prompt)",
              "instructor_notes": ""
            },
            {
              "id": 264414,
              "key": "45b32f03-9bab-47c2-a5c8-2484188c2efb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Git records _a ton_ of information when a commit is made. See if you can use `git log` to answer the following questions!",
              "instructor_notes": ""
            },
            {
              "id": 264415,
              "key": "fe6d1537-f0a9-4a4a-a3ba-030190f415ed",
              "title": "Who Made The Commit?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fe6d1537-f0a9-4a4a-a3ba-030190f415ed",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Use `git log` to find the commit that has a SHA that starts with `f9720a`. Who made the commit?",
                "answers": [
                  {
                    "id": "a1486770186155",
                    "text": "James Parkes",
                    "is_correct": false
                  },
                  {
                    "id": "a1486770215935",
                    "text": "Richard Kalehoff",
                    "is_correct": true
                  },
                  {
                    "id": "a1486770216498",
                    "text": "Colt Steele",
                    "is_correct": false
                  },
                  {
                    "id": "a1486770217058",
                    "text": "Julia Van Cleve",
                    "is_correct": false
                  },
                  {
                    "id": "a1486770217623",
                    "text": "Godzilla McFiddlebrunches",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264416,
              "key": "891a7cac-9424-4c13-8a1b-04d4c15d961e",
              "title": "What Is The Message?",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "891a7cac-9424-4c13-8a1b-04d4c15d961e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Use `git log` to find the commit with the SHA that starts with `8aa6668`. What is the message for that commit?",
                "matchers": [
                  {
                    "expression": "\\s*Convert social links from text to images\\s*"
                  }
                ]
              }
            },
            {
              "id": 264417,
              "key": "e42b6260-1a65-438a-8bbc-dbd8d54f030f",
              "title": "When Was The Commit Made?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e42b6260-1a65-438a-8bbc-dbd8d54f030f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Use `git log` to find the commit with the SHA that starts with `f9720a9`. When was that commit made?",
                "answers": [
                  {
                    "id": "a1486770633648",
                    "text": "Mon Dec 5 10:25:22 2016",
                    "is_correct": false
                  },
                  {
                    "id": "a1486770644087",
                    "text": "Mon Dec 5 10:11:51 2016",
                    "is_correct": true
                  },
                  {
                    "id": "a1486770644615",
                    "text": "Sat Dec 3 16:09:00 2016",
                    "is_correct": false
                  },
                  {
                    "id": "a1486770645166",
                    "text": "Fri Dec 2 16:58:27 2016",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264418,
              "key": "d4b7fbe2-3907-4465-bf3e-aa02c8ebe5b7",
              "title": "What Is The SHA?",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d4b7fbe2-3907-4465-bf3e-aa02c8ebe5b7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Use `git log` to find the commit that has the message `Set article timestamp color`. Which commit belongs to that SHA? Provide the first 7 characters of the SHA.",
                "matchers": [
                  {
                    "expression": "^5de135a$"
                  }
                ]
              }
            },
            {
              "id": 264421,
              "key": "851aca9d-60eb-4c16-95e7-27461898ed82",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Log Recap\n\nFantastic job! Do you feel your Git-power growing? \n\nLet's do a quick recap of the `git log` command. The `git log` command is used to display all of the commits of a repository.\n\n```bash\n$ git log\n```\n\nBy _default_, this command displays:\n\n* the SHA\n* the author\n* the date\n* and the message\n\n...of every commit in the repository. I stress the \"By default\" part of what Git displays because the `git log` command can display a lot more information than just this. \n\nGit uses the command line pager, Less, to page through all of the information. The important keys for Less are:\n\n* to scroll down by a line, use `j` or `↓` \n* to scroll up by a line, use `k` or `↑` \n* to scroll down by a page, use the spacebar or the Page Down button\n* to scroll up by a page, use `b` or the Page Up button\n* to quit, use `q` \n\nWe'll increase our `git log`-wielding abilities in the next lesson when we look at displaying more info.\n\nWhy wait?!? Click the link to move to the next lesson!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264392,
          "key": "aff71bac-d552-4498-aee2-f26cf30f5e52",
          "title": "Changing How Git Log Displays Information",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "aff71bac-d552-4498-aee2-f26cf30f5e52",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264422,
              "key": "76abb929-8657-47ce-ba30-4a311f62e323",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You made it all this way - congrats on getting this far! Seriously! Learning Git is a challenging undertaking. I applaud you on your perseverance.\n\nTake a look at this output from running `git log`:",
              "instructor_notes": ""
            },
            {
              "id": 264423,
              "key": "1b6ca2f1-b1a7-4219-9eb4-aea43db96811",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589e4f6a_ud123-l3-git-log-output/ud123-l3-git-log-output.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1b6ca2f1-b1a7-4219-9eb4-aea43db96811",
              "caption": "_The Terminal application showing the output from running `git log`._",
              "alt": "The Terminal application showing the output from running `git log`.",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 264425,
              "key": "42bd1825-eb16-4f1f-b047-4f85d5818ed5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We've been looking closely at all the detailed information that `git log` displays. But now, take a step back and look at all of the information as a whole.\n\nLet's think about some of these questions:\n\n* **the SHA** - `git log` will display the complete SHA for every single commit. Each SHA is unique, so we don't really need to see the _entire_ SHA. We could get by perfectly fine with knowing just the first 6-8 characters. Wouldn't it be great if we could save some space and show just the first 5 or so characters of the SHA?\n* **the author** - the `git log` output displays the commit author for _every single commit_! It could be different for other repositories that have multiple people collaborating together, but for this one, there's only one person making all of the commits, so the commit author will be identical for all of them. Do we need to see the author for each one? What if we wanted to hide that information?\n* **the date** - By default, `git log` will display the date for each commit. But do we really care about the commit's date? Knowing the date might be important occasionally, but typically knowing the date isn't vitally important and can be ignored in a lot of cases. Is there a way we could hide that to save space?\n* **the commit message** - this is one of the most important parts of a commit message...we usually always want to see this\n\nWhat could we do here to not waste a lot of space and make the output smaller? We can use a **flag**.",
              "instructor_notes": ""
            },
            {
              "id": 264427,
              "key": "4a4ef9c5-e38e-4aeb-974f-147938b67505",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> TIP: This isn't a course on the command line, but a flag is used to alter how a program functions. For example, the `ls` command will list all of the files in the current directory. The `ls` command has a `-l` flag (i.e. `ls -l`) that runs the same `ls` command but alters how it works; it now displays the information in the _long_ format (the `-l` for _long_).\n\n> Flags can be used to alter how a program functions and/or what is displayed. To learn more about command line programs and flags, check out our course [Linux Command Line Basics](https://www.udacity.com/course/linux-command-line-basics--ud595). ",
              "instructor_notes": ""
            },
            {
              "id": 264428,
              "key": "0970acdc-babb-4213-96c8-46654d3d8502",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git log --oneline\n\nThe `git log` command has a flag that can be used to alter how it displays the repository's information. That flag is `--oneline`:\n\n```bash\n$ git log --oneline\n```\n\nCheck out how different the output is!",
              "instructor_notes": ""
            },
            {
              "id": 264429,
              "key": "c3436d25-85d3-4b19-b077-18196f3178eb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589e545c_ud123-l3-git-log-vs-git-log-oneline/ud123-l3-git-log-vs-git-log-oneline.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c3436d25-85d3-4b19-b077-18196f3178eb",
              "caption": "_Two Terminal applications side-by-side. The left one shows the result of the `git log` command with all of the information while the right one shows the result of the `git log --oneline` command with just the short SHA and the commit message._",
              "alt": "Two Terminal applications side-by-side. The left one shows the result of the `git log` command with all of the information while the right one shows the result of the `git log --oneline` command with just the short SHA and the commit message.",
              "width": 3184,
              "height": 1172,
              "instructor_notes": null
            },
            {
              "id": 273019,
              "key": "c7d5fa94-9d24-4184-9d4b-7103f705d323",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 25 Git Log Vs Git Log --Oneline Walkthru",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rn6v_QgYFnU",
                "china_cdn_id": "rn6v_QgYFnU.mp4"
              }
            },
            {
              "id": 264432,
              "key": "e177a603-0dd1-4c2e-a3bc-4bcf547e0278",
              "title": "Quitting git log --oneline",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e177a603-0dd1-4c2e-a3bc-4bcf547e0278",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You're deep in the weeds of the `git log --oneline` command and want to get out of the `git log --oneline` output and return to the regular command prompt. What do you press on the keyboard to return to the regular command prompt?",
                "answers": [
                  {
                    "id": "a1486771373266",
                    "text": "the `esc` key",
                    "is_correct": false
                  },
                  {
                    "id": "a1486771380667",
                    "text": "the `q` key",
                    "is_correct": true
                  },
                  {
                    "id": "a1486771381172",
                    "text": "the `ctrl` + `c` keys",
                    "is_correct": false
                  },
                  {
                    "id": "a1486771381724",
                    "text": "the `ctrl` + `d` keys",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 273020,
              "key": "b419d687-5144-45bd-8f93-4869e6de515b",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 27 Confession Corner",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xtsugblSwrU",
                "china_cdn_id": "xtsugblSwrU.mp4"
              }
            },
            {
              "id": 264434,
              "key": "c0a914df-1239-4426-ad11-ae4e39adb544",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git log --oneline Recap\n\nTo recap, the `--oneline` flag is used to alter how `git log` displays information:\n\n```bash\n$ git log --oneline\n```\n\nThis command:\n\n* lists one commit per line\n* shows the first 7 characters of the commit's SHA\n* shows the commit's message\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264397,
          "key": "7e127ca9-7d0a-414d-ad30-708d60248a96",
          "title": "Viewing Modified Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e127ca9-7d0a-414d-ad30-708d60248a96",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264435,
              "key": "c6f0d410-fdb6-43e0-a8a9-941966320a6f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We just looked at the `--oneline` flag to show one commit per line. That's great for getting an overview of the repository. But what if we want to dig in a little to see what file or files were changed by a commit?",
              "instructor_notes": ""
            },
            {
              "id": 264869,
              "key": "8c6788e5-c723-429c-ab78-44737b275230",
              "title": "What file or files are modified?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8c6788e5-c723-429c-ab78-44737b275230",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you look in the repository at commit `a3dc99a`, it has the message \"Center content on page\".\n\nWhat file or files were changed in this commit?",
                "answers": [
                  {
                    "id": "a1487108530016",
                    "text": "An HTML file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487108538219",
                    "text": "A CSS file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487108539480",
                    "text": "A JavaScript file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487108540121",
                    "text": "An HTML and CSS file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487108553870",
                    "text": "An HTML and JS file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487108557818",
                    "text": "There's no way to know for sure",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264870,
              "key": "c8197f5b-5507-4bc5-9f08-bc84e187e8d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git log --stat` Intro\n\nThe `git log` command has a flag that can be used to display the files that have been changed in the commit, as well as the number of lines that have been added or deleted. The flag is `--stat` (\"stat\" is short for \"statistics\"):\n\n```bash\n$ git log --stat\n```\n\nRun this command and check out what it displays.",
              "instructor_notes": ""
            },
            {
              "id": 264871,
              "key": "6ffe4710-7def-498f-8a96-c0306bb4bee7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a37bff_ud123-l3-git-log-vs-git-log-stat/ud123-l3-git-log-vs-git-log-stat.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ffe4710-7def-498f-8a96-c0306bb4bee7",
              "caption": "_Two Terminal applications side-by-side. The left one shows the result of the `git log` command with all of the information while the right one shows the result of the `git log --stat` command which lists the files that were changed as well as the number of added/removed lines._",
              "alt": "Two Terminal applications side-by-side. The left one shows the result of the `git log` command with all of the information while the right one shows the result of the `git log --stat` command which lists the files that were changed as well as the number of added/removed lines",
              "width": 3262,
              "height": 1172,
              "instructor_notes": null
            },
            {
              "id": 273021,
              "key": "60246956-94ea-42e9-823c-8ddc9d379aa1",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 33 Git Log Vs Git Log --Stat Walkthru",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aOICKP_9xiY",
                "china_cdn_id": "aOICKP_9xiY.mp4"
              }
            },
            {
              "id": 264873,
              "key": "8006dcd2-bdc4-464c-9077-445d5cb90bda",
              "title": "How Many Files Were Modified?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8006dcd2-bdc4-464c-9077-445d5cb90bda",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Using what you've learned so far about `git log` and its flags, how many files were modified in the commit with the SHA `6f04ddd`?",
                "answers": [
                  {
                    "id": "a1487109181976",
                    "text": "1 file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109223453",
                    "text": "2 files",
                    "is_correct": true
                  },
                  {
                    "id": "a1487109224094",
                    "text": "9 files",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109224679",
                    "text": "10 files",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264874,
              "key": "61916961-9113-4b2e-8f04-6cf95e7c8749",
              "title": "How Many Files Were Modified 2?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "61916961-9113-4b2e-8f04-6cf95e7c8749",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You did so well with the first one, so here's another! How many files were modified in the commit with the SHA `8d3ea36`?",
                "answers": [
                  {
                    "id": "a1487109281528",
                    "text": "1 file",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109308820",
                    "text": "2 files",
                    "is_correct": true
                  },
                  {
                    "id": "a1487109309404",
                    "text": "3 files",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109309921",
                    "text": "5 files",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264876,
              "key": "ccdd02b1-d354-44a3-836d-3570c05bd988",
              "title": "How Many Lines Were Modified?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ccdd02b1-d354-44a3-836d-3570c05bd988",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's time to look at the other info the `--stat` flag displays. How many lines of code were _deleted_ in `index.html` in the commit with the SHA `8d3ea36`?",
                "answers": [
                  {
                    "id": "a1487109347932",
                    "text": "2 lines",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109411994",
                    "text": "4 lines",
                    "is_correct": true
                  },
                  {
                    "id": "a1487109412646",
                    "text": "9 lines",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109413141",
                    "text": "13 lines",
                    "is_correct": false
                  },
                  {
                    "id": "a1487109414638",
                    "text": "28 lines",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264877,
              "key": "619e02b3-dd4f-4e4f-b32a-5e3a583362ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git log --stat` Recap\n\nTo recap, the `--stat` flag is used to alter how `git log` displays information:\n\n```bash\n$ git log --stat\n```\n\nThis command:\n\n* displays the file(s) that have been modified\n* displays the number of lines that have been added/removed\n* displays a summary line with the total number of modified files and lines that have been added/removed\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264398,
          "key": "dac0d8d4-e9a0-4b6e-bf65-f2d8e7a434c8",
          "title": "Viewing File Changes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dac0d8d4-e9a0-4b6e-bf65-f2d8e7a434c8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264878,
              "key": "3292dd03-d14b-4984-94fd-3bd073855db9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Viewing Changes\n\nWe know that `git log` will show us the commits in a repository, and if we add the `--stat` flag, we can see what files were modified and how many lines of code were added or removed. Wouldn't it be awesome if we could see exactly _what those changes were_?\n\nIf this isn't the best part of a version control system, I don't know what is! Being able to see the exact changes that were made to a file is incredibly important! Being able to say, \"oh, ok, so this commit adds 5 pixels of border-radius to the button!\".\n\nFor example, in the blog project, the commit `a3dc99a` has the message \"center content on page\" and modifies the CSS file by adding 5 lines. What are those five lines that were added? How can we figure out what those 5 lines are?",
              "instructor_notes": ""
            },
            {
              "id": 264879,
              "key": "32b1e1b6-df3b-488c-ba99-a46b21be1199",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a37ded_ud123-l3-git-log-stat/ud123-l3-git-log-stat.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/32b1e1b6-df3b-488c-ba99-a46b21be1199",
              "caption": "_The Terminal application. The command `git log --stat` is run. It displays commits and zooms in on the first commit's stats showing the CSS file with 5 lines added._",
              "alt": "A Giphy of the Terminal application. The command `git log --stat` is run. It displays commits and zooms in on the first commit's stats showing the CSS file with 5 lines added.",
              "width": 1036,
              "height": 588,
              "instructor_notes": null
            },
            {
              "id": 264880,
              "key": "921dcb3a-ceb8-4c97-ad33-494a200528ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git log -p`\n\nThe `git log` command has a flag that can be used to display the actual changes made to a file. The flag is `--patch` which can be shortened to just `-p`:\n\n```bash\n$ git log -p\n```\n\nRun this command and check out what it displays.",
              "instructor_notes": ""
            },
            {
              "id": 264881,
              "key": "f75d11d1-3b06-411d-a136-3feaf7ab62e4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a37ea6_ud123-l3-git-log-p/ud123-l3-git-log-p.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f75d11d1-3b06-411d-a136-3feaf7ab62e4",
              "caption": "_The Terminal application showing the output of the `git log -p` command. Note - the colors in your terminal might differ._",
              "alt": "The Terminal application showing the output of the `git log -p` command.",
              "width": 848,
              "height": 738,
              "instructor_notes": null
            },
            {
              "id": 273022,
              "key": "28601f12-f51e-4187-aa7f-42bf141a1dc8",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L3 42 Git Log -P Output Walkthru",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "A8Kwocr-K8c",
                "china_cdn_id": "A8Kwocr-K8c.mp4"
              }
            },
            {
              "id": 264884,
              "key": "aa74d1b2-bb34-474c-9417-483de85e389b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a37f65_ud123-l3-git-log-p-lines-removed-annotated/ud123-l3-git-log-p-lines-removed-annotated.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/aa74d1b2-bb34-474c-9417-483de85e389b",
              "caption": "_The Terminal application showing the output of the `git log -p` command. Check below for a detailed description of the output._",
              "alt": "The Terminal application showing the output of the `git log -p` command.",
              "width": 2262,
              "height": 1342,
              "instructor_notes": null
            },
            {
              "id": 264885,
              "key": "be8fee72-8d37-4a86-80a1-f4ad347b9b61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Annotated `git log -p` Output\n\nUsing the image above, let's do a quick recap of the `git log -p` output:\n\n* 🔵  - the file that is being displayed\n* 🔶  - the hash of the first version of the file and the hash of the second version of the file\n    * not usually important, so it's safe to ignore\n* ❤️  - the old version and current version of the file \n* 🔍  - the lines where the file is added and how many lines there are\n    * `-15,83` indicates that the old version (represented by the `-`) started at line 15 and that the file had 83 lines\n    * `+15,85` indicates that the current version (represented by the `+`) starts at line 15 and that there are now 85 lines...these 85 lines are shown in the patch below\n* ✏️  - the actual changes made in the commit\n    * lines that are red and start with a minus (`-`) were in the original version of the file but have been removed by the commit\n    * lines that are green and start with a plus (`+`) are new lines that have been added in the commit\n\n## Further Research\n\n* [Generating patches with -p](https://git-scm.com/docs/git-diff#_generating_patches_with_p) from the Git docs",
              "instructor_notes": ""
            },
            {
              "id": 264886,
              "key": "3e3d803f-260a-4a3d-8f4d-3663368cea44",
              "title": "Edits Start Where?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e3d803f-260a-4a3d-8f4d-3663368cea44",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Using what you've learned so far about `git log`'s `-p` flag, look at the commit with the SHA `50d835d`. What line number in `app.css` should you start looking at to see what has been changed?\n\nTip - don't forget that while looking at the `git log` output, the `d` key will scroll _down_ by half a page while the `u` key will scroll _up_ half a page.",
                "answers": [
                  {
                    "id": "a1487110111347",
                    "text": "line 63",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110189938",
                    "text": "line 89",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110190411",
                    "text": "line 127",
                    "is_correct": true
                  },
                  {
                    "id": "a1487110190940",
                    "text": "line 155",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264892,
              "key": "7ab48bda-0c37-4627-bbfe-e86ebb8a1227",
              "title": "What Was Added?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7ab48bda-0c37-4627-bbfe-e86ebb8a1227",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Using `git log` and any of its flags, what code was added in by commit `4a60beb`?",
                "answers": [
                  {
                    "id": "a1487110238309",
                    "text": "color: #352d2d;",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110269522",
                    "text": "color: #250808;",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110270006",
                    "text": "color: #333333;",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110270558",
                    "text": "color: #2e3d49;",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264895,
              "key": "6f4d9018-84a3-4089-bc56-d3bf336d518f",
              "title": "Combine Flags?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6f4d9018-84a3-4089-bc56-d3bf336d518f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "`git log --stat` and `git log -p` are both really helpful commands. Wouldn't it be great if we could have both of their output at the same time? Hmmm…\n\nWhat happens when `git log -p --stat` is run?",
                "answers": [
                  {
                    "id": "a1487110311845",
                    "text": "it displays only the patch information",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110335977",
                    "text": "it displays only the stats",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110336517",
                    "text": "it displays both with the patch info above the stats info",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110338181",
                    "text": "it displays both with the stats info above the patch info",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264897,
              "key": "78f027f5-38ae-4e0c-b481-38673253b5b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video above, we looked at a commit that indents a lot of code. The patch output shows all of those lines as having been removed and then added again at their new level of indentation. Showing all of the indent changes makes it hard to tell what was actually added, though.",
              "instructor_notes": ""
            },
            {
              "id": 264896,
              "key": "ac22d92f-5a31-4b46-8ad7-1b871a596d5a",
              "title": "Whitespace Changes?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ac22d92f-5a31-4b46-8ad7-1b871a596d5a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does the `-w` flag do to the patch information? For help, check [this Git docs page](https://git-scm.com/docs/git-diff).",
                "answers": [
                  {
                    "id": "a1487110387340",
                    "text": "it displays non-whitespace characters in blinking text",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110448546",
                    "text": "it displays non-whitespace changes in bold",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110449199",
                    "text": "it ignores whitespace changes",
                    "is_correct": true
                  },
                  {
                    "id": "a1487110449773",
                    "text": "it shows a separate patch area with just new/removed content",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264898,
              "key": "93f5ff9a-4a48-4969-8212-126d11a59f3b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git log -p` Recap\n\nTo recap, the `-p` flag (which is the same as the `--patch` flag)  is used to alter how `git log` displays information:\n\n```bash\n$ git log -p\n```\n\nThis command adds the following to the default output:\n\n* displays the files that have been modified\n* displays the location of the lines that have been added/removed\n* displays the actual changes that have been made\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264399,
          "key": "ad11f6f3-9138-4a41-a089-d6a3b77e99ff",
          "title": "Viewing A Specific Commit",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad11f6f3-9138-4a41-a089-d6a3b77e99ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264899,
              "key": "c9a073a7-5180-4afd-a16b-df3c2315e581",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Too Much Scrolling\n\nThe last few quizzes in the previous section had you scrolling and scrolling through the patch output just to get to the right commit so you could see _its_ info. Wouldn't it be super handy if you could just display a specific commit's details without worrying about all of the others in the repo?\n\nThere are actually two ways to do this!\n\n* providing the SHA of the commit you want to see to `git log`\n* use a new command `git show`\n\nThey're both pretty simple, but let's look at the `git log` way and then we'll look at `git show`.",
              "instructor_notes": ""
            },
            {
              "id": 264900,
              "key": "4001b979-8dad-41a7-b72a-9b1e675804bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You already know how to \"log\" information with:\n\n* `git log`\n* `git log --oneline`\n* `git log --stat`\n* `git log -p`\n\nBut did you know, you can supply the SHA of a commit as the final argument for all of these commands? For example:\n\n```bash\n$ git log -p fdf5493\n```\n\nBy supplying a SHA, the `git log -p` command will _start at that commit_! No need to scroll through everything! Keep in mind that it will _also_ show all of the commits that were made _prior_ to the supplied SHA.",
              "instructor_notes": ""
            },
            {
              "id": 264903,
              "key": "251aeb19-0f37-409f-9fc6-52964bc9641f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## New Command: `git show`\n\nThe other command that shows a specific commit is `git show`:\n\n```bash\n$ git show\n```\n\nRunning it like the example above will only display the most recent commit. Typically, a SHA is provided as a final argument:\n\n```bash\n$ git show fdf5493\n```\n\n### What does `git show` do? \n\nThe `git show` command will show _only one commit_. So don't get alarmed when you can't find any other commits - it only shows one. The output of the `git show` command is exactly the same as the `git log -p` command. So by default, `git show` displays:\n\n* the commit\n* the author\n* the date\n* the commit message\n* the patch information\n\nHowever, `git show` can be combined with most of the other flags we've looked at:\n\n* `--stat` - to show the how many files were changed and the number of lines that were added/removed\n* `-p` or `--patch` - this the default, but if `--stat` is used, the patch won't display, so pass `-p` to add it again\n* `-w` - to ignore changes to whitespace\n\nYou are now among the `git log`ging elite! Try your hand at a few quizzes.",
              "instructor_notes": ""
            },
            {
              "id": 264904,
              "key": "14cb4e22-2beb-4537-9945-64c4370b9d0e",
              "title": "How Many Rulesets Were Added?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14cb4e22-2beb-4537-9945-64c4370b9d0e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many rulesets are added to the CSS by commit `8d3ea36`?",
                "answers": [
                  {
                    "id": "a1487110787892",
                    "text": "1",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110808550",
                    "text": "2",
                    "is_correct": true
                  },
                  {
                    "id": "a1487110809077",
                    "text": "3",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110809652",
                    "text": "4",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264905,
              "key": "aa1d7f8d-90aa-4a0a-86a5-8c71abd04527",
              "title": "How Many Files Were Changed?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aa1d7f8d-90aa-4a0a-86a5-8c71abd04527",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "There's a commit with the message \"Convert social links from text to images\". How many files were changed by this commit?",
                "answers": [
                  {
                    "id": "a1487110847131",
                    "text": "2 files",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110875411",
                    "text": "4 files",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110875971",
                    "text": "5 files",
                    "is_correct": true
                  },
                  {
                    "id": "a1487110876477",
                    "text": "9 files",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264906,
              "key": "f4b22660-11ec-451f-aabc-deb833b75f99",
              "title": "What Level Heading Was Added?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f4b22660-11ec-451f-aabc-deb833b75f99",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Look at commit `fdf5493`. What's the first HTML heading element that's added by this commit?",
                "answers": [
                  {
                    "id": "a1487110913238",
                    "text": "an `<h1>`",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110947175",
                    "text": "an `<h2>`",
                    "is_correct": true
                  },
                  {
                    "id": "a1487110947679",
                    "text": "an `<h3>`",
                    "is_correct": false
                  },
                  {
                    "id": "a1487110948187",
                    "text": "an `<h4>`",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 264395,
          "key": "b1ffc3a7-a460-4e3d-ab03-393f774552b2",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b1ffc3a7-a460-4e3d-ab03-393f774552b2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 273024,
              "key": "a0dfb764-9a09-4d7f-bab9-4313a1e88ae3",
              "title": "A Repository's History - Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9rUf2HbdAd8",
                "china_cdn_id": "9rUf2HbdAd8.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}