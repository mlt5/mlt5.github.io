{
  "data": {
    "lesson": {
      "id": 256064,
      "key": "61776182-df3f-4767-9558-5d1591c1a709",
      "title": "Tagging, Branching, and Merging",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Being able to work on your project in isolation from other changes will multiply your productivity. You'll learn how to do this isolated development with Git's branches.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/61776182-df3f-4767-9558-5d1591c1a709/256064/1517447384200/Tagging%2C%20Branching%2C%20and%20Merging%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/61776182-df3f-4767-9558-5d1591c1a709/256064/1517447373523/Tagging%2C%20Branching%2C%20and%20Merging%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 265006,
          "key": "886b5f73-40c8-4fd0-a800-cdc1d0cb5801",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "886b5f73-40c8-4fd0-a800-cdc1d0cb5801",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 283735,
              "key": "620f86ad-7e0f-4cfb-97ef-fead5299d556",
              "title": "Tagging, Branching, And Merging - Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sMf_r4_z-Ls",
                "china_cdn_id": "sMf_r4_z-Ls.mp4"
              }
            }
          ]
        },
        {
          "id": 265007,
          "key": "f22ea0e4-4a68-4d3a-91c8-0c19915af71f",
          "title": "Tagging",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f22ea0e4-4a68-4d3a-91c8-0c19915af71f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 265015,
              "key": "0eb25264-5b11-4480-afea-62bc68ebfd5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So far in this course, we've been zoomed in on the specific Git commands. We've learned how they work in detail and what it looks like running them on the Terminal.\n\nLet's zoom out a bit to look at how a Git tag fits into a repository.",
              "instructor_notes": ""
            },
            {
              "id": 273029,
              "key": "bde9382c-48f4-40c6-838d-355e6ba576a4",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 03 Tagging Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D4VdXT72ASE",
                "china_cdn_id": "D4VdXT72ASE.mp4"
              }
            },
            {
              "id": 265017,
              "key": "632e9d8a-0a8d-4820-8674-ed332d855cde",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Where Are We?\n\nYou can do these steps in either project, but I'll be doing them in the `new-git-project` project.\n\nLet's take a look at the log of the project so far:",
              "instructor_notes": ""
            },
            {
              "id": 265018,
              "key": "9a7beeee-5fca-44ac-bd92-9cf28ac40f8c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39500_ud123-l5-git-log-pre-tag/ud123-l5-git-log-pre-tag.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9a7beeee-5fca-44ac-bd92-9cf28ac40f8c",
              "caption": "_The Terminal application showing the output from running `git log --oneline`._",
              "alt": "The Terminal application showing the output from running `git log --oneline`.",
              "width": 1778,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 265019,
              "key": "ee746cd8-611e-4b17-8493-176b682c9f76",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Tag Command\n\nPay attention to what's shown (just the SHA and the commit message)\n\nThe command we'll be using to interact with the repository's tags is the `git tag` command:\n\n```bash\n$ git tag -a v1.0\n```\n\nThis will open your code editor and wait for you to supply a message for the tag. How about the message \"Ready for content\"?",
              "instructor_notes": ""
            },
            {
              "id": 265023,
              "key": "f0d8a547-0cd4-44a4-bc72-36b929303263",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39be9_ud123-l5-editor-with-tag-message/ud123-l5-editor-with-tag-message.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f0d8a547-0cd4-44a4-bc72-36b929303263",
              "caption": "_Code editor waiting for the tag's message to be supplied._",
              "alt": "Code editor waiting for the tag's message to be supplied.",
              "width": 2740,
              "height": 1758,
              "instructor_notes": null
            },
            {
              "id": 265021,
              "key": "3a40a6e6-0ea0-4dd0-9a0d-c700241379a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> CAREFUL: In the command above (`git tag -a v1.0`) the `-a` flag is used. This flag tells Git to create an _annotated_ flag. If you don't provide the flag (i.e. `git tag v1.0`) then it'll create what's called a _lightweight_ tag.\n\n> Annotated tags are recommended because they include a lot of extra information such as:\n* the person who made the tag\n* the date the tag was made\n* a message for the tag\n\n> Because of this, you should always use annotated tags.",
              "instructor_notes": ""
            },
            {
              "id": 265024,
              "key": "01ebadf3-e925-4d3b-8099-2611aaf5e1fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Verify Tag\n\nAfter saving and quitting the editor, nothing is displayed on the command line. So how do we know that a tag was actually added to the project? If you type out just `git tag`, it will display all tags that are in the repository.",
              "instructor_notes": ""
            },
            {
              "id": 265025,
              "key": "ef436798-619e-46ab-97bf-d62c3c48753e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39cdf_ud123-l5-git-tag/ud123-l5-git-tag.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ef436798-619e-46ab-97bf-d62c3c48753e",
              "caption": "_The Terminal application showing the output of the `git tag` command. The tag `v1.0` is listed._",
              "alt": "The Terminal application showing the output of the `git tag` command. The tag `v1.0` is listed.",
              "width": 2142,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 265026,
              "key": "aa31c6da-66b3-4e94-9d9b-0f2a6fc100a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So we've verified that it's in the repository, but let's actually see _where_ it is inside the repository. To do that, we'll go back to our good old friend, `git log`! ",
              "instructor_notes": ""
            },
            {
              "id": 265028,
              "key": "526a4c8e-836b-45df-9f0b-472a8a858289",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Log's --decorate Flag\n\nAs you've learned, `git log` is a pretty powerful tool for letting us check out a repository's commits. We've already looked at a couple of its flags, but it's time to add a new one to our toolbelt. The `--decorate` flag will show us some details that are hidden from the default view.",
              "instructor_notes": ""
            },
            {
              "id": 321955,
              "key": "00fbafed-8bbc-4a82-88e1-58dcaf565079",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Try running `git log --decorate` now!",
              "instructor_notes": ""
            },
            {
              "id": 321956,
              "key": "9abefc84-fa0c-4c9b-b214-580be53df7df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 `--decorate` Flag Changes in Git 2.13  💡 \n\n> In the 2.13 update to Git, the `log` command has changed to automatically enable the `--decorate` flag. This means that you do not need to include the `--decorate` flag in your command, since it is automatically included, anyway! So the following commands result in the exact same output:\n\n> ```shell\n$ git log --decorate\n$ git log\n```\n\n> Check out [the 2.13 release notes](https://github.com/git/git/blob/v2.13.0/Documentation/RelNotes/2.13.0.txt#L176-L177).",
              "instructor_notes": ""
            },
            {
              "id": 265029,
              "key": "17cab282-f405-4200-84a6-7142a6800d56",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39d95_ud123-l5-git-log-decorate/ud123-l5-git-log-decorate.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/17cab282-f405-4200-84a6-7142a6800d56",
              "caption": "_The Terminal application showing the output of the `git log --decorate` command. The log output now displays the newly created tag._",
              "alt": "The Terminal application showing the output of the `git log --decorate` command. The log output now displays the newly created tag.",
              "width": 2246,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 265030,
              "key": "0a95d7a6-3dea-409d-a592-00d7bffc7b21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The tag information is at the very end of the first line:\n\n```bash\ncommit 6fa5f34790808d9f4dccd0fa8fdbc40760102d6e (HEAD -> master, tag: v1.0)\n```\n\nSee how it says `tag: v1.0`? That's the tag! Remember that tags are associated with a specific commit. This is why the tag is on the same line as the commit's SHA.",
              "instructor_notes": ""
            },
            {
              "id": 265031,
              "key": "1916f801-426b-47fc-aa04-ded1341119a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## HEAD -> master?\n\n> Did you notice that, in addition to the tag information being displayed in the log, the `--decorate` also revealed `HEAD -> master`? That's information about a _branch_! We'll be looking at branches in Git, next.",
              "instructor_notes": ""
            },
            {
              "id": 265032,
              "key": "79215abc-e861-4537-bfe7-eb498effbbee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Deleting A Tag\n\nWhat if you accidentally misspelled something in the tag's message, or mistyped the actual tag name (`v0.1` instead of `v1.0`). How could you fix this? The easiest way is just to delete the tag and make a new one.\n\nA Git tag can be deleted with the `-d` flag (for _delete_!) and the name of the tag:\n\n```bash\n$ git tag -d v1.0\n```",
              "instructor_notes": ""
            },
            {
              "id": 265033,
              "key": "cf1b013c-588b-4f37-b7fc-30bcc9b09047",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39e16_ud123-l5-git-tag-delete/ud123-l5-git-tag-delete.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cf1b013c-588b-4f37-b7fc-30bcc9b09047",
              "caption": "_The Terminal application showing the removal of a tag by using the `-d` flag. The command that is run is `git tag -d v1.0`._",
              "alt": "The Terminal application showing the removal of a tag by using the `-d` flag. The command that is run is `git tag -d v1.0`.",
              "width": 2246,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 265034,
              "key": "fddb0d6b-d8bb-4ead-bc93-091ea16c20bc",
              "title": "Where Are The Tags?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fddb0d6b-d8bb-4ead-bc93-091ea16c20bc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "By default, a Git tag will not appear in a log. What flag must be used to display the tag information in the output of `git log`?",
                "answers": [
                  {
                    "id": "a1487117898240",
                    "text": "--show-tags",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117911707",
                    "text": "--tags",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117912363",
                    "text": "--display-all",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117912891",
                    "text": "--decorate",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 411182,
              "key": "a98e6a91-0d02-4616-a790-af895b61b348",
              "title": "Delete That Tag?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a98e6a91-0d02-4616-a790-af895b61b348",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following will delete the tag `v-1`?",
                "answers": [
                  {
                    "id": "a1506623432926",
                    "text": "git tag --delete v-1",
                    "is_correct": true
                  },
                  {
                    "id": "a1506623454582",
                    "text": "git remove v-1",
                    "is_correct": false
                  },
                  {
                    "id": "a1506623460054",
                    "text": "git tag -d v-1",
                    "is_correct": true
                  },
                  {
                    "id": "a1506623464902",
                    "text": "git delete v-1",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 265036,
              "key": "ae6b1f0d-80cd-44b2-9836-a8f53c037e95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding A Tag To A Past Commit\n\nRunning `git tag -a v1.0` will tag the most recent commit. But what if you wanted to tag a commit that occurred farther back in the repo's history? \n\nAll you have to do is provide the SHA of the commit you want to tag!\n\n```bash\n$ git tag -a v1.0 a87984\n```\n\n(after popping open a code editor to let you supply the tag's message) this command will tag the commit with the SHA `a87084` with the tag `v1.0`. Using this technique, you can tag any commit in the entire git repository! Pretty neat, right?...and it's just a simple addition to add the SHA of a commit to the Git tagging command you already know.",
              "instructor_notes": ""
            },
            {
              "id": 265037,
              "key": "69e97312-a26f-464c-b2bc-764b853bc901",
              "title": "Tag Older Commit?",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "69e97312-a26f-464c-b2bc-764b853bc901",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Using the following `git log --oneline` information, what command would you run to give the commit with the message \"style page header\" a tag of `beta`?\n\n```bash\n2a9e9f3 add breakpoint for large-sized screens\n137a0bd add breakpoint for medium-sized screens\nc5ee895 add space around page edge\nb552fa5 style page header\nf8c87c7 convert social links from text to images\n```",
                "matchers": [
                  {
                    "expression": "git tag -a beta b552fa5"
                  },
                  {
                    "expression": "git tag beta b552fa5"
                  }
                ]
              }
            },
            {
              "id": 265038,
              "key": "1fdab2d4-e9b0-40e5-bf6b-6deb1f95d594",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Tag Recap\n\nTo recap, the `git tag` command is used to add a marker on a specific commit. The tag does not move around as new commits are added.\n\n```shell\n$ git tag -a beta\n```\n\nThis command will:\n* add a tag to the most recent commit\n* add a tag to a specific commit _if a SHA is passed_\n\n### Further Research\n* [Git Basics - Tagging](https://git-scm.com/book/en/v2/Git-Basics-Tagging) from the Git Book\n* [Git Tag](https://git-scm.com/docs/git-tag) from the Git Docs",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 265008,
          "key": "89a3a3ca-c47d-4e5f-87c7-cbc838f62232",
          "title": "Branching",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "89a3a3ca-c47d-4e5f-87c7-cbc838f62232",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 265039,
              "key": "30647156-9ab8-4346-a9ee-944b48b4cc5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It's time to delve into the wonderful world of branches! Branches in Git are flexible and let you do some really powerful things. Before we get into the nitty gritty details of the commands, let's take another step back and look at the big picture of what branches are and how they function.",
              "instructor_notes": ""
            },
            {
              "id": 273030,
              "key": "094aefc4-f58b-45a7-b41e-eb7ec6d0a4a0",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 26 Branching Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ywcOC6CLG4s",
                "china_cdn_id": "ywcOC6CLG4s.mp4"
              }
            },
            {
              "id": 265041,
              "key": "29854875-59f0-4d8a-bf60-f2564530afcc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So that's the big picture of how branches work and how to switch between branches. Did you know that you've already seen the master branch on the command line? Because of the setup files you added in the first lesson, the current branch is displayed right in the command prompt.",
              "instructor_notes": ""
            },
            {
              "id": 265042,
              "key": "1a6aa741-88c9-4e44-958e-5b5d48839044",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3a0fe_ud123-l5-branch-current/ud123-l5-branch-current.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1a6aa741-88c9-4e44-958e-5b5d48839044",
              "caption": "_The Terminal application showing the current branch in the command prompt. The current branch is the \"master\" branch._",
              "alt": "The Terminal application showing the current branch in the command prompt. The current branch is the \"master\" branch.",
              "width": 1536,
              "height": 382,
              "instructor_notes": null
            },
            {
              "id": 265043,
              "key": "844d2130-d3b3-499d-9080-f55d55de4b83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The `git branch` command\n\nThe `git branch` command is used to interact with Git's branches:\n\n```bash\n$ git branch\n```\n\nIt can be used to:\n* list all branch names in the repository\n* create new branches\n* delete branches\n\nIf we type out just `git branch` it will list out the branches in a repository:",
              "instructor_notes": ""
            },
            {
              "id": 265044,
              "key": "178f9635-9479-4529-b163-700b9165ae41",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3a139_ud123-l5-git-branch/ud123-l5-git-branch.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/178f9635-9479-4529-b163-700b9165ae41",
              "caption": "_The Terminal application showing the output of the `git branch` command. The master branch is displayed._",
              "alt": "The Terminal application showing the output of the `git branch` command. The master branch is displayed.",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 265045,
              "key": "7c3de544-9015-4291-a898-9ee64f779e09",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Create A Branch\n\nTo create a branch, all you have to do is use `git branch` and provide it the name of the branch you want it to create. So if you want a branch called \"sidebar\", you'd run this command:\n\n```bash\n$ git branch sidebar\n```",
              "instructor_notes": ""
            },
            {
              "id": 266758,
              "key": "bd62ce2c-dc5e-4747-8611-bdcbab243eb3",
              "title": "Does The Command Prompt Change?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bd62ce2c-dc5e-4747-8611-bdcbab243eb3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Remember that there are a number of branches in the repository, but that the command prompt displays the _current branch_.\n\nNow that we just created a new \"sidebar\" branch, does the command prompt display `sidebar` or `master`?",
                "answers": [
                  {
                    "id": "a1487193375843",
                    "text": "sidebar",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193402877",
                    "text": "master",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 266759,
              "key": "1af6f45e-35ad-4591-abf9-4a400f191343",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The `git checkout` Command\n\nRemember that when a commit is made that it will be added to the current branch. So even though we created the new `sidebar`, no new commits will be added to it since we haven't _switched to it_, yet. If we made a commit right now, that commit would be added to the `master` branch, _not_ the `sidebar` branch. We've already seen this in the demo, but to switch between branches, we need to use Git's `checkout` command.\n\n```bash\n$ git checkout sidebar\n```\n\nIt's important to understand how this command works. Running this command will:\n* remove all files and directories from the Working Directory that Git is tracking\n    * (files that Git tracks are stored in the repository, so nothing is lost)\n* go into the repository and pull out all of the files and directories of the commit that the branch points to\n\nSo this will remove all of the files that are referenced by commits in the master branch. It will replace them with the files that are referenced by the commits in the sidebar branch. This is very important to understand, so go back and read these last two sentences.\n\nThe funny thing, though, is that both `sidebar` and `master` are pointing _at the same commit_, so it will look like nothing changes when you switch between them. But the command prompt will show \"sidebar\", now:",
              "instructor_notes": ""
            },
            {
              "id": 266760,
              "key": "b2d2a7d2-287b-41a3-b831-7d4b6c48ec97",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4c60a_ud123-l5-git-checkout-sidebar/ud123-l5-git-checkout-sidebar.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b2d2a7d2-287b-41a3-b831-7d4b6c48ec97",
              "caption": "_The Terminal application showing the \"sidebar\" branch in the command prompt._",
              "alt": "The Terminal application showing the \"sidebar\" branch in the command prompt.",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 266761,
              "key": "f2831ca3-214f-44e2-8d71-e4dce56a8959",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Branches In The Log\n\nThe branch information in the command prompt is helpful, but the clearest way to see it is by looking at the output of `git log`. But just like we had to use the `--decorate` flag to display Git tags, we need it to display branches.\n\n```bash\n$ git log --oneline --decorate\n```\n\nThis is what my log output displays (yours might look different depending on what commits you've made):",
              "instructor_notes": ""
            },
            {
              "id": 266762,
              "key": "cd6e6a72-f0cc-4750-b900-f3b576eb0645",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4c65f_ud123-l5-git-log-branches/ud123-l5-git-log-branches.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cd6e6a72-f0cc-4750-b900-f3b576eb0645",
              "caption": "_The Terminal application showing the output of the `git log --oneline --decorate` command. The word \"HEAD\" has an arrow pointing to \"sidebar\" which is the active branch._",
              "alt": "The Terminal application showing the output of the `git log --oneline --decorate` command. The word \"HEAD\" has an arrow pointing to \"sidebar\" which is the active branch",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 266763,
              "key": "a9db1d08-a5dd-41e6-9201-b5906a360ac9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the output above, notice how the special \"HEAD\" indicator we saw earlier has an arrow pointing to the sidebar branch. It's pointing to sidebar because the sidebar branch is the current branch, and any commits made right now will be added to the sidebar branch.",
              "instructor_notes": ""
            },
            {
              "id": 266764,
              "key": "9edfe7cf-d938-49f2-8790-563aa77d8e7d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Active Branch\n\nThe command prompt will display the _active_ branch. But this is a special customization we made to our prompt. If you find yourself on a different computer, the _fastest_ way to determine the active branch is to look at the output of the `git branch` command. An asterisk will appear next to the name of the active branch.",
              "instructor_notes": ""
            },
            {
              "id": 266765,
              "key": "45b208cb-b5e9-4ffc-a7da-b73b49071cf3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4c6aa_ud123-l5-git-branch-asterisk/ud123-l5-git-branch-asterisk.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/45b208cb-b5e9-4ffc-a7da-b73b49071cf3",
              "caption": "_The Terminal application showing the output of the `git branch` command. The active branch (in this case, the \"sidebar\" branch) has an asterisk next to it._",
              "alt": "The Terminal application showing the output of the `git branch` command. The active branch (in this case, the \"sidebar\" branch) has an asterisk next to it.",
              "width": 1756,
              "height": 950,
              "instructor_notes": null
            },
            {
              "id": 266766,
              "key": "297d01f0-00a2-4de2-9197-510998b03bc6",
              "title": "Create Git Branch At Location?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "297d01f0-00a2-4de2-9197-510998b03bc6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "From what you know about both the `git branch` and `git tag` commands, what do you think the following command will do?\n\n```bash\n$ git branch alt-sidebar-loc 42a69f\n```",
                "answers": [
                  {
                    "id": "a1487193898208",
                    "text": "will create a branch `alt` at the same commit as the `master` branch",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193910461",
                    "text": "will create the 3 branches `alt`, `sidebar`, `loc`",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193911811",
                    "text": "will move the master branch to the commit with SHA `42a69f`",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193912349",
                    "text": "will create the `alt-sidebar-loc` branch and have it point to the commit with SHA `42a69f`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 266767,
              "key": "5bded3f3-d1d7-479c-ac45-bd71f1b4efeb",
              "title": "Which Branch Is Active?",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5bded3f3-d1d7-479c-ac45-bd71f1b4efeb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given the following output from `git branch`:\n\n```bash\n$ git branch\n  barbara\n* footer-fix\n  master\n  richard\n  sidebar\n  social-icons\n```\n\nWhich branch is the active branch?",
                "matchers": [
                  {
                    "expression": "footer-fix"
                  }
                ]
              }
            },
            {
              "id": 266768,
              "key": "1d857219-061b-4da7-8f11-4261c9faf1ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Delete A Branch\n\nA branch is used to do development or make a fix to the project that won't affect the project (since the changes are made on a branch). Once you make the change on the branch, you can combine that branch into the `master` branch (this \"combining of branches\" is called \"merging\" and we'll look at it shortly).\n\nNow after a branch's changes have been merged, you probably won't need the branch anymore. If you want to delete the branch, you'd use the `-d` flag. The command below includes the `-d` flag which tells Git to _delete_ the provided branch (in this case, the \"sidebar\" branch).\n\n```bash\n$ git branch -d sidebar\n```\n\nOne thing to note is that you can't delete a branch that you're currently on. So to delete the `sidebar` branch, you'd have to switch to either the `master` branch or create and switch to a new branch.\n\nDeleting something can be quite nerve-wracking. Don't worry, though. Git won't let you delete a branch if it has commits on it that aren't on any other branch (meaning the commits are unique to the branch that's about to be deleted). If you created the `sidebar` branch, added commits to it, and then tried to delete it with the `git branch -d sidebar`, Git wouldn't let you delete the branch because you can't delete a branch that you're currently on. If you switched to the `master` branch and tried to delete the `sidebar` branch, Git _also_ wouldn't let you do that because those new commits on the `sidebar` branch would be lost! To force deletion, you need to use a capital D flag - `git branch -D sidebar`.",
              "instructor_notes": ""
            },
            {
              "id": 266769,
              "key": "22f92e55-2af3-40ab-8bae-15ea071dd2d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Branch Recap\n\nTo recap, the `git branch` command is used to manage branches in Git:\n\n```bash\n# to list all branches\n$ git branch\n\n# to create a new \"footer-fix\" branch\n$ git branch footer-fix\n\n# to delete the \"footer-fix\" branch\n$ git branch -d footer-fix\n```\n\nThis command is used to:\n\n* list out local branches\n* create new branches\n* remove branches\n\n\n### Further Research\n* [Git Branching - Basic Branching and Merging](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging) from the Git Docs\n* [Learn Git Branching](http://learngitbranching.js.org/)\n* [Git Branching Tutorial](https://www.atlassian.com/git/tutorials/using-branches) from the Atlassian Blog",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 265009,
          "key": "b86879e8-45d6-4600-94f2-a11564e7d1f8",
          "title": "Branching Effectively",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b86879e8-45d6-4600-94f2-a11564e7d1f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 266773,
              "key": "a825b443-4eb7-4201-9dcc-b1f5efb87ef0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Alright! Now that you've learned how to create, list, and delete branches, let's put that knowledge to use!\n\nFirst, make sure we're on the same page and have the same starter code. We're going to be working in the `new-git-project` project. The project has the following files:\n* `index.html`\n* `css/app.css` (empty)\n* `js/app.js` (empty)\n\nThe CSS and JavaScript files are empty. Make sure the index file has the following content:",
              "instructor_notes": ""
            },
            {
              "id": 266774,
              "key": "ee1ca7a6-df52-4009-aa66-e1ced34044ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Blog Project</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"\">\n    <link rel=\"stylesheet\" href=\"css/app.css\">\n</head>\n<body>\n\n    <header>\n        <h1>Expedition</h1>\n    </header>\n\n    <div class=\"container\">\n        <main>\n            \n        </main>\n    </div>\n\n    <footer>\n        Made with ♥ @ Udacity\n    </footer>\n    <script src=\"js/app.js\"></script>\n</body>\n</html>\n```",
              "instructor_notes": ""
            },
            {
              "id": 266775,
              "key": "144ad1c9-ca59-40c9-af3f-45479b5fffe0",
              "title": "Project Is Set Up",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "144ad1c9-ca59-40c9-af3f-45479b5fffe0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have an `index.html` file with the starter code from above",
                "I have an `app.css` file inside a `css` directory",
                "I have an `app.js` file inside a `js` directory",
                "all files have been saved",
                "all files have been staged and committed to the repository",
                "the current branch is the `master` branch",
                "I have deleted all other branches",
                "the output from running `git status` on the command line includes the text `working directory clean`"
              ],
              "positive_feedback": "Fantastic work! Let's get crackin'!",
              "video_feedback": null,
              "description": "Before we proceed, let's make sure we have the same setup. Check off each of the following:"
            },
            {
              "id": 266776,
              "key": "037cd78b-b1f5-4b12-996e-ff47bf79307b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Game Plan\n\nRight now we have all of our code on the `master` branch (which is the default branch). We're about to work with branches, by:\n* adding content to them\n* creating new branches\n* switching back and forth between them\n\nLet's use branches to make the following changes:\n1. on the master branch - add a default color to the page\n* create a sidebar branch - create a sidebar for the page\n* on the master branch - change the heading of the page\n* on the sidebar branch - add more content to the sidebar\n* create a footer branch - add social links to the footer\n",
              "instructor_notes": ""
            },
            {
              "id": 266777,
              "key": "e8f3480d-6189-4d87-ac28-c858ed6dde7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change 1 - Add Page Color\n\nMake sure you're on the `master` branch and add the following content to `css/app.css`:\n\n```css\nbody {\n    background-color: #00cae4;\n}\n```\n\nSave the file. Then add the file to the staging index and commit it to the repository.",
              "instructor_notes": ""
            },
            {
              "id": 266778,
              "key": "f0eb19d8-cbe4-43e4-9a0e-6088a9a1f596",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4ce74_ud123-l5-changes-add-color/ud123-l5-changes-add-color.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f0eb19d8-cbe4-43e4-9a0e-6088a9a1f596",
              "caption": "_The Terminal application showing the output of the `git log --oneline --decorate` command. The most-recent commit adds a default background color to the page._",
              "alt": "The Terminal application showing the output of the `git log --oneline --decorate` command. The most-recent commit adds a default background color to the page.",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 266779,
              "key": "2c1e6c1d-0dd6-4026-b921-cae02752d11c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change 2 - Add Sidebar\n\nLet's add a sidebar to the page. But let's say that we're not really sure if we like the new background color. So we'll place the sidebar branch on the commit _before_ the one that sets the page's color. Your SHAs will be different, but, for me, the commit that's before the one that adds the color has a SHA of `5bfe5e7`. So adding the branch to that commit would look like:\n\n```bash\n$ git branch sidebar 5bfe5e7\n```\n\nNow use the `git checkout` command to switch to the new `sidebar` branch. Running a `git log --oneline --decorate` shows me:",
              "instructor_notes": ""
            },
            {
              "id": 266780,
              "key": "6c1f7853-8f48-454a-a175-24eed97367f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4cee4_ud123-l5-git-branch-sidebar/ud123-l5-git-branch-sidebar.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6c1f7853-8f48-454a-a175-24eed97367f4",
              "caption": "_The Terminal application showing the output of `git log --oneline --decorate`. The output does *NOT* include the `master` branch - it has disappeared._",
              "alt": "The Terminal application showing the output of `git log --oneline --decorate`. The output does *NOT* include the `master` branch - it has disappeared.",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 266781,
              "key": "f94d0d4f-24bc-43fe-b3bc-c975b4b40b51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Did you notice that the `master` branch does not display in the output? Where did it go!?! Is it lost? Don't worry, it's still there, we'll see how to get it to display in just a second.\n\nBut first, in your code editor, switch to the `app.css` file. Notice that it does not have the CSS we previously entered! Because of this, if you load the project up in the browser, the page won't have a colored background. This makes sense since the CSS file is empty, but do you know why?",
              "instructor_notes": ""
            },
            {
              "id": 266782,
              "key": "264f6bfa-7fd3-4e49-a95e-ef7f0a0c3ed9",
              "title": "Where's the CSS?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "264f6bfa-7fd3-4e49-a95e-ef7f0a0c3ed9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Thinking back to the branching repository video from the previous lesson, why would the CSS file be empty?",
                "answers": [
                  {
                    "id": "a1487195917493",
                    "text": "The content has been erased.",
                    "is_correct": false
                  },
                  {
                    "id": "a1487195933402",
                    "text": "The content is stored safely on another branch.",
                    "is_correct": true
                  },
                  {
                    "id": "a1487195934091",
                    "text": "The content is in a temporary file that needs to be saved.",
                    "is_correct": false
                  },
                  {
                    "id": "a1487195934667",
                    "text": "A bear ate it.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 273031,
              "key": "3b18fe7e-e7c6-4d55-8af9-f3da21bc9a1b",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 54 Content On Different Branches",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Px6EUylw8Uw",
                "china_cdn_id": "Px6EUylw8Uw.mp4"
              }
            },
            {
              "id": 266784,
              "key": "cd26ac4c-8f9e-40d1-a246-f8c6dd8d8538",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Create a sidebar by adding the following `<aside>` code to the HTML file:\n\n```html\n<div class=\"container\">\n    <main>\n\n    </main>\n</div>\n\n<!-- start of new content -->\n<aside>\n    <h2>About Me</h2>\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eos, debitis earum molestias veniam suscipit aliquam totam exercitationem tempore neque vitae. Minima, corporis pariatur facere at quo porro beatae similique! Odit.</p>\n</aside>\n<!-- end of new content -->\n\n<footer>\n    Made with ♥ @ Udacity\n</footer>\n```\n\nI added my `<aside>` content next to the `<main>` element as a fellow child of the `<div class=\"container\">` element.\n\nFeel free to add any content inside the `<aside>` element!",
              "instructor_notes": ""
            },
            {
              "id": 266785,
              "key": "98a41109-ad84-4acb-b784-ea1ac2d97145",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️ Don't Change the CSS\n\n> WARNING: It's very important that you _*do not change the CSS file*_. \n\n> We'll change it later, but if you make a change right now, we'll end up having what's known as a \"merge conflict\". We'll manually cause a merge conflict in a bit, but we don't want to have one right now, so just don't make any changes to the CSS file, yet.",
              "instructor_notes": ""
            },
            {
              "id": 266787,
              "key": "0607a90d-8aef-419f-b523-1f65a097472c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0607a90d-8aef-419f-b523-1f65a097472c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've saved `index.html`",
                "I've staged `index.html`",
                "I've committed `index.html` to the repsitory"
              ],
              "positive_feedback": "Great job! 🎉",
              "video_feedback": null,
              "description": "We're done with this step, so it's time to commit the changes."
            },
            {
              "id": 266788,
              "key": "9559b157-76a2-405f-b58f-6bfc5b8e8b9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change 3 - Change Heading On Master\n\nLet's switch back to the master branch and update the page heading.\n\nUse the `git checkout` command to switch back to the `master` branch. (Notice that the HTML for the new sidebar is no longer there(!) because all that code is stored safely on the `sidebar` branch.)\n\nNow change the `<h1>` heading of the page from \"Expedition\" to something else. How about something exciting like the word \"Adventure\"!?!",
              "instructor_notes": ""
            },
            {
              "id": 266789,
              "key": "a5e4d20e-0731-40af-8dc0-b70f7a2c2a2d",
              "title": "See Changes Made?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a5e4d20e-0731-40af-8dc0-b70f7a2c2a2d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Pop quiz time! How do you have Git show you the changes you've saved, but not yet committed?",
                "answers": [
                  {
                    "id": "a1487196644318",
                    "text": "git show --diff",
                    "is_correct": false
                  },
                  {
                    "id": "a1487196658665",
                    "text": "git log -p",
                    "is_correct": false
                  },
                  {
                    "id": "a1487196659223",
                    "text": "git diff",
                    "is_correct": true
                  },
                  {
                    "id": "a1487196659848",
                    "text": "git log --stat",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 266790,
              "key": "25e377f2-2537-4b52-8f43-6ea3731bc5dd",
              "title": "Heading Change Have Been Saved And Committed",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25e377f2-2537-4b52-8f43-6ea3731bc5dd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've saved `index.html`",
                "I've staged `index.html`",
                "I've committed `index.html` to the repsitory"
              ],
              "positive_feedback": "Stupendous job!",
              "video_feedback": null,
              "description": "Now it's time to save the `index.html` file and make a commit to add this change to the repository. (I used the commit message \"Improve site heading for SEO\", but see if you can think of a better one)"
            },
            {
              "id": 266791,
              "key": "57349e08-f83f-4709-980e-68adaa3a6d1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change 4 - Add More Content To Sidebar\n\nSwitch back to the `sidebar` branch (notice, again, that content we've added to the `master` branch isn't visible on the `sidebar` branch).\n\nNow just add some content inside the `<aside>` element. Add something about yourself - your favorite movie or book (my favorite is LOTR!). Anything will work, you just need to add some content.\n\nAgain, make sure that you do not make changes to the CSS file.\n\nNow save the `index.html` file and make a commit.",
              "instructor_notes": ""
            },
            {
              "id": 266793,
              "key": "46d3c3ce-38ab-4b16-bf61-5889ac9c831a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change 5 - Add Social Links To Footer\n\nWe've made a number of changes, and we're about to make our last one. Let's add some social icons to the page's footer. For grins and giggles, let's make this change on a new footer branch that's based off the `master` branch. So we need to create a new `footer` branch, first.",
              "instructor_notes": ""
            },
            {
              "id": 266794,
              "key": "33f82009-8ceb-46e3-9f5e-3bc6f57b38d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 Switch and Create Branch In One Command💡 \n\n>The way we currently work with branches is to create a branch with the `git branch` command and then switch to that newly created branch with the `git checkout` command.\n\n> But did you know that the `git checkout` command can actually create a new branch, too? If you provide the `-b` flag, you can create a branch _and_ switch to it all in one command.\n\n> ```bash\n$ git checkout -b richards-branch-for-awesome-changes\n```\n\n> It's a pretty useful command, and I use it often.",
              "instructor_notes": ""
            },
            {
              "id": 266795,
              "key": "c7c1f449-c3eb-4df9-9977-aa21522e9d07",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's use this new feature of the `git checkout` command to create our new `footer` branch and have this footer branch start at the same location as the master branch:\n\n```bash\n$ git checkout -b footer master\n```\n\nNow if we run a quick `git log --oneline --decorate`, we should see (your commit messages might be different):",
              "instructor_notes": ""
            },
            {
              "id": 266796,
              "key": "665d46d2-5da8-4d72-aa9d-8dd3a3da7445",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d41d_ud123-l5-git-checkout-b-footer-master/ud123-l5-git-checkout-b-footer-master.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/665d46d2-5da8-4d72-aa9d-8dd3a3da7445",
              "caption": "_The Terminal application showing the output of `git log --oneline --decorate`. The special `HEAD` pointer is pointing at the `footer` branch. The `footer` branch is on the same commit as the \"master\" branch._",
              "alt": "The Terminal application showing the output of `git log --oneline --decorate`. The special `HEAD` pointer is pointing at the `footer` branch. The `footer` branch is on the same commit as the \"master\" branch.",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 266797,
              "key": "2c00e808-424e-4b89-80ff-3bf4da10fbbe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Add Social Links\n\nNow that we're on a new branch, let's add some social links to the page's footer. I've added the following content:\n\n```html\n<footer>\n    <!-- start of new content -->\n    <section>\n        <h3 class=\"visuallyhidden\">Social Links</h3>\n        <a class=\"social-link\" href=\"https://twitter.com/udacity\">\n            <img src=\"img/social-twitter.png\" alt=\"Twitter\">\n        </a>\n        <a class=\"social-link\" href=\"https://www.instagram.com/udacity/\">\n            <img src=\"img/social-instagram.png\" alt=\"Instagram\">\n        </a>\n        <a class=\"social-link\" href=\"https://plus.google.com/+Udacity\">\n            <img src=\"img/social-google.png\" alt=\"Google Plus\">\n        </a>\n    </section>\n    <!-- end of new content -->\n</footer>\n```\n\nFeel free to link to your own social accounts.",
              "instructor_notes": ""
            },
            {
              "id": 266798,
              "key": "9eafbeff-a750-40c1-8d97-0c98d288b9e8",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9eafbeff-a750-40c1-8d97-0c98d288b9e8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've saved `index.html`",
                "I've staged `index.html`",
                "I've committed `index.html` to the repsitory"
              ],
              "positive_feedback": "Outstanding work! 👏",
              "video_feedback": null,
              "description": "Now save the file and make a commit. (I used the commit message \"Add links to social media\", but definitely try coming up with a better one)"
            },
            {
              "id": 266799,
              "key": "f7a7ee58-6d09-4f58-8c39-a45d46166c10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## See All Branches At Once\n\nWe've made it to the end of all the changes we needed to make! Awesome job!\n\nNow we have multiple sets of changes on three different branches. We can't see other branches in the `git log` output unless we switch to a branch. Wouldn't it be nice if we could see _all_ branches at once in the `git log` output. \n\nAs you've hopefully learned by now, the `git log` command is pretty powerful and _can_ show us this information. We'll use the new `--graph` and `--all` flags:\n\n```bash\n$ git log --oneline --decorate --graph --all\n```\n\nThe `--graph` flag adds the bullets and lines to the leftmost part of the output. This shows the actual _branching_ that's happening. The `--all` flag is what displays _all_ of the branches in the repository.\n\nRunning this command will show all branches and commits in the repository:",
              "instructor_notes": ""
            },
            {
              "id": 266800,
              "key": "1e40b6ef-cc1c-4f78-876c-73c8f90c3e19",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d51e_ud123-l5-git-log-graph-all/ud123-l5-git-log-graph-all.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1e40b6ef-cc1c-4f78-876c-73c8f90c3e19",
              "caption": "_The Terminal application showing the output of `git log --oneline --graph --decorate --all`. This shows all branches and therefore all commits in the repository._",
              "alt": "The Terminal application showing the output of `git log --oneline --graph --decorate --all`. This shows all branches and therefore all commits in the repository.",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 266801,
              "key": "c4375d39-6d27-426c-a068-82b97e12f911",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap Of Changes\n\nWe've made the following changes:\n1. on the master branch, we added a default color to the page\n* we created a sidebar branch and added code for a sidebar\n* on the master branch, we changed the heading of the page\n* on the sidebar branch, we added more content to the sidebar\n* we created a footer branch and added social links to the footer\n\nThese changes are all on their own, separate branches. Let's have Git combine these changes together. Combining branches together is called **merging**.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 265010,
          "key": "3a831268-c6c7-4d10-a755-37e1232a2b4c",
          "title": "Merging",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a831268-c6c7-4d10-a755-37e1232a2b4c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 266802,
              "key": "ee19effe-4bb7-41e4-a374-46c5f5a31979",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Remember that the purpose of a topic branch (like `sidebar`) is that it lets you make changes that do not affect the `master` branch. Once you make changes on the topic branch, you can either decide that you don't like the changes on the branch and you can just delete that branch, or you can decide that you want to keep the changes on the topic branch and combine those changes in with those on another branch.\n\nCombining branches together is called **merging**.\n\nGit can automatically merge the changes on different branches together. This branching and merging ability is what makes Git _incredibly powerful_! You can make small or extensive changes on branches, and then just use Git to combine those changes together. \n\nLet's see how this works, in theory. Pay attention to the two main types of merges in Git, a regular **merge** and a **Fast-forward merge**.",
              "instructor_notes": ""
            },
            {
              "id": 273032,
              "key": "c4f25391-7354-4b54-b72b-33e0f32a1564",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 71 Merging",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gQiWicrreJg",
                "china_cdn_id": "gQiWicrreJg.mp4"
              }
            },
            {
              "id": 266804,
              "key": "b4fee657-95fc-4f5e-9d94-b228ac99e0bb",
              "title": "Quick Check In",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b4fee657-95fc-4f5e-9d94-b228ac99e0bb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I am in the `new-git-project` project",
                "I have checked out the `master` branch",
                "the output of `git status` includes the text `working directory clean`"
              ],
              "positive_feedback": "Alrighty, let's begin!",
              "video_feedback": null,
              "description": "Let's do a quick check-in to make sure we're both starting at the same point. Check off each of the following:"
            },
            {
              "id": 266805,
              "key": "b3ea4063-593e-465c-bb8a-26d50494c8c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️ Know The Branch ⚠️\n\n> It's very important to know which branch you're on when you're about to merge branches together. Remember that making a merge makes a commit.\n\n> As of right now, we do not know how to _undo_ changes. We'll go over it in the next lesson, but if you make a merge on the wrong branch, use this command to undo the merge:\n\n> `git reset --hard HEAD^`\n\n> (Make sure to include the `^` character! It's a known as a \"Relative Commit Reference\" and indicates \"the parent commit\". We'll look at Relative Commit References in the next lesson.)",
              "instructor_notes": ""
            },
            {
              "id": 266806,
              "key": "7e678f1a-8d95-4b39-b634-c4954715de27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Merge Command\n\nThe `git merge` command is used to combine Git branches:\n\n```bash\n$ git merge <name-of-branch-to-merge-in>\n```\n\nWhen a merge happens, Git will:\n* look at the branches that it's going to merge\n* look back along the branch's history to find a single commit that _both_ branches have in their commit history\n* combine the lines of code that were changed on the separate branches together\n* makes a commit to record the merge\n",
              "instructor_notes": ""
            },
            {
              "id": 266808,
              "key": "17ae13f4-48aa-4067-8436-79ef02c8d737",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Fast-forward Merge\n\nIn our project, I've checked out the `master` branch and I want _it_ to have the changes that are on the `footer` branch. If I wanted to verbalize this, I could say this is - \"I want to merge in the `footer` branch\". That \"merge in\" is important; when a merge is performed, the _other_ branch's changes are brought into the branch that's currently checked out.\n\nLet me stress that again - When we merge, we're merging some other branch into the current (checked-out) branch. We're not merging two branches into a new branch. We're not merging the current branch into the other branch.\n\nNow, since `footer` is directly ahead of `master`, this merge is one of the easiest merges to do. Merging `footer` into `master` will cause a **Fast-forward merge**. A Fast-forward merge will just move the currently checked out branch _forward_ until it points to the same commit that the other branch (in this case, `footer`) is pointing to.\n\nTo merge in the `footer` branch, run:\n\n```bash\n$ git merge footer\n```\n\nThis is what my Terminal displays after running the command:",
              "instructor_notes": ""
            },
            {
              "id": 266809,
              "key": "a7794263-281e-463d-8556-26de2dfd6b92",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d706_ud123-l5-merge-fast-forward/ud123-l5-merge-fast-forward.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a7794263-281e-463d-8556-26de2dfd6b92",
              "caption": "_The Terminal application showing the result of merging the `footer` branch _into_ the `master` branch._",
              "alt": "A Giphy of The Terminal application showing the result of merging the `footer` branch _into_ the `master` branch.",
              "width": 1020,
              "height": 490,
              "instructor_notes": null
            },
            {
              "id": 266810,
              "key": "14f1fe21-ec45-4565-b613-8530332477be",
              "title": "Branches At Same Location?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14f1fe21-ec45-4565-b613-8530332477be",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the repository, again, now that you've merged the two branches together. Do the `master` branch and the `footer` branch point to the same commit?",
                "answers": [
                  {
                    "id": "a1487197986349",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1487198027495",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 266811,
              "key": "f440e00e-035b-4d7f-b873-563c0d6bf240",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Perform A Regular Merge\n\nFantastic work doing a Fast-forward merge! That wasn't too hard, was it? \n\nBut you might say - \"Of course that was easy, all of the commits are already there and the branch pointer just moved forward!\"...and you'd be right. It's the simplest of merges. \n\nSo let's do the more common kind of merge where two _divergent_ branches are combined. You'll be surprised that to merge in a divergent branch like `sidebar` is actually no different!\n\nTo merge in the `sidebar` branch, make sure you're on the `master` branch and run:\n\n```bash\n$ git merge sidebar\n```\n\nBecause this combines two divergent branches, a commit is going to be made. And when a commit is made, a commit message needs to be supplied. Since this is a _merge commit_ a default message is already supplied. You can change the message if you want, but it's common practice to use the default merge commit message. So when your code editor opens with the message, just close it again and accept that commit message.\n\nThis is what my Terminal shows after using the default commit message:",
              "instructor_notes": ""
            },
            {
              "id": 266812,
              "key": "7e777705-6ae1-41f0-8cb8-99397d235f6c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d84e_ud123-l5-git-merge-sidebar/ud123-l5-git-merge-sidebar.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7e777705-6ae1-41f0-8cb8-99397d235f6c",
              "caption": "_The Terminal application showing the result of merging the `sidebar` branch._",
              "alt": "The Terminal application showing the result of merging the `sidebar` branch.",
              "width": 2224,
              "height": 1032,
              "instructor_notes": null
            },
            {
              "id": 266813,
              "key": "14808f27-c54c-4b18-b2ae-5409369a7188",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Aaaand that's all there is to merging! It's pretty simple, isn't it? You might read a lot of material that makes branching and merging seem overly complicated, but it's really not too bad at all.",
              "instructor_notes": ""
            },
            {
              "id": 266814,
              "key": "68e80616-386c-4969-a6e6-3b926146a46c",
              "title": "Which Branch Moves?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "68e80616-386c-4969-a6e6-3b926146a46c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How about a quick quiz to see if you're following along with how merging works. \n\nLet's say a repository has 4 branches in it:\n* master\n* allisons-mobile-footer-fix\n* nav-updates\n* jonathans-seo-changes\n\nThe changes on `master` and `allisons-mobile-footer-fix` need to be merged together. If HEAD points to `allisons-mobile-footer-fix`, which branch will move when the merge is performed?",
                "answers": [
                  {
                    "id": "a1487198316971",
                    "text": "master",
                    "is_correct": false
                  },
                  {
                    "id": "a1487198333854",
                    "text": "allisons-mobile-footer-fix",
                    "is_correct": true
                  },
                  {
                    "id": "a1487198335177",
                    "text": "nav-updates",
                    "is_correct": false
                  },
                  {
                    "id": "a1487198357539",
                    "text": "jonathans-seo-changes",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 266816,
              "key": "19a8f14e-446b-4a88-8143-90a9f3261281",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What If A Merge Fails?\n\nThe merges we just did were able to merge successfully. Git is able to intelligently combine lots of work on different branches. However, there are times when it can't combine branches together. When a merge is performed and fails, that is called a **merge conflict**. We'll look at merge conflicts, what causes them, and how to resolve them in the next lesson.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 266817,
              "key": "502d162b-dec5-4741-83b6-aa665181932c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Merge Recap\n\nTo recap, the `git merge` command is used to combine branches in Git:\n\n```bash\n$ git merge <other-branch>\n```\n\nThere are two types of merges:\n\n* Fast-forward merge – the branch being merged in must be _ahead_ of the checked out branch. The checked out branch's pointer will just be moved forward to point to the same commit as the other branch.\n* the regular type of merge\n    * two divergent branches are combined\n    * a merge commit is created\n\n### Further Research\n* [Basic Merging](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merging) from Git Book\n* [git-merge](https://git-scm.com/docs/git-merge) from Git Docs\n* [git merge](https://www.atlassian.com/git/tutorials/git-merge) from Atlassian blog",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 265011,
          "key": "84037f3a-2ba6-4317-a705-4dc5f342295e",
          "title": "Merge Conflicts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "84037f3a-2ba6-4317-a705-4dc5f342295e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 266818,
              "key": "e0cf0330-9680-4c3f-b07e-3658d2122133",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Sometimes Merges Fail\n\nMost of the time Git will be able to merge branches together without any problem. However, there are instances when a merge cannot be _fully_ performed automatically. When a merge fails, it's called a **merge conflict**. \n\nIf a merge conflict does occur, Git will try to combine as much as it can, but then it will leave special markers (e.g. `>>>` and `<<<`) that tell you where you (yep, you the programmer!) needs to manually fix. \n\n### What Causes A Merge Conflict\nAs you've learned, Git tracks _lines_ in files. A merge conflict will happen when _the exact same line(s)_ are changed in separate branches. For example, if you're on a `alternate-sidebar-style` branch and change the sidebar's heading to \"About Me\" but then on a different branch and change the sidebar's heading to \"Information About Me\", which heading should Git choose? You've changed the heading on both branches, so there's no way Git will know which one you actually want to keep. And it sure isn't going to just randomly pick for you!\n\nLet's force a merge conflict so we can learn to resolve it. Trust me, it's simple once you get the hang of it! Remember that a merge conflict occurs when Git isn't sure which line(s) you want to use from the branches that are being merged. So we need to edit _the same line on two different branches_...and then try to merge them.",
              "instructor_notes": ""
            },
            {
              "id": 266824,
              "key": "a40269b0-e25c-44a7-8154-7e80b0aae331",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Forcing A Merge Conflict!\n\nRemember that a merge conflict occurs when _the exact same line(s) are changed in separate branches_. Let's alter the page's heading on two different branches. So Let's:\n\n* change the heading on the `master` branch\n* create a `heading-update` branch _that's located on the commit right before the recently modified `master` branch_\n* change the _same_ heading\n* switch back to the `master` branch\n* merge in the `heading-update` branch",
              "instructor_notes": ""
            },
            {
              "id": 266819,
              "key": "a651eeaa-10ed-45e9-9f93-4576159d42f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change Heading On Branch 1\n\nSince the `master` branch is just a regular ol' branch like all the rest, let's just alter the heading while we're on the `master` branch. So change the `<h1>` heading from whatever you have it to something else. For me, the heading is currently \"Adventure\" on line 13, and I'm changing it to \"Quest\".\n\nOnce you've made the change, save the file and commit it to the repository.",
              "instructor_notes": ""
            },
            {
              "id": 266820,
              "key": "49709dc9-b85e-4f8d-b9ba-bd77c01e1846",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Change Heading On Branch 2\n\nNow we need to create a different branch and update the heading on that branch.\n\nNow this is important, we need to create a branch that's _not branching from the master branch_. If we make a change that branches _off_ of the master branch, then _that_ change will be \"ahead\" of this one and Git will just use that change instead of the one we just made on `master`. So we need to put the branch \"in the past\".\n\nLet's just create a branch that's on the commit right _before_ the most recent one. So use Git log to get the previous commit's SHA and create a branch on that commit. Here's what my Git log looks like after creating a `heading-update` branch:",
              "instructor_notes": ""
            },
            {
              "id": 266821,
              "key": "7edd79d5-434c-49fd-bd67-e06457b51e2a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4da49_ud123-l5-git-merge-conflict-prep/ud123-l5-git-merge-conflict-prep.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7edd79d5-434c-49fd-bd67-e06457b51e2a",
              "caption": "_The Terminal application showing the output of `git log --oneline --decorate --graph --all`. The `heading-update` branch is currently checked out._",
              "alt": "The Terminal application showing the output of `git log --oneline --decorate --graph --all`. The `heading-update` branch is currently checked out.",
              "width": 2314,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 266822,
              "key": "d457a2cd-ec3c-4993-86f6-1bd363278707",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Ok, now that we've got our branch created, we just need to update the heading, again. Now make sure you change _the exact same line_ that you changed on the `master` branch. I'm changing \"Adventure\" on line 13 to \"Crusade\".\n\nThen save the file and commit it to the repository.",
              "instructor_notes": ""
            },
            {
              "id": 266825,
              "key": "15bc28a8-36fc-42ae-a4ac-a773ca28a561",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4dbc5_ud123-l5-git-merge-conflict-prep2/ud123-l5-git-merge-conflict-prep2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/15bc28a8-36fc-42ae-a4ac-a773ca28a561",
              "caption": "_The Terminal application showing the output of `git log --oneline --decorate --graph --all`. Both the `master` branch and the `heading-update` branch alter the same line of the same file._",
              "alt": "The Terminal application showing the output of `git log --oneline --decorate --graph --all`. Both the `master` branch and the `heading-update` branch alter the same line of the same file.",
              "width": 2314,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 266826,
              "key": "2f5bdd8b-399e-459c-b3d3-34c87c859342",
              "title": "Prepped For Merge Conflict",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2f5bdd8b-399e-459c-b3d3-34c87c859342",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've made a commit on the `master` branch that changes the heading",
                "I've made a commit on the `heading-update` branch that _also_ changes the heading",
                "I am currently on the `master` branch"
              ],
              "positive_feedback": "Awesome! Let's proceed.",
              "video_feedback": null,
              "description": "Ok, we're just about to cause a merge conflict, make sure you're at the same place I am:"
            },
            {
              "id": 266827,
              "key": "a82efaec-85d6-44bc-b1eb-be7de9631995",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Make sure you're on the master branch (we could really do this on either branch, but I just have a habit of keeping the `master` branch the main one that other topic branches get merged into) and merge in the `heading-update` branch:\n\n```bash\n$ git merge heading-update\n```\n\nYou should see the following:",
              "instructor_notes": ""
            },
            {
              "id": 266828,
              "key": "d23607af-f999-4947-92d3-67868a354ec2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4dc22_ud123-l5-git-merge-conflict/ud123-l5-git-merge-conflict.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d23607af-f999-4947-92d3-67868a354ec2",
              "caption": "_The Terminal application showing the output of a merge that resulted in a merge conflict. The word \"CONFLICT\" appears and says that the conflict occurred in the index.html file._",
              "alt": "The Terminal application showing the output of a merge that resulted in a merge conflict. The word \"CONFLICT\" appears and says that the conflict occurred in the index.html file.",
              "width": 2314,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 266830,
              "key": "d5426353-0a77-44bb-8b3e-cf9d2b30551c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Merge Conflict Output Explained\n\nThe output that shows in the Terminal is:\n\n```bash\n$ git merge heading-update \nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n\nNotice that right after the `git merge heading-update` command, it tries merging the file that was changed on both branches (`index.html`), but that there was a conflict. Also, notice that it tells you what happened - \"Automatic merge failed; fix conflicts and then commit the result\".\n\nRemember our good friend `git status`? Well he'll come in really handy when working with merge conflicts.",
              "instructor_notes": ""
            },
            {
              "id": 266834,
              "key": "4777593d-4f8a-4036-ac9d-45f0d204ee52",
              "title": "Merge Conflict's Status?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4777593d-4f8a-4036-ac9d-45f0d204ee52",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Try running `git status` right now. Which of the following information does it show?",
                "answers": [
                  {
                    "id": "a1487199322718",
                    "text": "You have unmerged paths",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199330549",
                    "text": "Unmerged paths",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199331117",
                    "text": "fix conflicts and run \"git commit\"",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199331717",
                    "text": "use \"git add <file>...\" to mark resolution",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 266835,
              "key": "a68afd48-2bd0-4824-9b9f-d3e2eb0eba95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The `git status` output tells us to that the merge conflict is inside `index.html`. So check out that file in your code editor!",
              "instructor_notes": ""
            },
            {
              "id": 267148,
              "key": "e732b6a7-a3b9-49fb-9b2c-f0ae89d6895d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a74de1_ud123-l5-git-merge-conflict-indicators/ud123-l5-git-merge-conflict-indicators.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e732b6a7-a3b9-49fb-9b2c-f0ae89d6895d",
              "caption": "_Code editor showing the merge conflict indicators._",
              "alt": "Code editor showing the merge conflict indicators.",
              "width": 2542,
              "height": 1780,
              "instructor_notes": null
            },
            {
              "id": 266837,
              "key": "f3dd33f4-4879-4b04-b9b2-3db84c2b8e0a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Merge Conflict Indicators Explanation\n\nThe editor has the following merge conflict indicators:\n* `<<<<<<< HEAD` everything below this line (until the next indicator) shows you what's on the current branch\n* `||||||| merged common ancestors` everything below this line (until the next indicator) shows you what the original lines were\n* `=======` is the end of the original lines, everything that follows (until the next indicator) is what's on the branch that's being merged in\n* `>>>>>>> heading-update` is the ending indicator of what's on the branch that's being merged in (in this case, the `heading-update` branch)\n",
              "instructor_notes": ""
            },
            {
              "id": 266838,
              "key": "c5564b18-74b4-41c9-abe6-d0a35b7c0c96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resolving A Merge Conflict\n\nGit is using the merge conflict indicators to show you what lines caused the merge conflict on the two different branches as well as what the original line used to have. So to resolve a merge conflict, you need to:\n1. choose which line(s) to keep\n* remove all lines with indicators\n\nFor some reason, I'm not happy with the word \"Crusade\" right now, but \"Quest\" isn't all that exciting either. How about \"Adventurous Quest\" as a heading?!? ",
              "instructor_notes": ""
            },
            {
              "id": 267147,
              "key": "4e812d50-7ff5-43e5-88c4-302bf7d08512",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a74ced_ud123-l5-resolve-merge-conflict/ud123-l5-resolve-merge-conflict.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4e812d50-7ff5-43e5-88c4-302bf7d08512",
              "caption": "_Code editor where showing the merge conflict indicators being removed and the page heading being updated._",
              "alt": "Code editor where showing the merge conflict indicators being removed and the page heading being updated.",
              "width": 1160,
              "height": 780,
              "instructor_notes": null
            },
            {
              "id": 266840,
              "key": "5bba13df-c5f5-4990-a39b-41aaa23b8c8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Commit Merge Conflict\n\nOnce you've removed all lines with merge conflict indicators and have selected what heading you want to use, just save the file, add it to the staging index, and commit it! Just like with a regular merge, this will pop open your code editor for you to supply a commit message. Just like before, it's common to use the provided merge commit message, so after the editor opens, just close it to use the provided commit message.\n\nAnd that's it! Merge conflicts really aren't all that challenging once you understand what the merge conflict indicators are showing you.",
              "instructor_notes": ""
            },
            {
              "id": 266843,
              "key": "6e47c06c-5573-486b-9111-68134c4167aa",
              "title": "Can Merge Conflict Indicators Be Committed?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e47c06c-5573-486b-9111-68134c4167aa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You've made numerous commits so far in your exploration of Git. If a merge conflict occurs in a file and you edit the file, save it, stage it, and commit it but _forget_ to remove the merge conflict indicators, will Git commit the file?",
                "answers": [
                  {
                    "id": "a1487199561900",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199583358",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 266844,
              "key": "d6c2fd78-1b6a-455f-aa2a-5ded8d3958a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Merge Conflict Recap\n\nA merge conflict happens when the same line or lines have been changed on different branches that are being merged. Git will pause mid-merge telling you that there is a conflict and will tell you in what file or files the conflict occurred. To resolve the conflict in a file:\n* locate and remove all lines with merge conflict indicators\n* determine what to keep\n* save the file(s)\n* stage the file(s)\n* make a commit\n\nBe careful that a file might have merge conflicts in multiple parts of the file, so make sure you check the entire file for merge conflict indicators - a quick search for `<<<` should help you locate all of them.\n\n### Further Research\n* [Basic Merge Conflicts](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts) from the Git book\n* [How Conflicts Are Presented](https://git-scm.com/docs/git-merge#_how_conflicts_are_presented) from the Git docs",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 265012,
          "key": "36702d2f-8d5c-4019-ad0a-67fd0b54d46a",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "36702d2f-8d5c-4019-ad0a-67fd0b54d46a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 273033,
              "key": "c3fd9059-a22a-48b4-9a0f-c4478734ff16",
              "title": "Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ot4fPX1jzOI",
                "china_cdn_id": "ot4fPX1jzOI.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}