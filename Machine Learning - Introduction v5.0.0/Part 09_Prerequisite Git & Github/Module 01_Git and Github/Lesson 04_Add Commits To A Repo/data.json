{
  "data": {
    "lesson": {
      "id": 256063,
      "key": "5f584ce7-1b7b-4848-80c1-b559739ea363",
      "title": "Add Commits To A Repo",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "A repository is nothing without commits. In this lesson, you'll learn how to make commits, write descriptive commit messages, and verify the changes you're about to save to the repository.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/5f584ce7-1b7b-4848-80c1-b559739ea363/256063/1517446287903/Add%20Commits%20To%20A%20Repo%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/5f584ce7-1b7b-4848-80c1-b559739ea363/256063/1517446281468/Add%20Commits%20To%20A%20Repo%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 264907,
          "key": "c97e28fd-7fc6-435c-9953-4678b4728755",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c97e28fd-7fc6-435c-9953-4678b4728755",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 283733,
              "key": "f84e8dd9-9445-412a-8c12-67b8e95680a7",
              "title": "Adding Commits To A Repo - Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sLcOFQ4mGvo",
                "china_cdn_id": "sLcOFQ4mGvo.mp4"
              }
            }
          ]
        },
        {
          "id": 264908,
          "key": "85cd2f5e-a3a9-467f-9043-96d8b627787b",
          "title": "Git Add",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "85cd2f5e-a3a9-467f-9043-96d8b627787b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264916,
              "key": "472d5167-ce9e-4838-bb1b-b63a4c48281b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Move To Correct Project\n\nIf you've been following along, you should have two different directories with Git projects on your computer:\n* new-git-project - an empty directory that you converted to a Git repository using `git init`\n* course-git-blog-project - an existing blog project you retrieved using `git clone`\n\nTo avoid any confusion with existing commits, we'll be making our commits to the new-git-project Git repository.\n\nOn the Terminal, make sure you `cd` into the `new-git-project` directory. If you don't have a `new-git-project` directory, create it now. Once you're inside the directory, run the `git init` command. If you've already run `git init` before it's ok – running `git init` multiple times doesn't cause any problems since it just re-initializes the Git directory.",
              "instructor_notes": ""
            },
            {
              "id": 264917,
              "key": "cdcbff85-6406-4030-9c2c-3aa7f7d1dc9b",
              "title": "Proper Setup",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cdcbff85-6406-4030-9c2c-3aa7f7d1dc9b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've `cd`ed into the `new-git-project` directory on the Terminal",
                "I've run `git init` to create a new Git repository"
              ],
              "positive_feedback": "Perfect!",
              "video_feedback": null,
              "description": "Time to make sure we both have the same setup:"
            },
            {
              "id": 264918,
              "key": "2334d315-9ec4-4b88-a581-463c2f627551",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Your Terminal should look like this:",
              "instructor_notes": ""
            },
            {
              "id": 264919,
              "key": "eb679e04-a246-4c58-bd7c-0ab33282a732",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a384ae_ud123-l4-new-git-project/ud123-l4-new-git-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eb679e04-a246-4c58-bd7c-0ab33282a732",
              "caption": "_The Terminal application in the new-git-project directory._",
              "alt": "The Terminal application in the new-git-project directory.",
              "width": 2092,
              "height": 1174,
              "instructor_notes": null
            },
            {
              "id": 264920,
              "key": "c175bfbe-cef4-455f-8eeb-22c4659bfff2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Status Status Status\n\nI've said it a number of times already, but the `git status` command will be _extremely helpful_ in this lesson. You should have it as your goal to run the `git status` command both _before_ and _after_ any other Git command.\n\nLet's run it right now!",
              "instructor_notes": ""
            },
            {
              "id": 264921,
              "key": "a5241099-1c7f-4714-8edb-8b5e6f51824b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a384dc_ud123-l4-git-status/ud123-l4-git-status.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a5241099-1c7f-4714-8edb-8b5e6f51824b",
              "caption": "_The Terminal application showing the output of the `git status` command._",
              "alt": "The Terminal application showing the output of the `git status` command.",
              "width": 2122,
              "height": 1174,
              "instructor_notes": null
            },
            {
              "id": 264922,
              "key": "98c11094-7d9d-496f-af54-0b549ffbf578",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Status Output Review\n\nThis is the output:\n\n```bash\nOn branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```",
              "instructor_notes": ""
            },
            {
              "id": 412432,
              "key": "722a6d45-5a61-4d45-b7b4-78bdf38ff511",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ### 💡 Changes in Git v2.14  💡 \n\n> Remember that in Git version 2.14, the `git status` command changed the wording from \"Inital commit\" to the much clearer \"No commits yet\". So the output would be:\n\n> ```bash\n> On branch master\n>\n> No commits yet\n>\n> nothing to commit (create/copy files and use \"git add\" to track)\n```",
              "instructor_notes": ""
            },
            {
              "id": 412435,
              "key": "f9c6409d-b1f7-414f-b025-b611f23aed82",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice that last line – `nothing to commit (create/copy files and use \"git add\" to track)`. See how it's recommending the `git add` command? that's super helpful! The `git status` output will give you advice or hints as to what you should do next.\n\nLet's do what the feedback says and create some files.",
              "instructor_notes": ""
            },
            {
              "id": 264923,
              "key": "7cdf1792-f445-49f3-851f-36e1de15fbff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Create An HTML File\n\nFirst, create a file named `index.html`, and fill it with some starter code:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Blog Project</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"\">\n    <link rel=\"stylesheet\" href=\"css/app.css\">\n</head>\n<body>\n\n    <script src=\"js/app.js\"></script>\n</body>\n</html>\n```\n\nThings to note, the code references a CSS file and a JavaScript file.\n\nNow create the CSS and JavaScript files. You can leave both of these files empty. We'll add content to them in a bit.",
              "instructor_notes": ""
            },
            {
              "id": 264924,
              "key": "c83b76a7-f7a7-4434-a463-e62c7ff3840c",
              "title": "Verifying Project Setup",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c83b76a7-f7a7-4434-a463-e62c7ff3840c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created `index.html` and filled it with the starter code above (_and saved the file_)",
                "I have created a `css` folder and created `app.css` inside of it",
                "I have created a `js` folder and created `app.js` inside of it"
              ],
              "positive_feedback": "Awesome, great work!",
              "video_feedback": null,
              "description": "Before we proceed, let's make sure we have the same setup. Check off each of the following as you complete them:"
            },
            {
              "id": 264925,
              "key": "60e0ed30-db8d-437e-ae1d-7f09a0b99990",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quick Git Status Check\n\nWe just made a number of changes to the repository by adding files and content. It's time to do a quick check-in with Git:\n\n```bash\n$ git status\n```\n\nHere's what my Terminal displays:",
              "instructor_notes": ""
            },
            {
              "id": 264926,
              "key": "e0549d70-d19e-4b9f-b8b6-41a2e7b0d5b3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38587_ud123-l4-git-status-with-untracked/ud123-l4-git-status-with-untracked.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e0549d70-d19e-4b9f-b8b6-41a2e7b0d5b3",
              "caption": "_The Terminal application displays the index.html file, and the css and js folders in the new \"Untracked files\" section._",
              "alt": "The Terminal application displays the index.html file, and the css and js folders in the new \"Untracked files\" section",
              "width": 2400,
              "height": 1510,
              "instructor_notes": null
            },
            {
              "id": 264927,
              "key": "dbe8add5-c974-425d-9d0e-bc7133cf7e97",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Big Picture Review\n\nThat's really cool, isn't it! We haven't done anything specific with Git just yet, but it's watching this directory (since it's a Git project), and it knows that we've created a couple of new files. What's also pretty neat about the output of the `git status` command is that it's telling us that the files are untracked by Git.\n\nLet's do a quick review of what's going on and what we're about to do:\n* we have some new files that we want Git to start tracking\n* for Git to track a file, it needs to be committed to the repository\n* for a file to be committed, it needs to be in the Staging Index\n* the `git add` command is used to move files from the Working Directory to the Staging Index\n* there are currently three, untracked files in the Working Directory\n    * `index.html`\n    * `app.css` in the `css` directory\n    * `app.js` in the `js` directory\n\nSo the first step to getting any files committed to the repository is to add them from the Working Directory to the Staging Index. We will be using the `git add` command to move all three of these files to the Staging Index.",
              "instructor_notes": ""
            },
            {
              "id": 267941,
              "key": "e85d8a4f-a534-4a7d-853e-d45e3b1f1dd5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58ade4ac_ud123-l4-git-add-to-staging-recap/ud123-l4-git-add-to-staging-recap.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e85d8a4f-a534-4a7d-853e-d45e3b1f1dd5",
              "caption": "_The untracked HTML, CSS, and JavaScript files add from the Working Directory to the Staging Index._",
              "alt": "An animation of the untracked HTML, CSS, and JavaScript files add from the Working Directory to the Staging Index.",
              "width": 640,
              "height": 360,
              "instructor_notes": null
            },
            {
              "id": 264929,
              "key": "a252ccab-449b-4c7f-8312-924a932dd7b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Staging Files\n\nAlrighty, it's go time! Run the following command on the Terminal which uses `git add` to add `index.html` to the Staging Index:\n\n```bash\n$ git add index.html\n```\n\nNote - we are _only_ adding the `index.html` file. We'll add the CSS and JavaScript files in just a second.",
              "instructor_notes": ""
            },
            {
              "id": 264930,
              "key": "86c7c16c-4ed3-4702-9405-352754f008e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a386a6_ud123-l4-git-add/ud123-l4-git-add.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86c7c16c-4ed3-4702-9405-352754f008e0",
              "caption": "_The Terminal application. The command \"git add index.html\" is being typed out to add the file to the Staging Index._",
              "alt": "The Terminal application. The command \"git add index.html\" is being typed out to add the file to the Staging Index.",
              "width": 1228,
              "height": 654,
              "instructor_notes": null
            },
            {
              "id": 264932,
              "key": "8c0eb9a1-1fe5-4480-8fc8-ad86ce36eabf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Running the `git add` command produces no output (as long as there wasn't an error). So how do we have Git tell us what it did and has happened to the `index.html` file that was added? That's what `git status` does. You're probably sick of me stressing the importance of the `git status` command, but it's an extremely helpful command, especially if you're new to version control and/or the command line.\n\nLet's check out the status of the project:\n\n```bash\n$ git status\n```\n\nThis is the output I get:",
              "instructor_notes": ""
            },
            {
              "id": 264933,
              "key": "5cc4793f-b50c-48b7-9961-74b9f87c58fb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38755_ud123-l4-git-status-after-git-add/ud123-l4-git-status-after-git-add.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5cc4793f-b50c-48b7-9961-74b9f87c58fb",
              "caption": "_The Terminal application showing the result of running the `git status` command. It shows that index.html is now in the \"Changes to be committed\" category._",
              "alt": "The Terminal application showing the result of running the `git status` command. It shows that index.html is now in the \"Changes to be committed\" category.",
              "width": 2064,
              "height": 1510,
              "instructor_notes": null
            },
            {
              "id": 264934,
              "key": "a4572e82-3183-469c-ba4e-5146efc22dab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Changes To Be Committed\n\nThere's now a new section in the output of `git status` - the \"Changes to be committed\" area! This new \"Changes to be committed\" section displays files that are in the Staging Area! Right now it only displays the `index.html` file, so this file is the only item on the Staging Index. To continue this train of thought, if we made a commit right now, _only the index.html file would be committed_.",
              "instructor_notes": ""
            },
            {
              "id": 264935,
              "key": "5b0009ad-9fa3-4b6f-b660-362433918777",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> TIP: Did you also notice the helpful text that's located just beneath \"Changes to be committed\"? It says `(use \"git rm --cached <file>...\" to unstage)` This is a hint of what you should do if you accidentally ran `git add` and gave it the wrong file.\n\n> As a side note, `git rm --cached` is not like the shell's `rm` command. `git rm --cached` will not destroy any of your work; it just removes it from the Staging Index.\n\n> Also, this used the word \"unstage\". The act of moving a file from the Working Directory to the Staging Index is called \"staging\". If a file has been moved, then it has been \"staged\". Moving a file from the Staging Index _back_ to the Working Directory will unstage the file. If you read documentation that says \"stage the following files\" that means you should use the `git add` command.",
              "instructor_notes": ""
            },
            {
              "id": 264936,
              "key": "a499422b-df34-4fc0-9a55-6d6bc3dd6aeb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Stage Remaining Files\n\nThe `index.html` file has been staged. Let's stage the other two files. Now we _could_ run the following:\n\n```bash\n$ git add css/app.css js/app.js\n```\n\n...but that's a lot of extra typing. We could use a special command line character to help:\n\n### The Period `.`\nThe period refers to the current directory and can be used as a shortcut to refer to all files and directories (including all nested files and directories!).\n\n```bash\n$ git add css/app.css js/app.js\n# would become\n$ git add .\n```\n\nThe only thing to be careful of is that you might accidentally include more files than you meant to. Right now we _want_ both `css/app.css` and `js/app.js` to be staged, so running this command is fine right now. But let's say you added some images to an `img` directory but didn't want to stage them just yet. Running `git add .` _will_ stage them. If you do stage files that you didn't mean to, remember that `git status` will tell you the command to use to \"unstage\" files.\n\n## Stage The Remaining Files\nLet's use the shortcut to stage the remaining files:\n\n```bash\n$ git add .\n```\n\nAnd then a quick `git status`:",
              "instructor_notes": ""
            },
            {
              "id": 264937,
              "key": "ef5c6191-43a6-4c34-93d0-49d639235ccb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38858_ud123-l4-git-status-all-files/ud123-l4-git-status-all-files.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ef5c6191-43a6-4c34-93d0-49d639235ccb",
              "caption": "_The Terminal application showing the index.html, css/app.css, and js/app.js have been staged._",
              "alt": "The Terminal application showing the index.html, css/app.css, and js/app.js have been staged",
              "width": 1812,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 264938,
              "key": "3abe780a-231e-4632-b28f-80c2d16dee61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Add Recap\n\nThe `git add` command is used to move files from the Working Directory to the Staging Index.\n\n```bash\n$ git add <file1> <file2> … <fileN>\n```\n\nThis command:\n\n* takes a space-separated list of file names\n* alternatively, the period `.` can be used in place of a list of files to tell Git to add the current directory (and all nested files)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264909,
          "key": "95564c00-5060-45e7-aa24-e26fb9039f90",
          "title": "Git Commit",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "95564c00-5060-45e7-aa24-e26fb9039f90",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264939,
              "key": "636f709d-2359-4938-a881-cbe7b214845e",
              "title": "Quick Check In",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "636f709d-2359-4938-a881-cbe7b214845e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "the `index.html` file exists and has starter code in it",
                "the `app.css` file exists in the `css` folder",
                "the `app.js` file exists in the `js` folder",
                "all three files have been staged"
              ],
              "positive_feedback": "That's perfect!",
              "video_feedback": null,
              "description": "We're just about to make our first commit, so let's verify that our projects are set up the same way:"
            },
            {
              "id": 264940,
              "key": "97a3f8a1-7f78-4c1c-b14e-734d38ba447b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## One Last Git Status Check\n\nIf you haven't added any new files to the Working Directory or modified any of the existing files, nothing will have changed, but to make sure, let's run a quick `git status` again right before we make the commit just to make _absolutely sure_ the project is how we left it.",
              "instructor_notes": ""
            },
            {
              "id": 264941,
              "key": "bb91e468-2dcd-44da-9d23-befe9286dc90",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38858_ud123-l4-git-status-all-files/ud123-l4-git-status-all-files.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bb91e468-2dcd-44da-9d23-befe9286dc90",
              "caption": "_The Terminal application shows that the index.html, css/app.css, and js/app.js have been staged and are ready to be committed._",
              "alt": "The Terminal application shows that the index.html, css/app.css, and js/app.js have been staged and are ready to be committed.",
              "width": 1812,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 264945,
              "key": "02606695-24d9-42a3-a7d6-727d1826146e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Make A Commit\n\nOk, let's do it!\n\nTo make a commit in Git you use the `git commit` command, but don't run it just yet. Running this command will open the code editor that you configured way back in the first lesson. If you haven't run this command yet:\n\n```bash\n$ git config --global core.editor <your-editor's-config-went-here>\n```\n\n...go back to the Git configuration step and configure Git to use your chosen editor.\n\nIf you didn't do this step and you _already_ ran `git commit`, then Git _probably_ defaulted to using the \"Vim\" editor. Vim is a popular editor for people who have been using Unix or Linux systems forever, but it's not the friendliest for new users. It's definitely not in the scope of this course. Check out [this Stack Overflow post on how to get out of Vim](https://stackoverflow.com/questions/11828270/how-to-exit-the-vim-editor) and return to the regular command prompt.\n\nIf you _did_ configure your editor, then go ahead and make a commit using the `git commit` command:\n\n```bash\n$ git commit\n```\n\nRemember, your editor should pop open and you should see something like this:",
              "instructor_notes": ""
            },
            {
              "id": 264946,
              "key": "6890ce36-79b4-40b1-93a5-48049165d5f2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38a0b_ud123-l4-git-commit-editor/ud123-l4-git-commit-editor.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6890ce36-79b4-40b1-93a5-48049165d5f2",
              "caption": "_Code editor displaying the default commit edit message content and is waiting for a commit message to be supplied._",
              "alt": "Code editor displaying the default commit edit message content and is waiting for a commit message to be supplied.",
              "width": 2786,
              "height": 1592,
              "instructor_notes": null
            },
            {
              "id": 264950,
              "key": "ac1179fd-a717-4e48-be4a-a8352da30a7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terminal Hangs\n\nIf you switch back to the Terminal for a quick second, you'll see that the Terminal is chillin' out just waiting for you to finish with the code editor that popped up. You don't need to worry about this, though. Once we add the necessary content to the code editor and finally _close the code editor window_, the Terminal will unfreeze and return to normal.",
              "instructor_notes": ""
            },
            {
              "id": 264951,
              "key": "05f90ef4-c48a-4820-8cff-b6af5c180276",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38a39_ud123-l4-git-commit-terminal-hangs/ud123-l4-git-commit-terminal-hangs.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/05f90ef4-c48a-4820-8cff-b6af5c180276",
              "caption": "_The Terminal application showing `git commit` but it appears to be hanging and waiting for something._",
              "alt": "The Terminal application showing `git commit` but it appears to be hanging and waiting for something.",
              "width": 1812,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 264952,
              "key": "39b9bce3-64d0-4789-86c8-e223f0d23217",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code Editor Commit Message Explanation\n\nOk, switch back to the code editor. Here's what's showing in my editor:\n\n```bash\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n#\n# Initial commit\n#\n# Changes to be committed:\n#\tnew file:   css/app.css\n#\tnew file:   index.html\n#\tnew file:   js/app.js\n#\n```\n\nThe first paragraph is telling us exactly what we need to do - we need to supply a message for this commit. Also, any line that begins with the `#` character will be ignored. Farther down it says that this will be the initial commit. Lastly, it's giving us a list of the files that will be committed.\n\nSince this is the very first commit of the repository, we'll use the commit message \"Initial commit\". The text \"Initial commit\" isn't special, but it's the de facto commit message for the _very first_ commit. If you want to use something else, feel free!\n\nType out your commit message on the first line of the code editor:",
              "instructor_notes": ""
            },
            {
              "id": 264953,
              "key": "551511e6-b9c0-4846-8ad2-94038094637b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38aab_ud123-l4-git-commit-initial-commit/ud123-l4-git-commit-initial-commit.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/551511e6-b9c0-4846-8ad2-94038094637b",
              "caption": "_Code editor with the commit message entered on the first line._",
              "alt": "Code editor with the commit message entered on the first line.",
              "width": 2786,
              "height": 1592,
              "instructor_notes": null
            },
            {
              "id": 264954,
              "key": "394f2a21-a2ec-4ba1-9707-7bd50d6a7d22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Finish Committing\n\nNow save the file and close the editor window (closing just the pane/tab isn't enough, you need to close the code editor window that the `git commit` command opened).\n\nAwesome, now switch back to the Terminal and you should see something like the following:",
              "instructor_notes": ""
            },
            {
              "id": 264955,
              "key": "159ea814-3ac2-4364-af47-01289df4196d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38ad8_ud123-l4-git-commit-finished/ud123-l4-git-commit-finished.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/159ea814-3ac2-4364-af47-01289df4196d",
              "caption": "_The Terminal application after closing the code editor. It displays the SHA for the new commit as well as information about the commit like the files that were added and how many lines of code were added._",
              "alt": "The Terminal application after closing the code editor. It displays the SHA for the new commit as well as information about the commit like the files that were added and how many lines of code were added",
              "width": 1726,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 264960,
              "key": "1249b0ed-a6c8-4fc6-a357-33c76943a5ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## First Commit, Congrats!\n\nYou just made your first commit - woohoo! 🙌🏼  How does it feel? Was it more towards the awe-inspiring side or the anticlimactic? Honestly, when I made my first commit, I was a bit like:\n\n> \"Wait...is that it? You just add the files you want to have committed to the Staging Area, and then you run 'git commit'?\"\n\n...and the answer to my questions are \"Yes\" and \"Yes\". That's all there is to it. At first, version control seems like this overwhelming obstacle that one must overcome to become a true programmer/developer/designer/etc. But once you get a handle on the terminology (which *I* think is the most challenging part), then actually using version control isn't all that challenging.",
              "instructor_notes": ""
            },
            {
              "id": 264961,
              "key": "872ee194-e696-42f4-83b2-b78a5e3a4a8c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## Bypass The Editor With The `-m` Flag\n\n> TIP: If the commit message you're writing is short and you don't want to wait for your code editor to open up to type it out, you can pass your message directly on the command line with the `-m` flag:\n\n> ```bash\n$ git commit -m \"Initial commit\"\n```\n\n> In the example above, the text `\"Initial commit\"` is used as the commit message. Be aware that you can't provide a description for the commit, only the message part.",
              "instructor_notes": ""
            },
            {
              "id": 264964,
              "key": "ef546837-787f-4573-8906-35a5b0124972",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 2nd Commit - Add Changes\n\nWe've had a short breather, so let's make a second commit! Here, add this just inside the `body` tag in `index.html`:\n\n```html\n<header>\n    <h1>Expedition</h1>\n</header>\n```\n\nOk, now what do you do next? That's right, it's our good old friend `git status`!",
              "instructor_notes": ""
            },
            {
              "id": 264965,
              "key": "d31bec33-fc72-426f-b709-e341010b74e8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38bf1_ud123-l4-git-status-modified-files/ud123-l4-git-status-modified-files.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d31bec33-fc72-426f-b709-e341010b74e8",
              "caption": "_The Terminal application showing the result of the `git status` command. It displays a \"Changes not staged for commit\" section that includes the modified \"index.html\" file._",
              "alt": "The Terminal application showing the result of the `git status` command. It displays a \"Changes not staged for commit\" section that includes the modified \"index.html\" file.",
              "width": 2220,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 264966,
              "key": "838b6af1-580c-49d4-a681-4bef78d00a12",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> TIP: If you run `git status` but don't see that `index.html` has changed, make sure to save the file. I modify a file and then forget to save it - _all_ - _the_ - _time_! I like to think that forgetting to save a file after editing it is the mark of a true professional.",
              "instructor_notes": ""
            },
            {
              "id": 264967,
              "key": "fe9c0d5c-3157-4693-a575-aea2ed88e7dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Multipurpose Git Add\n\nSo we've modified our file. Git sees that it's been modified. So we're doing well so far. Now remember, to make a commit, the file or files we want committed need to be on the Staging Index. What command do we use to move files from the Working Directory to the Staging Index? You got it - `git add`!\n\nEven though we used `git add` to add _newly created files_ to the Staging Index, we use the same command to move _modified files_ to the Staging Index.\n\nUse the `git add` command to move the file over to the Staging Index, now. Verify that it's there with `git status`.",
              "instructor_notes": ""
            },
            {
              "id": 264968,
              "key": "d89375e5-849a-462a-a7e6-177df294bbc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Second Commit\n\nNow that we have a file with changes we can commit, let's make our second commit! Use the `git commit` command to make a commit. Use the commit message `Add header to blog`.\n\nNow you might be asking yourself, \"Why did Richard pick that as the commit message to use?\" or \"What makes a good commit message?\". These are fantastic questions that we'll be looking at in the next concept!",
              "instructor_notes": ""
            },
            {
              "id": 264970,
              "key": "cfcde463-ce54-4f6c-a199-7a171c9ae9e4",
              "title": "Will The File Be Committed?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cfcde463-ce54-4f6c-a199-7a171c9ae9e4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's say you have a personal blog and want to change the color of the article headings. You\n* edit the HTML files to give each heading a class\n* edit the CSS file to add the new class and give it a color\n* you save all files\n* you run `git commit` on the terminal\n\nWill your code editor open up to let you type out the commit message?",
                "answers": [
                  {
                    "id": "a1487113380630",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1487113398908",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264973,
              "key": "f5bea4e9-d88f-4ebf-89c8-4fd131c1569c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What To Include In A Commit\n\nI've been telling you what files to create, giving you the content to include, and telling you when you should make commits. But when you're on your own, how do you know what you should include in a commit and when/how often you should make commits?\n\n**The goal is that each commit has a single focus.** Each commit should record a single-unit change. Now this can be a bit subjective (which is totally fine), but each commit should make a change to just one aspect of the project.\n\nNow this isn't limiting the number of lines of code that are added/removed or the number of files that are added/removed/modified. Let's say you want to change your sidebar to add a new image. You'll probably:\n* add a new image to the project files\n* alter the HTML\n* add/modify CSS to incorporate the new image\n\nA commit that records all of these changes would be totally fine!\n\nConversely, a commit shouldn't include unrelated changes - changes to the sidebar _and_ rewording content in the footer. These two aren't related to each other and shouldn't be included in the same commit. Work on one change first, commit that, and then change the second one. That way, if it turns out that one change had a bug and you have to undo it, you don't have to undo the other change too.\n\nThe best way that I've found to think about what should be in a commit is to think, \"What if all changes introduced in this commit were erased?\". If a commit were erased, it should only remove one thing.",
              "instructor_notes": ""
            },
            {
              "id": 264975,
              "key": "9799a70e-cbe3-44fe-9c4b-54e9be350dd7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> Don't worry, commits don't get randomly erased.\n\n> In a later lesson, we'll look at using Git to undo changes made in commits and how to manually, carefully remove the last commit that was made.",
              "instructor_notes": ""
            },
            {
              "id": 264978,
              "key": "40fe3cce-61b4-4d64-bc63-9d73ede65a05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Commit Recap\n\nThe `git commit` command takes files from the Staging Index and saves them in the repository.\n\n```bash\n$ git commit\n```\n\nThis command:\n\n* will open the code editor that is specified in your configuration\n    * (check out the Git configuration step from the first lesson to configure your editor)\n\nInside the code editor:\n* a commit message must be supplied\n* lines that start with a `#` are comments and will not be recorded\n* save the file after adding a commit message\n* close the editor to make the commit\n\nThen, use `git log` to review the commit you just made!\n\n### Further Research\n* [Associating text editors with Git](https://help.github.com/articles/associating-text-editors-with-git/) from GitHub Help Docs\n* [Getting Started - First-Time Git Setup](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup) from Git book",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264910,
          "key": "0186fd0c-3929-4f0d-82bf-999ab24df61b",
          "title": "Commit Messages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0186fd0c-3929-4f0d-82bf-999ab24df61b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264981,
              "key": "7e790823-9da2-4a44-9022-e3770fbb6ebf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Good Commit Messages\n\nLet's take a quick stroll down Stickler Lane and ask the question: \n\n> How do I write a _good_ commit message? And why should I care?\n\nThese are _fantastic_ questions! I can't stress enough how important it is to spend some time writing a _good_ commit message.\n\nNow, what makes a \"good\" commit message? That's a great question and has been [written about](https://chris.beams.io/posts/git-commit/) [a number](https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c#.jwprsco0n) [of times](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html). Here are some important things to think about when crafting a good commit message:\n\n**Do**\n* do keep the message short (less than 60-ish characters)\n* do explain _what_ the commit does (not _how_ or _why_!)\n\n**Do not**\n* do not explain _why_ the changes are made (more on this below)\n* do not explain _how_ the changes are made (that's what `git log -p` is for!)\n* do not use the word \"and\"\n    * if you have to use \"and\", your commit message is probably doing too many changes - break the changes into separate commits\n    * e.g. \"make the background color pink _and_ increase the size of the sidebar\"\n\nThe best way that I've found to come up with a commit message is to finish this phrase, \"This commit will...\". However, you finish that phrase, use _that_ as your commit message. \n\nAbove all, _**be consistent**_ in how you write your commit messages!",
              "instructor_notes": ""
            },
            {
              "id": 264982,
              "key": "14bfb55f-b1fb-4927-8f23-88b7fc2d88af",
              "title": "Is This A Good Commit Message?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14bfb55f-b1fb-4927-8f23-88b7fc2d88af",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Reviewing the guidelines on what makes a good commit message, is the following commit message good?\n\n\"Update the footer to copyright information\"",
                "answers": [
                  {
                    "id": "a1487113793808",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1487113803413",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 264983,
              "key": "f57b9b57-6518-4a4c-8422-4e0965c94cd4",
              "title": "Is This A Good Commit Message? 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f57b9b57-6518-4a4c-8422-4e0965c94cd4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is the following a good commit message?\n\n\"Add a <p> tag to the body\"",
                "answers": [
                  {
                    "id": "a1487113839649",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1487113848784",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264984,
              "key": "54bf050b-fd83-47c3-8ed9-cdb9a1732d28",
              "title": "Is This A Good Commit Message? 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "54bf050b-fd83-47c3-8ed9-cdb9a1732d28",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is the following a good commit message?\n\n\"Add changes to app.js\"",
                "answers": [
                  {
                    "id": "a1487113935491",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1487113941609",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 264985,
              "key": "e2960abb-a9a4-4e20-9b40-926e00f49bdd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Explain the _Why_\n\nIf you need to explain _why_ a commit needs to be made, you can!\n\nWhen you're writing the commit message, the first line is the message itself. After the message, leave a blank line, and then type out the body or explanation including details about why the commit is needed (e.g. URL links).\n\nHere's what a commit message edit screen might look like:",
              "instructor_notes": ""
            },
            {
              "id": 264986,
              "key": "083d153f-78b8-4394-b3eb-847bd44bc4b4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38f2f_ud123-l4-git-commit-details-section/ud123-l4-git-commit-details-section.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/083d153f-78b8-4394-b3eb-847bd44bc4b4",
              "caption": "_Code editor showing the commit message edit window. A message has been typed, followed by a blank line, followed by the body of the commit._",
              "alt": "Code editor showing the commit message edit window. A message has been typed, followed by a blank line, followed by the body of the commit.",
              "width": 2740,
              "height": 1758,
              "instructor_notes": null
            },
            {
              "id": 264987,
              "key": "a522b2ca-1ddb-47b8-83ae-ac9639d03355",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This details section of a commit message _is_ included in the `git log`. To see a commit message with a body, check out the Blog project repo and look at commit `8a11b3f`.\n\nOnly the message (the first line) is included in `git log --oneline`, though!",
              "instructor_notes": ""
            },
            {
              "id": 264988,
              "key": "1a1b69c0-89e3-43f3-9119-657942c21fc4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Udacity's Commit Style Requirements\n\nAs I've mentioned, there are a number of ways to write commit messages. If you're working on a team, they might already have a predetermined way of writing commit messages. Here at Udacity, we have our own standard for commit messages. You can check it out on our [Git Commit Message Style Guide](https://udacity.github.io/git-styleguide/).\n\nIf you haven't chosen a commit message style, feel free to use ours. But if you're working on an existing project, use their existing style; it's much more important to be consistent with your actual team than to be consistent with us!",
              "instructor_notes": ""
            },
            {
              "id": 264989,
              "key": "43b164a5-8a1d-4f6a-87cd-a6ad37fccff9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Diff Up Next!\n\nIn the next section, we'll look at a new tool (with a familiar output!). This tool will tell us what changes we've made to files _before_ the files have been committed!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264911,
          "key": "60adab01-79c2-4bed-8ffc-384ad22a9e30",
          "title": "Git Diff",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "60adab01-79c2-4bed-8ffc-384ad22a9e30",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 264990,
              "key": "5d5452f2-1548-4cf7-aebb-fce6c20fe408",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why Do We Need This\n\nYou might be like me where I start work on the next feature to my project at night, but then go to bed before I actually finish. Which means that, when I start working the next day, there are uncommitted changes. This is fine because I haven't finished the new feature, but I can't remember exactly what I've done since my last commit. `git status` will tell us what files have been changed, but not what those changes actually were.\n\nThe `git diff` command is used to find out this information!",
              "instructor_notes": ""
            },
            {
              "id": 264991,
              "key": "24cf4868-c4e0-4db0-a665-c2ed2c46b90f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git diff`\n\nThe `git diff` command can be used to see changes that have been made but haven't been committed, yet.\n\n```bash\n$ git diff\n```\n\nTo see `git diff` in action, we need some uncommitted changes! In `index.html`, let's reword the heading. Change the heading from \"Expedition\" to \"Adventure\". Save the file and run `git diff` on the Terminal.\n\nYou should see the following:",
              "instructor_notes": ""
            },
            {
              "id": 264992,
              "key": "1a699aaa-b309-4a02-a4a1-5a67de6f61f7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3901f_ud123-l4-git-diff/ud123-l4-git-diff.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1a699aaa-b309-4a02-a4a1-5a67de6f61f7",
              "caption": "_The Terminal application showing the output of the `git diff` command._",
              "alt": "The Terminal application showing the output of the `git diff` command.",
              "width": 2094,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 264993,
              "key": "334da9e2-fca0-46f3-9986-d72a7a48f62d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Wow, doesn't that look familiar! It's the same output that we say with `git log -p`! Wanna know a secret? `git log -p` uses `git diff` under the hood. So you've actually already learned how to read the output of `git diff`!\n\nIf you don't remember what the different sections are, check out the Annotated \"git log -p\" Output from the previous lesson.",
              "instructor_notes": ""
            },
            {
              "id": 431184,
              "key": "98ea301f-54d9-4cab-a274-77c89cce45e0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> 💡 These Changes Were Not Committed 💡\n\n> The changes in this section were used to demo the output of `git diff`. They were not committed to the repository. If you'd like, you can definitely commit the changes to the repository, just know that your `git log` will look slightly different from mine because it includes this extra commit.",
              "instructor_notes": ""
            },
            {
              "id": 264994,
              "key": "451dd827-a9ee-4e85-8c02-a481a9516af1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Diff Recap\n\nTo recap, the `git diff` command is used to see changes that have been made but haven't been committed, yet:\n\n```bash\n$ git diff\n```\n\nThis command displays:\n\n* the files that have been modified\n* the location of the lines that have been added/removed\n* the actual changes that have been made\n\n\n### Further Research\n* [git diff](https://git-scm.com/docs/git-diff) from the Git Docs",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264912,
          "key": "d4275710-06eb-431c-bec6-13a202f1dfbb",
          "title": "Having Git Ignore Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4275710-06eb-431c-bec6-13a202f1dfbb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 265003,
              "key": "93fada20-d94d-4137-83b5-9cc8237788b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why Should Files Be Ignored\n\nRemember a couple sections back when we were learning about `git add`? Instead of adding the files one by one, there was a special character that we could use to indicate the current directory and all subdirectories. Do you remember what that character is?\n\nThat's right, the period (`.`)!\n\n### The Problem\nLet's say you add a file like a Word document to the directory where your project is stored _but don't want it added to the repository_. (You can simulate adding a Word document by running `touch project.docx`) Git will see this new file, so if you run `git status` it'll show up in the list of files.",
              "instructor_notes": ""
            },
            {
              "id": 265004,
              "key": "e7b3dd79-fd1f-4754-a717-46464d4075c8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3936f_ud123-l4-git-ignore-word-doc/ud123-l4-git-ignore-word-doc.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e7b3dd79-fd1f-4754-a717-46464d4075c8",
              "caption": "_The Terminal application showing the output of the `git status` command. The output shows a new Word document that is in Git's \"Untracked files\" section._",
              "alt": "The Terminal application showing the output of the `git status` command. The output shows a new Word document that is in Git's \"Untracked files\" section.",
              "width": 2272,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 265005,
              "key": "5f548593-46f1-4947-a98a-15bb261a1bcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The potential problem with having this file in your project is that, because `git add .` adds _all_ files, the Word document might get accidentally committed to the repository.",
              "instructor_notes": ""
            },
            {
              "id": 264996,
              "key": "cdc3b9bc-fb03-4b0c-bb91-08b4ea59136c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Ignore\n\nIf you want to keep a file in your project's directory structure but make sure it isn't accidentally committed to the project, you can use the specially named file, `.gitignore` (note the dot at the front, it's important!). Add this file to your project in the same directory that the hidden `.git` directory is located. All you have to do is list the _names_ of files that you want Git to ignore (not track) and it will ignore them.\n\nLet's try it with the \"project.docx\" file. Add the following line inside the `.gitignore` file:\n\n```bash\nproject.docx\n```\n\nNow run `git status` and check its output:",
              "instructor_notes": ""
            },
            {
              "id": 264997,
              "key": "c06bf34c-6a58-4ed3-978a-7c7d5e9a1c78",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39121_ud123-l4-git-gitignore/ud123-l4-git-gitignore.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c06bf34c-6a58-4ed3-978a-7c7d5e9a1c78",
              "caption": "_The Terminal application showing the output of `git status`. The Word document is no longer listed as an untracked file. The new \".gitignore\" file is listed, though._",
              "alt": "The Terminal application showing the output of `git status`.",
              "width": 2272,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 264998,
              "key": "935be67c-3f9f-427e-aa6c-6e3be2e0a2b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Git knows to look at the contents of a file with the name `.gitignore`. Since it saw \"project.docx\" in it, it ignored that file and doesn't show it in the output of `git status`.",
              "instructor_notes": ""
            },
            {
              "id": 264999,
              "key": "4d7db4de-8021-48d6-bc86-a8377014777e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Globbing Crash Course\n\nLet's say that you add 50 images to your project, but want Git to ignore all of them. Does this mean you have to list each and every filename in the `.gitignore` file? Oh gosh no, that would be crazy! Instead, you can use a concept called [globbing](https://en.wikipedia.org/wiki/Glob_(programming).\n\nGlobbing lets you use special characters to match patterns/characters. In the `.gitignore` file, you can use the following:\n* blank lines can be used for spacing\n* `#` - marks line as a comment\n* `*` - matches 0 or more characters\n* `?` - matches 1 character\n* `[abc]` - matches a, b, _or_ c\n* `**` - matches nested directories - `a/**/z` matches\n    * a/z\n    * a/b/z\n    * a/b/c/z\n\nSo if all of the 50 images are JPEG images in the \"samples\" folder, we could add the following line to `.gitignore` to have Git ignore all 50 images.\n\n```bash\nsamples/*.jpg\n```",
              "instructor_notes": ""
            },
            {
              "id": 265000,
              "key": "22075c4b-141c-4b3b-a388-709967aa1242",
              "title": "What File Will Be Ignored?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "22075c4b-141c-4b3b-a388-709967aa1242",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following files will be ignored if `*.png` is entered into the `.gitignore` file?",
                "answers": [
                  {
                    "id": "a1487114697919",
                    "text": "ocean.jpg",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114706389",
                    "text": "trees.png",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114706928",
                    "text": "png-format.pdf",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114707413",
                    "text": "not-a-png.jpeg",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114733254",
                    "text": "bg-pattern.png",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114733827",
                    "text": "logo.gif",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114747731",
                    "text": "LOUDFILE.PNG",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 265001,
              "key": "d4f08f01-3f4f-4de2-8ed6-a243783482cc",
              "title": "What's That Character?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d4f08f01-3f4f-4de2-8ed6-a243783482cc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you ask Git to ignore \"be?rs\", which of the following filenames will be ignored?",
                "answers": [
                  {
                    "id": "a1487114875523",
                    "text": "bears",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114901980",
                    "text": "beavers",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114902578",
                    "text": "BeArS",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114903061",
                    "text": "beers",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114918576",
                    "text": "boars",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 265002,
              "key": "400b8875-dcae-4105-b479-bccd3916847f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Git Ignore Recap\n\nTo recap, the `.gitignore` file is used to tell Git about the files that Git should not track. This file should be placed in the same directory that the `.git` directory is in.\n\n### Further Research\n\n* [Ignoring files](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files) from the Git Book\n* [gitignore](https://git-scm.com/docs/gitignore#_pattern_format) from the Git Docs\n* [Ignoring files](https://help.github.com/articles/ignoring-files/) from the GitHub Docs\n* [gitignore.io](https://www.gitignore.io/)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 264913,
          "key": "bc28a6df-9181-44cc-b2ff-c0e4afe71130",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bc28a6df-9181-44cc-b2ff-c0e4afe71130",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 273027,
              "key": "d4318258-db47-4e07-b864-e89461518c07",
              "title": "Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5eyvsMvAPYs",
                "china_cdn_id": "5eyvsMvAPYs.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}