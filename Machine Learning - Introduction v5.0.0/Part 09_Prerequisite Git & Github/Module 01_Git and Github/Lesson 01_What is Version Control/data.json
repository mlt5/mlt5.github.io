{
  "data": {
    "lesson": {
      "id": 256060,
      "key": "1b369991-f1ca-4d6a-ba8f-e8318d76322f",
      "title": "What is Version Control?",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Version control is an incredibly important part of a professional programmer's life. In this lesson, you'll learn about the benefits of version control and install the version control tool Git!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/1b369991-f1ca-4d6a-ba8f-e8318d76322f/256060/1517447659693/What%20is%20Version%20Control%3F%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/1b369991-f1ca-4d6a-ba8f-e8318d76322f/256060/1517447637523/What%20is%20Version%20Control%3F%20Subtitles.zip"
          },
          {
            "name": "Git Key Terms",
            "uri": "https://video.udacity-data.com/topher/2017/June/59399479_ud123-git-keyterms/ud123-git-keyterms.pdf"
          },
          {
            "name": "udacity-terminal-config",
            "uri": "https://video.udacity-data.com/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 256066,
          "key": "06b0775b-b703-45ca-9935-939487706728",
          "title": "What is Version Control",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "06b0775b-b703-45ca-9935-939487706728",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 283727,
              "key": "aeacb2a2-ea5d-4ece-aaa5-f7d66b95d2da",
              "title": "Gitfinal L1 01 Welcome",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lbR82UD5F0c",
                "china_cdn_id": "lbR82UD5F0c.mp4"
              }
            },
            {
              "id": 262234,
              "key": "4a347c1c-0515-4cbd-83e3-fab564aec592",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I just said \"version control\". Now since you're in this course, you might already know a bit about version control. But if you don't, a handy trick I've learned is to try reading the words in reverse - so \"version control\" would become \"control version\"! So a Version Control System is just software that helps you control (or manage) the different versions...of something (typically source code).\n\n### Further Research\n[Version Control on Wikipedia](https://en.wikipedia.org/wiki/Version_control)",
              "instructor_notes": ""
            },
            {
              "id": 283728,
              "key": "9ed8aa88-4de3-4fbb-a27f-95d55820e159",
              "title": "Gitfinal L1 03 Version Control Systems",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b7TjsVoTo3Q",
                "china_cdn_id": "b7TjsVoTo3Q.mp4"
              }
            },
            {
              "id": 262235,
              "key": "78def38a-3b8e-425a-8870-c85cb694651f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## VCS Info\n\nThere are [a number of Version Control Systems out there](https://en.wikipedia.org/wiki/List_of_version_control_software). This alone should prove that version control is incredibly important. Three of the most popular version control systems are:\n* [Git](https://git-scm.com/)\n* [Subversion](https://subversion.apache.org/)\n* [Mercurial](https://www.mercurial-scm.org/)\n\nThere are two main types of version control system models:\n* the *centralized model* - all users connect to a central, master repository\n* the *distributed model* - each user has the entire repository on their computer\n\n### Further Research\n* [Centralized vs. DVCS from the Atlassian Blog](http://blogs.atlassian.com/2012/02/version-control-centralized-dvcs/)\n* [Distributed version control on Wikipedia](https://en.wikipedia.org/wiki/Distributed_version_control)",
              "instructor_notes": ""
            },
            {
              "id": 262238,
              "key": "c17d1879-aed5-4310-a2f3-2a54e68b6154",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n\nRemember that the main point of a version control system is to help you maintain a detailed history of the project as well as the ability to work on different versions of it. Having a detailed history of a project is important because it lets you see the progress of the project over time. If needed, you can also jump back to any point in the project to recover data or files.\n\nIn this course, we'll be using Git which is a distributed version control system. You might be surprised to discover that you're already using version control all the time!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 256067,
          "key": "68d60539-7530-4c25-b038-41c81bc677c2",
          "title": "Version Control In Daily Use",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68d60539-7530-4c25-b038-41c81bc677c2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 262239,
              "key": "791549b8-e4ae-4a5c-a52e-9bbce0f66698",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Version Control Is Everywhere\n\nMy job revolves around working with documents. I create new documents all the time, I fill them with information (hopefully informative information!) and then edit...edit...edit! Is your job like this? Perhaps it's not documents of text, but you're probably working with data in some form or another that changes over time.\n\nNow you might not think that you're using version control when working with documents, and you'd be right...sort of. You're not _actively_ maintaining different versions of a document as you write it. But that doesn't mean there aren't different versions of the document. The computer is keeping track of the different versions for you!\n\nDon't believe me? Aside from pondering your propensity towards doubting, let's prove I'm right:\n\n* open up your favorite text editor/code editor\n* type some content (how about \"version control is dull!\")\n* change one of the words in you wrote (e.g. change \"dull\" to \"life-changing awesome\")\n* now (here it comesâ€¦!) press `cmd` + `z` or `ctrl` + `z`\n\nðŸ’¥ Version control in action! (See?...told you I wasn't lying) I bet you use the \"undo\" command all the time. I know that I sure do!\n\nPractically every application I've ever used has an undo feature. You can think of this as a form of version control, but it's a rather limited form of version control. Let's look at a more powerful form by checking out a Google Docs document.",
              "instructor_notes": ""
            },
            {
              "id": 267162,
              "key": "f340e851-4988-4b0b-994a-6691a2793d65",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a75370_ud123-l1-git-course-outline/ud123-l1-git-course-outline.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f340e851-4988-4b0b-994a-6691a2793d65",
              "caption": "_The Google Doc outline for this Git Course._",
              "alt": "A Screenshot of The Google Doc outline for this Git Course",
              "width": 2350,
              "height": 1612,
              "instructor_notes": null
            },
            {
              "id": 262241,
              "key": "0d824c71-5b73-45cd-987a-fdfc7c93e672",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you've ever written in a Google doc, have you noticed the small gray text at the top that tells you about the status of the document? Ever noticed that as you type, it's actively saving the document? Then, when you finish typing, it tells you that the document has saved.",
              "instructor_notes": ""
            },
            {
              "id": 267166,
              "key": "4905e8cf-e0d0-43b9-8989-c702b5f86f5b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a757b5_ud123-l1-google-docs-saving-progress/ud123-l1-google-docs-saving-progress.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4905e8cf-e0d0-43b9-8989-c702b5f86f5b",
              "caption": "_Status of a Google Docs document. The status says \"Savingâ€¦\" while the document is being edited, and changes to \"All changes saved in Drive\" after the content is saved._",
              "alt": "Status of a Google Docs document. The status says \"Savingâ€¦\" while the document is being edited, and changes to \"All changes saved in Drive\" after the content is saved.",
              "width": 1064,
              "height": 696,
              "instructor_notes": null
            },
            {
              "id": 262244,
              "key": "c849f345-eae7-4775-8597-255ef7d1fcef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The _real_ question is, did you know that is a link that you can click on? Wanna see for yourself? Try it out in one of your own Google Docs.\n\nClicking on the link takes you to a \"Revision history\" page. (Ooo! Did you notice the word \"revision\"? The word \"version\" is a synonym for \"revision\"!)",
              "instructor_notes": ""
            },
            {
              "id": 273005,
              "key": "5ba91ff9-f3e4-4844-9aa9-2af3be2878db",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 11 Google Docs Revision History Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "GcvvbdKEchk",
                "china_cdn_id": "GcvvbdKEchk.mp4"
              }
            },
            {
              "id": 262246,
              "key": "1b2ee49b-20e2-46ae-b63b-28b3adcb436a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Revision History Isn't Powerful Enough \n\nGoogle Docs' Revision history page is incredibly powerful! I've used it on several occasions to salvage text that I'd written at one point, erased, and then realized I actually _did_ want to keep.\n\nBut for all its ability, it's not as powerful as we'd like. What's it missing? A few that I can think of are:\n* the ability to label a change\n* the ability to give a detailed explanation of why a change was made\n* the ability to move between different versions of the same document\n* the ability to undo change A, make edit B, then get back change A without affecting edit B\n\nThe version control tool, Git, can do all of those things - _and more_!!! (bet you didn't see _that_ coming!) So have I sold you yet on the awesomeness that is Git? I hope so, cause we're about to dive into it in the next section. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 262247,
          "key": "5f703930-a95e-47f0-a56b-702ed3a93741",
          "title": "Git and Version Control Terminology",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f703930-a95e-47f0-a56b-702ed3a93741",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Git Terms PDF",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31eb5_ud123-git-keyterms/ud123-git-keyterms.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 283729,
              "key": "5c1ef9e3-2b22-4539-a418-6890e5f4045b",
              "title": "Gitfinal L1 13 Git'S Terminology",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bf26adzeqMM",
                "china_cdn_id": "bf26adzeqMM.mp4"
              }
            },
            {
              "id": 278854,
              "key": "5191cec1-dfc6-4b44-94b4-70058a4cbef7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can find the Terminology handout at the bottom of the page. The file is named **Git Key Terms** and is in the Course Materials section.",
              "instructor_notes": ""
            },
            {
              "id": 262249,
              "key": "02d99b8b-b82c-4e15-8388-d96a0770a077",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terminology\n\n## Version Control System / Source Code Manager\nA **version control system** (abbreviated as **VCS**) is a tool that manages different versions of source code. A **source code manager** (abbreviated as **SCM**) is another name for a version control system.\n\nGit is an SCM (and therefore a VCS!). The URL for the Git website is https://git-scm.com/ (see how it has \"SCM\" directly in its domain!).\n\n## Commit\nGit thinks of its data like a set of snapshots of a mini filesystem. Every time you **commit** (save the state of your project in Git), it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. You can think of it as a save point in a game - it saves your project's files and any information about them.\n\nEverything you do in Git is to help you make commits, so a commit is _the_ fundamental unit in Git. \n\n## Repository / repo\nA **repository** is a directory which contains your project work, as well as a few files (hidden by default on Mac OS X) which are used to communicate with Git. Repositories can exist either locally on your computer or as a remote copy on another computer. A repository is made up of commits.\n\n## Working Directory\nThe **Working Directory** is the files that you see in your computer's file system. When you open your project files up on a code editor, you're working with files in the Working Directory.\n\nThis is in contrast to the files that have been saved (in commits!) in the repository.\n\nWhen working with Git, the Working Directory is also different from the command line's concept of the  _current working directory_ which is the directory that your shell is \"looking at\" right now.\n\n## Checkout\nA **checkout** is when content in the repository has been copied to the Working Directory.\n\n## Staging Area / Staging Index / Index\nA file in the Git directory that stores information about what will go into your next commit. You can think of the **staging area** as a prep table where Git will take the next commit. Files on the Staging Index are poised to be added to the repository.\n\n## SHA\nA **SHA** is basically an ID number for each commit. Here's what a commit's SHA might look like: `e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6`.\n\nIt is a 40-character string composed of characters (0â€“9 and aâ€“f) and calculated based on the contents of a file or directory structure in Git. \"SHA\" is shorthand for \"Secure Hash Algorithm\". If you're interested in learning about hashes, check out our [Intro to Computer Science course](https://www.udacity.com/course/intro-to-computer-science--cs101).\n\n\n## Branch\nA **branch** is when a new line of development is created that diverges from the main line of development. This alternative line of development can continue without altering the main line.\n\nGoing back to the example of save point in a game, you can think of a branch as where you make a save point in your game and then decide to try out a risky move in the game. If the risky move doesn't pan out, then you can just go back to the save point. The key thing that makes branches incredibly powerful is that you can make save points on one branch, and then switch to a different branch and make save points there, too. \n\nWith this terminology in mind, let's take a high-level look at how we'll be using Git by looking at the typical workflow when working with version control.",
              "instructor_notes": ""
            },
            {
              "id": 273007,
              "key": "a3a2cbe9-97a0-4718-afe1-97c6c083b179",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 15 Git The Big Picture",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dVil8e0yptQ",
                "china_cdn_id": "dVil8e0yptQ.mp4"
              }
            },
            {
              "id": 262251,
              "key": "d115f7e2-a001-4ca1-a201-6941a4b8ec95",
              "title": "What Gets Committed",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d115f7e2-a001-4ca1-a201-6941a4b8ec95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The HTML file has HTML and CSS changes on the Staging Index and an additional HTML change in the Working Directory. From what you've learned so far with how committing works, what do you think will get committed if a commit were made right now?",
                "answers": [
                  {
                    "id": "a1485546208838",
                    "text": "only the HTML file changes on the Staging Index",
                    "is_correct": false
                  },
                  {
                    "id": "a1485546224180",
                    "text": "only the CSS file changes on the Staging Index",
                    "is_correct": false
                  },
                  {
                    "id": "a1485546229305",
                    "text": "the HTML and CSS file changes on the Staging Index",
                    "is_correct": true
                  },
                  {
                    "id": "a1485546237338",
                    "text": "the HTML file changes in _both_ the Working Directory _and_ the Staging Index",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 273008,
              "key": "7f9f44a7-d8c4-4b55-8968-49d77f20676d",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 17 Git The Big Picture 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rFtUkk-sCqw",
                "china_cdn_id": "rFtUkk-sCqw.mp4"
              }
            },
            {
              "id": 273009,
              "key": "0bbf17f7-de48-41a8-9a51-f9ef57c2be63",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 18 Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xqD9ImXXXHk",
                "china_cdn_id": "xqD9ImXXXHk.mp4"
              }
            }
          ]
        },
        {
          "id": 262254,
          "key": "63a6f935-dea7-43c2-aaa3-61deea5070c8",
          "title": "Mac/Linux Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63a6f935-dea7-43c2-aaa3-61deea5070c8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "udacity-terminal-config.zip",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 262256,
              "key": "8b2451b4-bb8f-4559-afeb-657c15e2e49a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Installing Git\n\nGit is actually installed on MacOS, but we'll be reinstalling it so that we'll have the newest version:\n1. go to https://git-scm.com/downloads\n* download the software for Mac\n* install Git choosing all of the default options\n\nOnce everything is installed, you should be able to run `git` on the command line. If it displays the usage information, then you're good to go!\n\nIf you run into any issues, please remember to take advantage of [Knowledge](https://knowledge.udacity.com) and the community in your Student Hub.",
              "instructor_notes": ""
            },
            {
              "id": 262257,
              "key": "92a9634c-3f0a-4335-b665-d26a012b1e51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Configuring Mac's Terminal\n\nWe're about to configure the Terminal to display helpful information when in a directory that's under version control. _This is an optional step!_ You do not need to re-configure your terminal for Git to work. You can complete the entire course without reconfiguring it. However, reconfiguring the Terminal makes it significantly easier to use.\n\nIf you choose to configure your Terminal, here's what it should look like when you're finished.",
              "instructor_notes": ""
            },
            {
              "id": 267183,
              "key": "79f44c8c-6841-46e8-bb66-e9280a5cafe4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a76894_ud123-l1-terminal-config-mac/ud123-l1-terminal-config-mac.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/79f44c8c-6841-46e8-bb66-e9280a5cafe4",
              "caption": "_The terminal application on MacOS. The terminal has been configured to display version control information._",
              "alt": "The terminal application on MacOS. The terminal has been configured to display version control information.",
              "width": 842,
              "height": 569,
              "instructor_notes": null
            },
            {
              "id": 262259,
              "key": "9d01aeac-8570-4018-9dc5-dfba363fccc9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Configuration Steps\n\nTo configure the terminal, we'll perform the following steps:\n1. download the zipped file from the Resources pane, or the bottom of this page\n* move the directory `udacity-terminal-config` to your home directory and name it `.udacity-terminal-config` (there's a dot at the front, now!)\n* move the `bash_profile` file to your home directory and name it `.bash_profile` (there's a dot at the front, now!)\n  * if you _already_ have a `.bash_profile` file in your home directory, transfer the content from the downloaded `bash_profile` to your existing `.bash_profile` ",
              "instructor_notes": ""
            },
            {
              "id": 273010,
              "key": "6d1a1dbf-d80b-42c3-a8c9-28023c62685e",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 23 Configure Terminal",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "h00n9QLfbqU",
                "china_cdn_id": "h00n9QLfbqU.mp4"
              }
            },
            {
              "id": 262261,
              "key": "ad3d8275-5c17-42e4-9017-e0ac9c8e0a88",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## First Time Git Configuration\nBefore you can start using Git, you need to configure it. Run each of the following lines on the command line to make sure everything is set up.\n\n```bash\n# sets up Git with your name\ngit config --global user.name \"<Your-Full-Name>\"\n\n# sets up Git with your email\ngit config --global user.email \"<your-email-address>\"\n\n# makes sure that Git output is colored\ngit config --global color.ui auto\n\n# displays the original state in a conflict\ngit config --global merge.conflictstyle diff3\n\ngit config --list\n```\n\n### Git & Code Editor\nThe last step of configuration is to get Git working with your code editor. Below are three of the most popular code editors. If you use a different editor, then do a quick search on Google for \"associate X text editor with Git\" (replace the X with the name of your code editor).\n\n### Atom Editor Setup\n```bash\ngit config --global core.editor \"atom --wait\"\n```\n\n### Sublime Text Setup\n```bash\ngit config --global core.editor \"'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w\"\n```\n\n### VSCode Setup\n```bash\ngit config --global core.editor \"code --wait\"\n```\n\nIf you have any questions, post them on the forum.",
              "instructor_notes": ""
            },
            {
              "id": 262264,
              "key": "63ec1410-2bf9-4fa9-9bb8-bcd8c24167cb",
              "title": "Everything Is All Set Up",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "63ec1410-2bf9-4fa9-9bb8-bcd8c24167cb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've installed Git",
                "I've configured Git with my username",
                "I've configured Git with my email",
                "I've configured Git to use my chosen editor"
              ],
              "positive_feedback": "Fantastic work!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 262255,
          "key": "8a5af628-7a18-49cf-bbc8-02691762f862",
          "title": "Windows Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a5af628-7a18-49cf-bbc8-02691762f862",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "udacity-terminal-config.zip",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 262266,
              "key": "e3c2d9b8-c130-4bf0-90fd-26732bff8d42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Installing Git\n\nTo download Git:\n1. go to https://git-scm.com/downloads\n* download the software for Windows\n* install Git choosing all of the default options\n\nOnce everything is installed, you should be able to run `git` on the command line. If it displays the usage information, then you're good to go!\n\nIf you run into any issues, please remember to take advantage of [Knowledge](https://knowledge.udacity.com/) and the community in your Study Group.",
              "instructor_notes": ""
            },
            {
              "id": 262267,
              "key": "fa3446f7-6961-4703-8736-f55b294c017e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Configuring the Command Prompt on Windows\n\nWe're about to configure the Command Prompt to display helpful information when in a directory that's under version control. _This is an optional step!_ You do not need to re-configure your Command Prompt for Git to work. You can complete the entire course without reconfiguring it. However, reconfiguring the Command Prompt makes it significantly easier to use.\n\nIf you choose to configure your Command Prompt, here's what it should look like when you're finished.",
              "instructor_notes": ""
            },
            {
              "id": 267184,
              "key": "23134e2a-ada3-4325-8f0e-90800390fbae",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a768b5_ud123-l1-terminal-config-windows/ud123-l1-terminal-config-windows.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/23134e2a-ada3-4325-8f0e-90800390fbae",
              "caption": "_The Command Prompt application on Windows. The Command Prompt has been configured to display version control information._",
              "alt": "The Command Prompt application on Windows. The Command Prompt has been configured to display version control information.",
              "width": 1806,
              "height": 990,
              "instructor_notes": null
            },
            {
              "id": 273011,
              "key": "8b6d8777-a73a-42c2-9be1-d25e9d637fbf",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 30 Configure Terminal",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CCYjHfBk9hw",
                "china_cdn_id": "CCYjHfBk9hw.mp4"
              }
            },
            {
              "id": 262265,
              "key": "4e9228e2-b4e9-440a-9a2b-ca8f1fbe69ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## First Time Git Configuration\nBefore you can start using Git, you need to configure it. Run each of the following lines on the command line to make sure everything is set up.\n\n```bash\n# sets up Git with your name\ngit config --global user.name \"<Your-Full-Name>\"\n\n# sets up Git with your email\ngit config --global user.email \"<your-email-address>\"\n\n# makes sure that Git output is colored\ngit config --global color.ui auto\n\n# displays the original state in a conflict\ngit config --global merge.conflictstyle diff3\n\ngit config --list\n```\n\n### Git & Code Editor\nThe last step of configuration is to get Git working with your code editor. Below are three of the most popular code editors. If you use a different editor, then do a quick search on Google for \"associate X text editor with Git\" (replace the X with the name of your code editor).\n\n### Atom Editor Setup\n```bash\ngit config --global core.editor \"atom --wait\"\n```\n\n### Sublime Text Setup\n```bash\ngit config --global core.editor \"'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w\"\n```\n\n### VSCode Setup\n```bash\ngit config --global core.editor \"code --wait\"\n```",
              "instructor_notes": ""
            },
            {
              "id": 262270,
              "key": "9e019761-de2d-4096-b1e8-7f85805c3798",
              "title": "Everything Is All Set Up",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9e019761-de2d-4096-b1e8-7f85805c3798",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've installed Git",
                "I've configured Git with my username",
                "I've configured Git with my email",
                "I've configured Git to use my chosen editor"
              ],
              "positive_feedback": "Fantastic work!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 267091,
          "key": "ed35219b-8119-4709-bc87-a554892d44fb",
          "title": "Onward",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ed35219b-8119-4709-bc87-a554892d44fb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Git Terms PDF",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31eb5_ud123-git-keyterms/ud123-git-keyterms.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 283730,
              "key": "777c8126-919f-4e4c-bc25-e78a80ec82af",
              "title": "Onward",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iXbMaTwfIJI",
                "china_cdn_id": "iXbMaTwfIJI.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}