WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.500
根据你现在

00:00:05.500 --> 00:00:10.330
对k-means算法工作原理的了解 我们应该聊聊一些事情

00:00:10.330 --> 00:00:14.179
有两个方面仍然需要考虑

00:00:14.179 --> 00:00:16.370
首先 你可能会想

00:00:16.370 --> 00:00:19.480
“算法的随机起点重要吗?”

00:00:19.480 --> 00:00:21.830
答案是肯定的

00:00:21.829 --> 00:00:25.539
第二 我们能确定

00:00:25.539 --> 00:00:29.320
无论形心起点在哪里 最后得到的聚类都是一样的吗？

00:00:29.320 --> 00:00:31.260
答案是否定的。

00:00:31.260 --> 00:00:34.929
不幸的是根据随机起点的变化

00:00:34.929 --> 00:00:37.750
最后得到的聚类可能会不同。

00:00:37.750 --> 00:00:40.890
因为我们不能保证任何（数量相同但位置不同）的起点

00:00:40.890 --> 00:00:44.100
最后得到的聚类都一样

00:00:44.100 --> 00:00:48.870
一种确保我们找到最佳聚类的常见方法

00:00:48.869 --> 00:00:54.119
是用不同的起点多次运行k-means算法

00:00:54.119 --> 00:00:57.079
实际上scikit-learn会为你做这件事

00:00:57.079 --> 00:01:01.570
不同的随机起点得到的聚类应该有很大的不同

00:01:01.570 --> 00:01:06.704
我们不希望每次尝试的起点都几乎完全相同。

00:01:06.704 --> 00:01:11.664
如果我们每次运行k-means的结果仍然是相同的分组

00:01:11.665 --> 00:01:16.025
那太好了 因为我们可以对这个分组充满信心

00:01:16.025 --> 00:01:20.130
或者 如果我们的分组随着起点的改变而变化

00:01:20.129 --> 00:01:25.064
我们要确保选择的是最佳分组

00:01:25.064 --> 00:01:28.920
即相同k值的一组聚类中的最佳分组 

00:01:28.920 --> 00:01:32.234
就是从这些点到其最邻近形心

00:01:32.234 --> 00:01:36.359
的平均距离或分组是最小的

