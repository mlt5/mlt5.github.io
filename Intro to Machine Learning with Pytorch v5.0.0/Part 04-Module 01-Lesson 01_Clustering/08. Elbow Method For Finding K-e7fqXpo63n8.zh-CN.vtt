WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:07.214
现在你对如何识别数据集的聚类 

00:00:07.214 --> 00:00:09.300
已经有了一些实践  

00:00:09.300 --> 00:00:12.530
特别是当能可视化聚类且能看清楚点

00:00:12.529 --> 00:00:17.884
以及有已有经验或有先验知识的情况下

00:00:17.885 --> 00:00:22.365
但是 如果你不知道数据中有多少个聚类呢？

00:00:22.364 --> 00:00:26.509
我们如何确定这些情况下的k-means的k值？

00:00:26.510 --> 00:00:31.100
为此 我想介绍一种所谓的肘部法则（Elbow Method）

00:00:31.100 --> 00:00:34.679
其工作原理是对于任何一组数据

00:00:34.679 --> 00:00:38.189
我们可以试着用不同的k值来拟合k-means

00:00:38.189 --> 00:00:41.250
然后对于每个k值

00:00:41.250 --> 00:00:46.210
我们可以测量每个点到其聚类中心的平均距离

00:00:46.210 --> 00:00:50.490
如果我们跟踪每个k值的平均距离

00:00:50.490 --> 00:00:52.825
我们就可以创建一个类似这样的图

00:00:52.825 --> 00:00:58.315
在x轴上 你可以看到我们的聚类的数量或者k在y轴上

00:00:58.314 --> 00:01:01.375
是从各聚类中心

00:01:01.375 --> 00:01:05.640
到聚类内的所有点的平均距离

00:01:05.640 --> 00:01:09.510
这里可以看到随着聚类数的增加

00:01:09.510 --> 00:01:13.859
聚类内每个点到其中心点的平均距离在减小

00:01:13.859 --> 00:01:16.804
然而 每增加一个中心

00:01:16.805 --> 00:01:19.945
对平均距离的影响是不一样的。

00:01:19.944 --> 00:01:21.769
当k值较小时

00:01:21.769 --> 00:01:25.875
每个增加一个中心都会大大减小平均距离

00:01:25.875 --> 00:01:30.064
k值越大 影响就越小

00:01:30.064 --> 00:01:34.579
这个图中的最主要的点是所谓的肘点（Elbow）

00:01:34.579 --> 00:01:38.039
在这一点上 我们发现了许多聚类 

00:01:38.040 --> 00:01:42.695
它显著地缩短了从每个点到聚类中心的距离

00:01:42.694 --> 00:01:47.879
同时 再增加k似乎不再有实质性的影响

00:01:47.879 --> 00:01:51.449
找到肘点（Elbow）可能有点需要判断

00:01:51.450 --> 00:01:54.920
你在寻找这样的点  即当增大k时

00:01:54.920 --> 00:01:58.335
各点到其中心的平均距离不再大幅度减少

00:01:58.334 --> 00:02:00.799
让我们来练习一下

