WEBVTT
Kind: captions
Language: zh-CN

00:00:00.620 --> 00:00:04.394
我们来看一下 DBSCAN 是如何运作的

00:00:04.394 --> 00:00:10.349
DBSCAN 指的是具有噪声的基于密度的空间聚类

00:00:10.349 --> 00:00:13.980
它把那些分布相对密集 距离较近的点聚到一起

00:00:13.980 --> 00:00:16.920
在这个例子中 我们能体会到

00:00:16.920 --> 00:00:20.175
它和我们之前接触的聚类法有鲜明的差异

00:00:20.175 --> 00:00:24.000
这个差异就是 不是所有的点都是类的一部分

00:00:24.000 --> 00:00:27.059
DBSCAN 把这些点标记为噪声

00:00:27.059 --> 00:00:33.274
这也说明 DBSCAN 在处理具有噪声的数据集方面作用非常大

00:00:33.274 --> 00:00:37.625
我们用个例子来看一下 DBSCAN 是怎么运作的

00:00:37.625 --> 00:00:39.320
假如说这是我们要处理的数据集

00:00:39.320 --> 00:00:43.130
DBSCAN 在开始时任意选择一点

00:00:43.130 --> 00:00:44.810
我们假定是这个点

00:00:44.810 --> 00:00:46.730
我们选定这个点以后

00:00:46.729 --> 00:00:48.642
看一下这个点的邻域

00:00:48.643 --> 00:00:50.840
所谓的邻域 是由符号 Epsilon 界定的

00:00:50.840 --> 00:00:54.650
这个符号是我们输入给 DBSCAN 的

00:00:54.649 --> 00:00:57.754
那么 在这个邻域内有其他点吗？

00:00:57.755 --> 00:01:00.545
显然没有

00:01:00.545 --> 00:01:03.980
所以 这个点就看做是噪声点

00:01:03.979 --> 00:01:05.894
它不属于任何类

00:01:05.894 --> 00:01:07.464
我们再选择另外一点

00:01:07.465 --> 00:01:09.100
假定是这个点

00:01:09.099 --> 00:01:10.434
我们看一下它的邻域

00:01:10.435 --> 00:01:11.530
有其他点吗？

00:01:11.530 --> 00:01:14.230
有 有两个点

00:01:14.230 --> 00:01:17.005
包括我们选定的那个点

00:01:17.004 --> 00:01:19.464
这个数量是否足够我们把它定义为一个类呢？

00:01:19.465 --> 00:01:21.219
这就牵扯到另外一个输入了

00:01:21.219 --> 00:01:22.870
点的最小数量

00:01:22.870 --> 00:01:24.210
在这个运行过程中

00:01:24.210 --> 00:01:26.515
点的最小数量是 5

00:01:26.515 --> 00:01:28.930
但我们此处只有两个点 不够五个

00:01:28.930 --> 00:01:32.545
所以 这个点也是噪声点

00:01:32.545 --> 00:01:34.344
对这个点也采用相同的分析过程

00:01:34.344 --> 00:01:36.727
结果显示 它也是个噪声点

00:01:36.727 --> 00:01:40.239
因为它的邻域内其他点不够五个

00:01:40.239 --> 00:01:42.179
我们来看一下这个点

00:01:42.180 --> 00:01:44.840
这是它的邻域

00:01:44.840 --> 00:01:47.522
邻域内共有 一、二、三、四 四个点

00:01:47.522 --> 00:01:49.025
即便我们算上这几个点 都只有四个

00:01:49.025 --> 00:01:52.576
这几个点甚至都不在它的邻域内

00:01:52.575 --> 00:01:54.649
所以 这也是个噪声点

00:01:54.650 --> 00:01:58.594
当我们再看这个中心点的时候 事情就变得有趣了

00:01:58.594 --> 00:01:59.989
这是这个点的邻域

00:01:59.989 --> 00:02:02.479
邻域内共有 一、二、三、四、五

00:02:02.480 --> 00:02:04.340
五个点 耶！

00:02:04.340 --> 00:02:06.305
我们找到一个类了

00:02:06.305 --> 00:02:09.349
这个点就叫做核心点

00:02:09.349 --> 00:02:12.210
我们也找到了第一个类

00:02:12.210 --> 00:02:16.135
然后 我们接着逐个分析这个类中的其他点

00:02:16.134 --> 00:02:19.044
看看它们是否也是核心点

00:02:19.044 --> 00:02:23.169
结果发现这些点的邻域中 没有一个是有五个点的

00:02:23.169 --> 00:02:25.959
所以 尽管它们是类一的点

00:02:25.960 --> 00:02:28.945
它们都被看做是边界点

00:02:28.944 --> 00:02:32.514
现在 我们再来选择一个点 假如说是这个点

00:02:32.514 --> 00:02:35.013
它的邻域内有五个点吗？

00:02:35.014 --> 00:02:39.010
答案是有 所以这个点也是个核心点

00:02:39.009 --> 00:02:42.354
我们继续看它邻域内的其他点

00:02:42.354 --> 00:02:45.204
这个点是边界点

00:02:45.205 --> 00:02:46.660
所以 它是这个类的一部分

00:02:46.659 --> 00:02:48.520
但它是个边界点

00:02:48.520 --> 00:02:50.875
这个点是个核心点

00:02:50.875 --> 00:02:53.995
我们接着看这些点

00:02:53.995 --> 00:02:57.730
这些点组成了另外一个类 即类二

00:02:57.729 --> 00:03:00.819
注意 类二的外形有所不同

00:03:00.819 --> 00:03:04.344
所以 我们可以认为类一比较紧凑

00:03:04.344 --> 00:03:08.754
类二比较狭长 没有那么紧凑

00:03:08.754 --> 00:03:13.419
我们用这些数据集来对比一下 DBSCAN 和 K-均值聚类法

00:03:13.419 --> 00:03:14.919
第一个数据集

00:03:14.919 --> 00:03:16.750
DBSCAN 得到的结果是这样

00:03:16.750 --> 00:03:18.490
没有多大用

00:03:18.490 --> 00:03:21.475
所有的点都属于一个类

00:03:21.474 --> 00:03:24.114
但是 双月牙形数据集中

00:03:24.115 --> 00:03:27.085
DBSCAN 非常完美的把它们分离开来

00:03:27.085 --> 00:03:30.235
DBSCAN 没有接收到指令 表明它要找到多少个类

00:03:30.235 --> 00:03:35.890
它接受的所有指令只有邻域和点的最小数量

00:03:35.889 --> 00:03:37.494
没有类的数量

00:03:37.495 --> 00:03:41.495
所以 它在处理双月牙形数据集方面做得非常棒

00:03:41.495 --> 00:03:43.295
那双环形数据集呢？

00:03:43.294 --> 00:03:45.079
同样 做的很棒

00:03:45.080 --> 00:03:47.120
成功的把它们分离出来

00:03:47.120 --> 00:03:52.009
这个数据集中 DBSCAN 的参数可能比较大胆

00:03:52.009 --> 00:03:54.579
所以 这些点都是噪声点

00:03:54.580 --> 00:03:56.380
然后 我们得到了 一、二、三、

00:03:56.379 --> 00:03:58.729
四、五、六 共六个类

00:03:58.729 --> 00:04:00.259
这儿也发生了同样的情况

00:04:00.259 --> 00:04:04.324
DBSCAN 找到了我们要求的三个类的中心集聚点

00:04:04.324 --> 00:04:06.409
但如果我们对输入略做改动

00:04:06.409 --> 00:04:11.164
它就能非常清楚地把我们要找的三个类分离开来

00:04:11.164 --> 00:04:15.199
这个数据集 DBSCAN 和 K- 均值聚类法都做的很棒

