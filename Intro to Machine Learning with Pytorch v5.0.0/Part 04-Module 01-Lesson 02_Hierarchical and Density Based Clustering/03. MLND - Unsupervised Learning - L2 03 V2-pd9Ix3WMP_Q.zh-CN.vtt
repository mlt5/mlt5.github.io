WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.019
Luis 给我们展示了一个层次聚类的案例

00:00:04.019 --> 00:00:08.129
一家披萨店想对它的客户位置做一个聚类处理

00:00:08.130 --> 00:00:12.210
以便更好地确定在哪里开分店

00:00:12.210 --> 00:00:15.955
这个案例中使用的方法叫做单连接聚类法

00:00:15.955 --> 00:00:18.269
我们来仔细地分析一下

00:00:18.269 --> 00:00:22.964
假如我们这个数据集有两个特征 分别在图中标记出来了

00:00:22.964 --> 00:00:26.574
我们要用单连接聚类法将它做聚类处理

00:00:26.574 --> 00:00:31.725
第一步 假设每个点是一个类

00:00:31.725 --> 00:00:33.660
我们要给每个点分别标记

00:00:33.659 --> 00:00:35.649
方便解释说明

00:00:35.649 --> 00:00:37.979
第二步

00:00:37.979 --> 00:00:40.799
计算任意两点之间的距离

00:00:40.799 --> 00:00:46.109
然后选择两个类之间的最短距离

00:00:46.109 --> 00:00:49.984
然后将这两个点聚成一个类 就像图中这样

00:00:49.984 --> 00:00:51.195
在右侧呢

00:00:51.195 --> 00:00:54.250
我们添加这种形状的类

00:00:54.250 --> 00:00:58.466
并用这样的括号把它们连接起来

00:00:58.466 --> 00:01:02.519
之后 我们继续寻找两类间的最短距离

00:01:02.520 --> 00:01:04.680
显然 是这两个类

00:01:04.680 --> 00:01:07.305
我们把它们标在右侧

00:01:07.305 --> 00:01:10.350
这是我们的第三个类

00:01:10.349 --> 00:01:14.034
同样把它标记在右侧

00:01:14.034 --> 00:01:16.019
现在问题就有点不同了

00:01:16.019 --> 00:01:17.879
看一下这个例子

00:01:17.879 --> 00:01:22.259
这个橘色类与 7 号点之间的距离是多少？

00:01:22.260 --> 00:01:24.954
是 6 号点到 7 号点之间的距离？

00:01:24.954 --> 00:01:27.326
还是 7 号点到 8 号点之间的距离？

00:01:27.326 --> 00:01:28.439
还是说 这两个距离的平均值？

00:01:28.439 --> 00:01:30.734
还是另有答案呢？

00:01:30.734 --> 00:01:34.290
显然 这一点

00:01:34.290 --> 00:01:38.243
是区分不同层次聚类方法的一个标准

00:01:38.243 --> 00:01:39.769
我们来看一下

00:01:39.769 --> 00:01:44.189
单连接聚类法关注的是类的最短距离

00:01:44.189 --> 00:01:47.039
也就是 6 和 7 这两个点之间的距离

00:01:47.040 --> 00:01:50.770
因为 6 是距离 7 最近的点

00:01:50.769 --> 00:01:53.039
所以 这段距离显然是

00:01:53.040 --> 00:01:56.655
两类间距离的最短距离

00:01:56.655 --> 00:02:00.415
所以我们把 7 号点和这个类放到一个类中

00:02:00.415 --> 00:02:05.305
注意 这个新的类中含有另外一个类作为子类

00:02:05.305 --> 00:02:09.819
我们这样标记的话 就能看出来了

00:02:09.819 --> 00:02:14.724
现在 大家就能慢慢明白 我们的树是怎么生长起来的了

00:02:14.724 --> 00:02:17.789
如果我们继续聚类

00:02:17.789 --> 00:02:22.764
最后长成的树就能包含所有的点

00:02:22.764 --> 00:02:25.054
这也是系统树图

00:02:25.055 --> 00:02:27.055
那么 类在哪儿呢？

00:02:27.055 --> 00:02:29.640
我们要给单连接聚类法的输入是

00:02:29.639 --> 00:02:31.184
我们要找的类的数量

00:02:31.185 --> 00:02:33.390
比如 如果我们要找两个类

00:02:33.389 --> 00:02:35.314
那么 在系统树长成后 我们就可以认为

00:02:35.314 --> 00:02:39.530
这就是一个只有两条链的系统树的高度

00:02:39.530 --> 00:02:41.561
所以我们可以从这个高度切割系统树

00:02:41.561 --> 00:02:45.205
这个时候 这棵树就会形成一个类

00:02:45.205 --> 00:02:48.065
这棵树会形成另一个类

00:02:48.064 --> 00:02:50.115
如果我们想要三个类

00:02:50.115 --> 00:02:51.885
我们可以从这个高度切割这棵树

00:02:51.884 --> 00:02:54.689
这个时候 我们就会得到这个树作为一个类

00:02:54.689 --> 00:02:57.659
这是第二个类 这是第三个类

00:02:57.659 --> 00:03:02.384
大家能发现 在任一高度切割系统树 都会得到不同数目的类

00:03:02.384 --> 00:03:06.004
所以 单连接聚类法 或广义上的层次聚类法

00:03:06.004 --> 00:03:11.859
能帮我们得到一个类 或者样本数量

00:03:11.860 --> 00:03:14.825
类中点的数量 等等

00:03:14.824 --> 00:03:16.199
就像我们刚刚提到的

00:03:16.199 --> 00:03:19.560
衡量类间的距离

00:03:19.560 --> 00:03:23.824
是区分不同层次聚类法的一种方法

00:03:23.824 --> 00:03:28.074
单连接聚类法关乎的是两类间的最短距离

00:03:28.074 --> 00:03:30.869
然后进行比较

00:03:30.870 --> 00:03:34.598
因此 在这些距离中

00:03:34.598 --> 00:03:36.660
这是最短距离 

00:03:36.659 --> 00:03:40.949
所以 我们要把这两个类放到一个类中

00:03:40.949 --> 00:03:47.204
然而 这会导致有些时候 单连接聚类法产生狭长的类

00:03:47.205 --> 00:03:49.690
但是 在大多数情况下

00:03:49.689 --> 00:03:52.784
我们想要的都是紧凑的类

00:03:52.784 --> 00:03:57.060
有时候还会导致单连接聚类法所形成的类

00:03:57.060 --> 00:04:01.925
一个类囊括大多数数据的情况

00:04:01.925 --> 00:04:05.594
因此 我们才要学习其他的层次聚类的方法

00:04:05.594 --> 00:04:07.125
在此之前

00:04:07.125 --> 00:04:10.810
我们先快速的同 K-均值聚类方法做一个对比

