WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.754
现在你已经看到了如何使用 scikit-learn 中的 PCA 库

00:00:03.754 --> 00:00:06.574
并将其拟合手写数字数据集

00:00:06.575 --> 00:00:09.300
那么我们应该更仔细地了解  

00:00:09.300 --> 00:00:12.554
PCA 究竟给我们返回什么 以及这些不同部分的含义

00:00:12.554 --> 00:00:15.394
让我们接着上一个视频的结尾开始

00:00:15.394 --> 00:00:18.030
在这里 我导入了要用到的库 

00:00:18.030 --> 00:00:20.785
并将图像数据分割为标签和特征

00:00:20.785 --> 00:00:22.795
这些特征是实际图像中的像素

00:00:22.795 --> 00:00:24.804
让我们看看前 30个图像 

00:00:24.804 --> 00:00:28.054
现在 使用前面看到的 do_pca 函数 

00:00:28.054 --> 00:00:29.940
让我们创建 PCA 模型

00:00:29.940 --> 00:00:32.484
以及 x_pca 矩阵

00:00:32.484 --> 00:00:34.884
如果我们看这个 PCA 模型 

00:00:34.884 --> 00:00:39.589
我们可以先点击 dot 键再点击 tab 键 来查看这上面有很多可用的东西

00:00:39.590 --> 00:00:42.485
我通常注意的一些是

00:00:42.484 --> 00:00:46.460
这里有 explained_variance_ratio  通常是非常有用

00:00:46.460 --> 00:00:48.674
还有成分的数量 

00:00:48.674 --> 00:00:50.334
特征的数量

00:00:50.335 --> 00:00:53.579
如果你查看你的 PCA 模型 点击 dot 键再点击 tab 键 

00:00:53.579 --> 00:00:55.983
你可以看到一堆可用的东西

00:00:55.984 --> 00:00:59.545
让我们看看这些东西对我们的模型有什么作用

00:00:59.545 --> 00:01:01.325
在下面的 notebook 中 

00:01:01.325 --> 00:01:03.710
你会看到有一个 scree_plot 函数  

00:01:03.710 --> 00:01:08.500
此函数用于绘制由每个成分所解释的变化量 

00:01:08.500 --> 00:01:10.234
让我们看看它是什么样子 

00:01:10.234 --> 00:01:12.715
注意 我们有15个柱 

00:01:12.715 --> 00:01:15.890
每个柱都与我们的一个主成分相关

00:01:15.890 --> 00:01:17.219
如果你还记得 在这里 

00:01:17.219 --> 00:01:20.250
我们拟合了 15个主成分 

00:01:20.250 --> 00:01:24.109
然后 柱的高度是由

00:01:24.109 --> 00:01:27.814
该成分所解释的原始特征集的变化量 

00:01:27.814 --> 00:01:29.483
所以 对于我们的第一个成分 

00:01:29.483 --> 00:01:32.598
全部数据的总变化量中

00:01:32.599 --> 00:01:35.450
有 6% 的可由该成分解释 

00:01:35.450 --> 00:01:37.325
然后 对于第二个成分

00:01:37.325 --> 00:01:41.645
总变化量的 4.29% 可由该成分解释 

00:01:41.644 --> 00:01:43.424
其余以此类推 

00:01:43.424 --> 00:01:46.819
所有 15 个主成分所解释的变化量

00:01:46.819 --> 00:01:49.949
约为占总变化量的 35% 

00:01:49.950 --> 00:01:51.620
你可以通过这条线看到

00:01:51.620 --> 00:01:55.490
如我所解释的 这些主成分可以帮助你了解 

00:01:55.489 --> 00:01:59.509
如何根据原始数据的方差来决定保留多少主成分

00:01:59.510 --> 00:02:04.385
这是为非监督算法创建度量的一种方法 

00:02:04.385 --> 00:02:07.609
这是一种了解

00:02:07.609 --> 00:02:12.574
非监督算法在预测数据时性能好坏的方法

00:02:12.574 --> 00:02:15.169
另一件我们应该看看的事情是 

00:02:15.169 --> 00:02:18.655
这些主成分是如何与原始图像联系起来的

00:02:18.655 --> 00:02:22.925
你在这个 notebook 中看到的下一个函数是 plot_component  

00:02:22.925 --> 00:02:25.850
它的作用是突出显示

00:02:25.849 --> 00:02:28.894
图像中对每个成分都很重要的像素

00:02:28.895 --> 00:02:30.995
所以 如果我们使用这个函数

00:02:30.995 --> 00:02:33.500
来查看第一个成分 即 0 成分

00:02:33.500 --> 00:02:37.544
你可以看到它正在从你的数据集中提取 0 的图像

00:02:37.544 --> 00:02:39.844
如果我们看看其他成分 

00:02:39.844 --> 00:02:43.864
你会发现这是在图像中挑选一些其他模式 

00:02:43.864 --> 00:02:48.400
这些模式与能够将它们彼此区别开来有关 

00:02:48.400 --> 00:02:51.650
本质上 这些亮黄色像素或大权重像素

00:02:51.650 --> 00:02:55.685
和这些深蓝色像素或较轻权重像素

00:02:55.685 --> 00:02:59.585
与它们对该特定成分的

00:02:59.585 --> 00:03:03.070
重要性相关联 现在轮到你了

