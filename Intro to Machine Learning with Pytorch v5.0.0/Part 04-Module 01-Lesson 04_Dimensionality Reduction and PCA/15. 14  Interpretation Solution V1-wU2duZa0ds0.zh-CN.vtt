WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.544
在上一个视频中 

00:00:01.544 --> 00:00:04.724
你看到了主成分的两个主要方面

00:00:04.724 --> 00:00:08.765
第一个是每个成分捕捉到的变化量

00:00:08.765 --> 00:00:10.794
这是我们在碎石图中看到的

00:00:10.794 --> 00:00:14.144
第二个是成分本身

00:00:14.144 --> 00:00:18.439
在这个 notebook 中 你将有机会更深入地了解这些

00:00:18.440 --> 00:00:21.665
让我们先导入需要用到的库 以及我们的数据 

00:00:21.664 --> 00:00:23.799
以下是前 30个图片

00:00:23.800 --> 00:00:27.210
现在 让我们使用之前视频中

00:00:27.210 --> 00:00:31.144
使用的 do_pca 函数在 X 矩阵上执行 PCA 

00:00:31.144 --> 00:00:34.695
记住 这将返回 PCA 模型本身 

00:00:34.695 --> 00:00:37.774
以及特征数量减少了的特征矩阵

00:00:37.774 --> 00:00:41.030
在这种情况下 我们将使用 10个主成分

00:00:41.030 --> 00:00:43.064
We'll want to pass it our X matrix,
我们要把它传递给 X 矩阵 

00:00:43.064 --> 00:00:45.474
它基本上就是图像本身

00:00:45.475 --> 00:00:50.725
现在 让我们尝试使用我们刚刚创建的模型创建一个碎石图

00:00:50.725 --> 00:00:53.240
记住 这个条形图中的每个柱

00:00:53.240 --> 00:00:55.950
都表示每个成分所捕获的变化量

00:00:55.950 --> 00:00:58.165
所以 第一个成分捕获这个量 

00:00:58.164 --> 00:01:00.670
第二个成分是这个量 等等

00:01:00.670 --> 00:01:03.140
这条线表示在某个成分级别处

00:01:03.140 --> 00:01:06.099
累积捕获的总变化量 

00:01:06.099 --> 00:01:08.329
所以 到了 10个成分的末尾

00:01:08.329 --> 00:01:11.209
我们得到了这 10个成分所捕获的

00:01:11.209 --> 00:01:14.544
数据中约 30% 的原始变化量 

00:01:14.545 --> 00:01:19.004
用这个 我们可以填写下面的字典 

00:01:19.004 --> 00:01:21.834
10.42 ? 这个看起来是最棘手的一个 我们稍后再看它 

00:01:21.834 --> 00:01:26.209
第一个成分总是可以解释最多的变化量 

00:01:26.209 --> 00:01:27.854
这个是真的 

00:01:27.855 --> 00:01:31.340
在这种情况下 主成分总是希望

00:01:31.340 --> 00:01:35.454
捕获数据集中剩余可变性的大部分

00:01:35.454 --> 00:01:38.989
因此 第一个成分将始终捕获最多

00:01:38.989 --> 00:01:40.849
第二个成分将捕获第二多

00:01:40.849 --> 00:01:42.079
依此类推

00:01:42.079 --> 00:01:45.500
你永远不会看到后面的成分

00:01:45.500 --> 00:01:47.689
比前面的成分捕获更多的变化量 

00:01:47.689 --> 00:01:50.644
即第一个成分所解释的数据中的变化量的总量 

00:01:50.644 --> 00:01:54.879
所以 第一成分看起来解释了 6.13%

00:01:54.879 --> 00:01:58.519
所以 这看起来像答案 c 

00:01:58.519 --> 00:02:02.299
那么所有成分解释的变化量之和可以大于 100% 

00:02:02.299 --> 00:02:06.170
所有成分解释的变化量总和

00:02:06.170 --> 00:02:10.800
永远不会大于 100%

00:02:10.800 --> 00:02:14.719
主成分能够解释的最大变化量

00:02:14.719 --> 00:02:18.490
只是数据开始时的总变化量  

00:02:18.490 --> 00:02:20.600
因此 只有 100%  

00:02:20.599 --> 00:02:23.264
所以 这个陈述是错误的

00:02:23.264 --> 00:02:26.089
然后 这个 10.42

00:02:26.090 --> 00:02:29.939
应该是前两个成分解释的总变化量

00:02:29.939 --> 00:02:32.310
所以 如果我们看到 6.13

00:02:32.310 --> 00:02:35.094
4.29 如果我们把这两个加起来

00:02:35.094 --> 00:02:37.159
我们得到 10.42 

00:02:37.159 --> 00:02:40.609
看起来一切都很好 

00:02:40.610 --> 00:02:44.225
我们刚刚发现的想法得到了一点加强 

00:02:44.224 --> 00:02:46.489
现在使用 helper_functions 中的

00:02:46.490 --> 00:02:49.344
plot_component 函数查看每个成分

00:02:49.344 --> 00:02:53.219
利用结果来帮助回答下面的第五个问题

00:02:53.219 --> 00:02:54.990
这需要两个参数

00:02:54.990 --> 00:02:56.435
如果你记得视频内容

00:02:56.435 --> 00:02:59.064
第一个参数是实际模型

00:02:59.064 --> 00:03:01.930
然后第二个是要绘制的成分

00:03:01.930 --> 00:03:03.694
通过绘制第一个成分

00:03:03.694 --> 00:03:06.509
你可以看到它被取出 实际上是 0

00:03:06.509 --> 00:03:11.875
所以 这个成分看起来有助于识别 0

00:03:11.875 --> 00:03:15.645
如果我们有10个成分  我们将它们从0 到 9 建立索引

00:03:15.645 --> 00:03:18.395
这意味着这个成分是 0 

00:03:18.395 --> 00:03:22.290
然后它说 哪个特征看起来像是在识别一个3 ? 

00:03:22.289 --> 00:03:24.544
所以 让我们看看其他的几个 

00:03:24.544 --> 00:03:27.214
所以 那个看起来不像 3 

00:03:27.215 --> 00:03:30.474
在我看来 那也不算是 3 

00:03:30.474 --> 00:03:32.979
哦！好了 第四个成分 

00:03:32.979 --> 00:03:35.000
所以 记住索引是从 0 开始的 

00:03:35.000 --> 00:03:38.534
但这看起来很像 3 

00:03:38.534 --> 00:03:41.125
很酷  然后从这个 notebook 上

00:03:41.125 --> 00:03:44.724
我们有机会看到 PCA 的这两个主要部分

00:03:44.724 --> 00:03:47.120
每个成分所解释的方差量

00:03:47.120 --> 00:03:48.974
也被称为特征值

00:03:48.974 --> 00:03:50.979
以及主成分本身

00:03:50.979 --> 00:03:55.819
这就给了我们原始图像中每个像素分配了一个权重

00:03:55.819 --> 00:03:58.189
以及在我们的结果结束时

00:03:58.189 --> 00:04:00.914
它们在各个主成分中的权重是多少 ?

00:04:00.914 --> 00:04:03.729
这些主成分被称为特征向量

