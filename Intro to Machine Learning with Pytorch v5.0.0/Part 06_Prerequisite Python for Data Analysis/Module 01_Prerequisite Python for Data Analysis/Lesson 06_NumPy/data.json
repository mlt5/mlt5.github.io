{
  "data": {
    "lesson": {
      "id": 505106,
      "key": "1b5143bb-1d0f-49d7-a3c1-a87c5307260d",
      "title": "NumPy",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn the basics of NumPy and how to use it to create and manipulate arrays.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/1b5143bb-1d0f-49d7-a3c1-a87c5307260d/505106/1551814700934/NumPy+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/1b5143bb-1d0f-49d7-a3c1-a87c5307260d/505106/1551814698231/NumPy+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 568679,
          "key": "82b9575a-c63a-44c9-8495-b445503f75a0",
          "title": "Instructors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "82b9575a-c63a-44c9-8495-b445503f75a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 568680,
              "key": "3c931570-ac03-4805-aeae-14621374276c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5ab0380d_screen-shot-2018-03-19-at-3.21.24-pm/screen-shot-2018-03-19-at-3.21.24-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3c931570-ac03-4805-aeae-14621374276c",
              "caption": "_Juan Delgado_",
              "alt": "",
              "width": 300,
              "height": 320,
              "instructor_notes": null
            },
            {
              "id": 568682,
              "key": "3116e0f1-9de0-44b4-80d7-164a74e0c282",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/March/5ab0381c_screen-shot-2018-03-19-at-2.30.59-pm/screen-shot-2018-03-19-at-2.30.59-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3116e0f1-9de0-44b4-80d7-164a74e0c282",
              "caption": "_Juno Lee_",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 568685,
              "key": "a57fa4c2-969d-4f9a-8a76-ac6e8a8d2521",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Python offers many libraries to work with, one of which is **Numpy**.  Here you will learn how Numpy offers support for large amounts of data, which will come in handy later! \n\nThis lesson is a collaboration between Juan and Juno. \n\nYou've seen Juno previously in a Python lesson.  As a data scientist, Juno built neural networks to analyze and categorize product images, a recommendation system to personalize shopping experiences for each user, and tools to generate insight into user behavior.\n\nJuan is a computational physicist with a Masters in Astronomy. He previously worked at NASA developing space instruments and writing software to analyze large amounts of scientific data using machine learning techniques.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 531563,
          "key": "910f8478-dc21-4c3a-943f-9a22e73bc8e8",
          "title": "Introduction to NumPy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "910f8478-dc21-4c3a-943f-9a22e73bc8e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 531564,
              "key": "8806f86e-96df-49ed-9dce-1a19c0180d83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction to NumPy\n**NumPy** stands for *Numerical Python* and it's a  fundamental package for scientific computing in Python. NumPy provides Python with an extensive math library capable of performing numerical computations effectively and efficiently. These lessons are intended as a basic overview of NumPy and introduce some of its most important features.\n\nIn the following lessons you will learn:\n* How to import NumPy\n* How to create multidimensional NumPy ndarrays using various methods\n* How to access and change elements in ndarrays\n* How to load and save ndarrays\n* How to use slicing to select or change subsets of an ndarray\n* Understand the difference between a view and a copy an of ndarray\n* How to use Boolean indexing and set operations to select or change subsets of an ndarray\n* How to sort ndarrays\n* How to perform element-wise operations on ndarrays\n* Understand how NumPy uses broadcasting to perform operations on ndarrays of different sizes. \n\n\n## Download NumPy\nNumPy is included with  **Anaconda**. If you don't already have Anaconda installed on your computer, please refer to the Anaconda section to get clear instructions on how to install Anaconda on your PC or Mac.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083273,
              "key": "f576a0e7-89a4-4769-ab4e-f1cc98b60f41",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Updating NumPy to a Specific Version\nYou can choose to upgrade/downgrade your NumPy to a specific version by using the command shown below in the Terminal/Anaconda prompt. <br>\n>***Tip*** - Create virtual environments, which helps us to have multiple versions of Python and its packages. \n\n```bash\n# Use either one command\nconda install numpy=X.XX\npip install --upgrade numpy==X.XX\n``` \nwhere `X.XX` could be one of the [specific version number](https://numpy.org/devdocs/release.html). \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1082011,
              "key": "c540bce2-cbb9-4ab9-9784-0865a64b987c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## NumPy Documentation\nNumPy is a remarkable math library and it has many functions and features. In these introductory lessons, we will only scratch the surface of what NumPy can do. If you want to learn more about NumPy, make sure you check out the NumPy Documentation:\n  \n[NumPy Manual](https://docs.scipy.org/doc/numpy-1.13.0/contents.html)  \n[NumPy User Guide](https://numpy.org/devdocs/user/index.html)  \n[NumPy Reference](https://numpy.org/devdocs/reference/index.html)  \n[Scipy Lectures](http://www.scipy-lectures.org/intro/numpy/index.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 543030,
          "key": "20562341-873d-4994-9d6b-4634670039bc",
          "title": "Why Use NumPy?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "20562341-873d-4994-9d6b-4634670039bc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 569411,
              "key": "58e82d3b-9210-454f-b6a4-dc76838d1674",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why Use NumPy\nYou may be wondering why people use NumPy - after all, Python can handle lists, as you learned in the Intro to Python lessons. Let's explore in the video below:\n",
              "instructor_notes": ""
            },
            {
              "id": 833593,
              "key": "148cefbd-eff1-43f3-bae6-e8dbcfd628e5",
              "title": "NumPy 0 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vyjMs8KFHlE",
                "china_cdn_id": "vyjMs8KFHlE.mp4"
              }
            },
            {
              "id": 1082017,
              "key": "c25ad84e-469a-4517-a834-be5afb281590",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is the code demonstrated in the video above:\n```python\n# Why use NumPy?\nimport time\nimport numpy as np\nx = np.random.random(100000000)\n\n# Case 1\nstart = time.time()\nsum(x) / len(x)\nprint(time.time() - start)\n\n# Case 2\nstart = time.time()\nnp.mean(x)\nprint(time.time() - start)\n```",
              "instructor_notes": ""
            },
            {
              "id": 543032,
              "key": "30077050-a14b-4577-a5fb-7b049f1c3e1b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Benefits of using NumPy\nEven though Python lists are great on their own, NumPy has a number of key features that give it great advantages over Python lists. Below are a few convincingly strong features:\n\n1. One such feature is **speed**. When performing operations on large arrays NumPy can often perform several orders of magnitude faster than Python lists. This speed comes from the nature of NumPy arrays being memory-efficient and from optimized algorithms used by NumPy for doing arithmetic, statistical, and linear algebra operations.\n\n2. Another great feature of NumPy is that it has **multidimensional array data structures** that can represent vectors and matrices. You will learn all about vectors and matrices in the Linear Algebra section of this course later on, and as you will soon see, a lot of machine learning algorithms rely on matrix operations. For example, when training a Neural Network, you often have to carry out many matrix multiplications. NumPy is optimized for matrix operations and it allows us to do Linear Algebra operations effectively and efficiently, making it very suitable for solving machine learning problems. \n\n3. Another great advantage of NumPy over Python lists is that NumPy has a large number of **optimized built-in mathematical functions**. These functions allow you to do a variety of complex mathematical computations very fast and with very little code (avoiding the use of complicated loops) making your programs more readable and easier to understand. \n\nThese are just some of the key features that have made NumPy an essential package for scientific computing in Python.  In fact, NumPy has become so popular that a lot of Python packages, such as Pandas, are built on top of NumPy. ",
              "instructor_notes": ""
            },
            {
              "id": 1082018,
              "key": "821a6502-15c1-42b3-96a7-54c4e7f78139",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Good to Read\nYou can read how to use NumPy for efficient computation, from the research article titled [The NumPy array: a structure for efficient numerical computation](https://hal.inria.fr/inria-00564007/en) by Walt et. al., 2011. The article is available [here](https://hal.inria.fr/inria-00564007/document).\n",
              "instructor_notes": ""
            },
            {
              "id": 1083033,
              "key": "09d577a5-bca6-4fac-b8af-c6026c300915",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Supporting Official Resource\nIf you are new to NumPy, we recommend you develop the practice of referring to the official [NumPy User Guide](https://numpy.org/devdocs/user/index.html), whenever you are looking for any *numerical* utility function. \n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 531565,
          "key": "cf9e2370-5bc1-4ed6-9a59-9996606a8448",
          "title": "Creating and Saving NumPy ndarrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cf9e2370-5bc1-4ed6-9a59-9996606a8448",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Creating and Saving NumPy ndarrays",
                "uri": "https://video.udacity-data.com/topher/2020/September/5f7483d7_creating-and-saving-numpy-ndarrays/creating-and-saving-numpy-ndarrays.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 570060,
              "key": "d0fc9836-5bfc-453b-8dcf-f3cfa1a07066",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating NumPy ndarrays",
              "instructor_notes": ""
            },
            {
              "id": 569286,
              "key": "279ab391-1ba3-4ed5-960e-ef9f9d3c5d3d",
              "title": "NumPy 1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": ">We strongly encourage you to type the commands that you have learned in this demo. However, the Notebook demonstrated in the video above, is available at the bottom of this page. To download the file (`Creating and Saving NumPy ndarrays.ipynb`) to your computer, right-click on the link, then choose \"Save Link As...\". ",
              "video": {
                "youtube_id": "EOHW29kDg7w",
                "china_cdn_id": "EOHW29kDg7w.mp4"
              }
            },
            {
              "id": 531566,
              "key": "340fb92f-8d63-4c52-8174-9a3cc76c2597",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "At the core of NumPy is the **ndarray**, where *nd* stands for n-dimensional.  An ndarray is a multidimensional array of elements all of the same type. In other words, an ndarray is a grid that can take on many shapes and can hold either numbers or strings. In many Machine Learning problems you will often find yourself using ndarrays in many different ways. For instance, you might use an ndarray to hold the pixel values of an image that will be fed into a Neural Network for image classification.  \n\nBut before we can dive in and start using NumPy to create ndarrays we need to import it into Python. We can import packages into Python using the `import` command and it has become a convention to import NumPy as `np`. Therefore, you can import NumPy by typing the following command in your Jupyter notebook: \n\n```\nimport numpy as np\n```\n\nThere are several ways to create ndarrays in NumPy. In the following lessons we will see two ways to create ndarrays:\n\n1. Using regular Python lists\n\n2. Using built-in NumPy functions\n\nIn this section, we will create ndarrays by providing Python lists to the NumPy `np.array()` function. This can create some confusion for beginners, but it is important to remember that `np.array()` is *NOT* a class, it is just a function that returns an ndarray. We should note that for the purposes of clarity, the examples throughout these lessons will use small and simple ndarrays. Let's start by creating 1-Dimensional (1D) ndarrays. \n\n```\n# We import NumPy into Python\nimport numpy as np\n\n# We create a 1D ndarray that contains only integers\nx = np.array([1, 2, 3, 4, 5])\n\n# Let's print the ndarray we just created using the print() command\nprint('x = ', x)\n```\n> x =  [1 2 3 4 5]\n\n## Rank of an Array  (numpy.ndarray.ndim)\nSyntax: \n```\nndarray.ndim\n```\nIt returns the number of array dimensions. \n\n\n\nLet's pause for a second to introduce some useful terminology. We refer to 1D arrays as *rank* 1 arrays. In general *N*-Dimensional arrays have rank *N*. Therefore, we refer to a 2D array as a rank 2 array. \n```python\n# 1-D array\nx = np.array([1, 2, 3])\nx.ndim\n\n# 2-D array\nY = np.array([[1,2,3],[4,5,6],[7,8,9], [10,11,12]])\nY.ndim\n\n# Here the`zeros()` is an inbuilt function that you'll study on the next page. \n# The tuple (2, 3, 4( passed as an argument represents the shape of the ndarray\ny = np.zeros((2, 3, 4))\ny.ndim\n```\n>1 <br>\n>2 <br>\n>3\n\n## numpy.ndarray.shape\nSyntax: \n```\nndarray.shape\n```\nIt returns a tuple representing the array dimensions. Refer more details [here](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.shape.html#numpy-ndarray-shape).\n\n\nAnother important property of arrays is their *[shape](https://numpy.org/devdocs/reference/generated/numpy.shape.html)*. The shape of an array is the size along each of its dimensions. For example, the shape of a rank 2 array will correspond to the number of *rows* and *columns* of the array. As you will see, NumPy ndarrays have *attributes* that allow us to get information about them in a very intuitive way. For example, the shape of an ndarray can be obtained using the `.shape` attribute. The shape attribute returns a tuple of N positive integers that specify the sizes of each dimension. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1082020,
              "key": "fd3434f8-58a2-4635-ab35-a29fc6221ab3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## numpy.dtype\nThe [type](https://numpy.org/doc/stable/reference/arrays.dtypes.html) tells us the data-type of the elements. Remember, a NumPy array is homogeneous, meaning all elements will have the same data-type. In the example below, we will create a rank 1 array and learn how to obtain its shape, its type, and the data-type (*dtype*) of its elements.\n#### Example 1.a - Using a 1-D Array of Integers \n```\n# We create a 1D ndarray that contains only integers\nx = np.array([1, 2, 3, 4, 5])\n\n# We print information about x\nprint('x = ', x)\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype)\n```\n\n> x =  [1 2 3 4 5]   \n  \n> x has dimensions: (5,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: int64\n\nWe can see that the shape attribute returns the tuple `(5,)` telling us that `x` is of rank 1 (i.e. `x` only has 1 dimension ) and it has 5 elements. The `type()` function tells us that `x` is indeed a NumPy ndarray. Finally, the `.dtype` attribute tells us that the elements of `x` are stored in memory as *signed 64-bit integers*. Another great advantage of NumPy is that it can handle more data-types than Python lists. You can check out all the different data types NumPy supports in the link below:\n\n[NumPy Data Types](https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html)  \n\nAs mentioned earlier, ndarrays can also hold strings. Let's see how we can create a rank 1 ndarray of strings in the same manner as before, by providing the `np.array()` function a Python list of strings.\n####  Example 1.b - Using 1-D Array of Strings\n```\n# We create a rank 1 ndarray that only contains strings\nx = np.array(['Hello', 'World'])\n\n# We print information about x\nprint('x = ', x)\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype)\n```\n\n> x =  ['Hello' 'World']\n\n> x has dimensions: (2,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: U5\n\nAs we can see the shape attribute tells us that `x` now has only 2 elements, and even though `x` now holds strings, the `type()` function tells us that `x` is still an ndarray as before. In this case however, the `.dtype` attribute tells us that the elements in `x` are stored in memory as *Unicode strings of 5 characters*.\n\nIt is important to remember that one big difference between Python lists and ndarrays, is that unlike Python lists, all the elements of an ndarray must be of the same type. So, while we can create Python lists with both integers and strings, we can't mix types in ndarrays. If you provide the `np.array()` function with a Python list that has both integers and strings, NumPy will interpret all elements as strings. We can see this in the next example:\n#### Example 1.c - Using a 1-D Array of Mixed Datatype\n```\n# We create a rank 1 ndarray from a Python list that contains integers and strings\nx = np.array([1, 2, 'World'])\n\n# We print information about x\nprint('x = ', x)\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype)\n```\n\n> x =  ['1' '2' 'World']\n\n> x has dimensions: (3,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: U21\n\nWe can see that even though the Python list had mixed data types, the elements in `x` are all of the same type, namely, *Unicode strings of 21 characters*. We won't be using ndarrays with strings for the remaining of this introduction to NumPy, but it's important to remember that ndarrays can hold strings as well.\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1082021,
              "key": "12d21187-0001-4063-8174-95aa7a9d2351",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using a 1-D Array to Demonstrate Upcasting in Numeric datatype\nUp till now, we have only created ndarrays with integers and strings. We saw that when we create an ndarray with only integers, NumPy will automatically assign the dtype int64 to its elements. Let's see what happens when we create ndarrays with floats and integers.\n#### Example 1.d - Using a 1-D Array of Int and Float\n```\n# We create a rank 1 ndarray that contains integers\nx = np.array([1,2,3])\n\n# We create a rank 1 ndarray that contains floats\ny = np.array([1.0,2.0,3.0])\n\n# We create a rank 1 ndarray that contains integers and floats\nz = np.array([1, 2.5, 4])\n\n# We print the dtype of each ndarray\nprint('The elements in x are of type:', x.dtype)\nprint('The elements in y are of type:', y.dtype)\nprint('The elements in z are of type:', z.dtype)\n```\n\n> The elements in x are of type: int64  \nThe elements in y are of type: float64  \nThe elements in z are of type: float64\n\nWe can see that when we create an ndarray with only floats, NumPy stores the elements in memory as* 64-bit floating point numbers (float64)*. However, notice that when we create an ndarray with both floats and integers, as we did with the `z` ndarray above, NumPy assigns its elements a *float64* dtype as well. This is called *upcasting*. Since all the elements of an ndarray must be of the same type, in this case NumPy upcasts the integers in `z` to floats in order to avoid losing precision in numerical computations.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1082022,
              "key": "3aa5295e-333a-4ce5-9112-e20360e7cded",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using a 1-D Array of Float, and specifying the dtype of each element \nEven though NumPy automatically selects the dtype of the ndarray, NumPy also allows you to specify the particular dtype you want to assign to the elements of the ndarray. You can specify the dtype when you create the ndarray using the keyword `dtype` in the `np.array()` function. Let's see an example:\n#### Example 1.e - Using a 1-D Array of Float, and specifying the datatype of each element as int64\n```\n# We create a rank 1 ndarray of floats but set the dtype to int64\nx = np.array([1.5, 2.2, 3.7, 4.0, 5.9], dtype = np.int64)\n\n# We print the dtype x\nprint('x = ', x)\nprint('The elements in x are of type:', x.dtype)\n```\n\n> x =  [1 2 3 4 5]\n\n> The elements in x are of type: int64\n\nWe can see that even though we created the ndarray with floats, by specifying the dtype to be int64, NumPy converted the floating point numbers into integers by removing their decimals. Specifying the data type of the ndarray can be useful in cases when you don't want NumPy to accidentally choose the wrong data type, or when you only need certain amount of precision in your calculations and you want to save memory.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1082023,
              "key": "b567c754-ccca-4a29-a569-31d0f269db89",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### numpy.ndarray.size and Creating a 2-D array\nAnother useful attribute is [NumPy.size](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.size.html), which returns the number of elements in the array. Let us now look at how we can create a rank 2 ndarray from a nested Python list.\n#### Example 2 - Using a 2-D Array (Rank #2 Array)\n```\n# We create a rank 2 ndarray that only contains integers\nY = np.array([[1,2,3],[4,5,6],[7,8,9], [10,11,12]])\n\nprint('Y = \\n', Y)\n\n# We print information about Y\nprint('Y has dimensions:', Y.shape)\nprint('Y has a total of', Y.size, 'elements')\nprint('Y is an object of type:', type(Y))\nprint('The elements in Y are of type:', Y.dtype)\n```\n\n> Y =  \n[[ 1  2  3]  \n&nbsp;[ 4  5  6]  \n&nbsp;[ 7  8  9]  \n&nbsp;[10 11 12]]\n\n> Y has dimensions: (4, 3)  \nY has a total of 12 elements  \nY is an object of type: class 'numpy.ndarray'  \nThe elements in Y are of type: int64\n\nWe can see that now the shape attribute returns the tuple `(4,3)` telling us that `Y` is of rank 2 and it has 4 rows and 3 columns. The `.size` attribute tells us that `Y` has a total of 12 elements.\n\nNotice that when NumPy creates an ndarray it automatically assigns its *dtype* based on the type of the elements you used to create the ndarray. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1082024,
              "key": "4ef16eaf-8f58-4678-b824-1d96f3ed5fc7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Save the NumPy array to a File\nOnce you create an ndarray, you may want to save it to a file to be read later or to be used by another program. NumPy provides a way to save the arrays into files for later use - let's see how this is done.\n#### Example 3 - Save the NumPy array to a File\n```\n# We create a rank 1 ndarray\nx = np.array([1, 2, 3, 4, 5])\n\n# We save x into the current directory as \nnp.save('my_array', x)\n```\n\nThe above saves the `x` ndarray into a file named `my_array.npy`. You can *load* the saved ndarray into a variable by using the `load()` function.\n\n```\n# We load the saved array from our current directory into variable y\ny = np.load('my_array.npy')\n\n# We print y\nprint()\nprint('y = ', y)\nprint()\n\n# We print information about the ndarray we loaded\nprint('y is an object of type:', type(y))\nprint('The elements in y are of type:', y.dtype)\n```\n> y =  [1 2 3 4 5]\n\n> y is an object of type: class 'numpy.ndarray'  \nThe elements in y are of type: int64\n\nWhen loading an array from a file, make sure you include the name of the file together with the extension `.npy`, otherwise you will get an error.",
              "instructor_notes": ""
            },
            {
              "id": 1083001,
              "key": "09b00c07-ae1d-40d1-a42b-e5977e33ce5d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Resource\n* Refer more example at [NumPy.org - How to create a basic array](https://numpy.org/devdocs/user/absolute_beginners.html#how-to-create-a-basic-array)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 531567,
          "key": "f99beb57-4f9a-42d9-8148-221e1828fec7",
          "title": "Using Built-in Functions to Create ndarrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f99beb57-4f9a-42d9-8148-221e1828fec7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Using Built-in Functions to Create ndarrays",
                "uri": "https://video.udacity-data.com/topher/2020/September/5f74c0a2_using-built-in-functions-to-create-ndarrays/using-built-in-functions-to-create-ndarrays.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 570063,
              "key": "e6f263a9-58f2-48b4-83af-2f4cd82c30c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using Built-in Functions to Create ndarrays",
              "instructor_notes": ""
            },
            {
              "id": 569287,
              "key": "cf05783f-fc5a-4788-8675-a4343d1b972b",
              "title": "NumPy 2 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": ">We strongly encourage you to type the commands that you have learned in this demo. However, the notebook file demonstrated in the video above, `Using Built-in Functions to Create ndarrays.ipynb`, is available at the bottom of this page. ",
              "video": {
                "youtube_id": "KR3hHf9Zxxg",
                "china_cdn_id": "KR3hHf9Zxxg.mp4"
              }
            },
            {
              "id": 531568,
              "key": "726c9e75-2765-47d7-84c5-a8949580a8ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One great time-saving feature of NumPy is its ability to create ndarrays using built-in functions. These functions allow us to create certain kinds of ndarrays with just one line of code. Below we will see a few of the most useful built-in functions for creating ndarrays that you will come across when doing AI programming.\n\nLet's start by creating an ndarray with a specified shape that is full of zeros. We can do this by using the `np.zeros()` function. The function `np.zeros(shape)` creates an ndarray full of `zeros` with the given `shape`. So, for example, if you wanted to create a rank 2 array with 3 rows and 4 columns, you will pass the shape to the function in the form of `(rows, columns)`, as in the example below:\n\n#### Example 1. Create a Numpy array of zeros with a desired shape\n```\n# We create a 3 x 4 ndarray full of zeros. \nX = np.zeros((3,4))\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype)\n```\n\n> X =  \n[[ 0.  0.  0.  0.]  \n&nbsp;[ 0.  0.  0.  0.]  \n&nbsp;[ 0.  0.  0.  0.]]\n\n> X has dimensions: (3, 4)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: float64\n\nAs we can see,  the `np.zeros()` function creates by default an array with dtype float64. If desired, the data type can be changed by using the keyword `dtype`.\n\nSimilarly, we can create an ndarray with a specified shape that is full of *ones*. We can do this by using the `np.ones()` function. Just like the `np.zeros()` function, the `np.ones()` function takes as an argument the shape of the ndarray you want to make. Let's see an example:\n\n#### Example 2. Create a Numpy array of ones\n```\n# We create a 3 x 2 ndarray full of ones. \nX = np.ones((3,2))\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype) \n```\n\n> X =  \n[[ 1.  1.]  \n&nbsp;[ 1.  1.]  \n&nbsp;[ 1.  1.]]\n\n> X has dimensions: (3, 2)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: float64\n\nAs we can see, the`np.ones()` function also creates by default an array with dtype float64. If desired, the data type can be changed by using the keyword `dtype`.\n\nWe can also create an ndarray with a specified shape that is full of any number we want. We can do this by using the `np.full()` function. The `np.full(shape, constant value)` function takes two arguments. The first argument is the `shape` of the ndarray you want to make and the second is the `constant value` you want to populate the array with. Let's see an example:\n\n#### Example 3. Create a Numpy array of constants\n```\n# We create a 2 x 3 ndarray full of fives. \nX = np.full((2,3), 5) \n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype)  \n```\n\n> X =  \n[[5 5 5]  \n&nbsp;[5 5 5]]\n\n> X has dimensions: (2, 3)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: int64\n\nThe `np.full()` function creates by default an array with the same data type as the constant value used to fill in the array. If desired, the data type can be changed by using the keyword `dtype`.\n\nAs you will learn later, a fundamental array in Linear Algebra is the Identity Matrix. An Identity matrix is a square matrix that has only 1s in its main diagonal and zeros everywhere else. The function `np.eye(N)` creates a square `N x N` ndarray corresponding to the Identity matrix. Since all Identity Matrices are square, the `np.eye()` function only takes a single integer as an argument. Let's see an example:\n\n#### Example 4 a. Create a Numpy array of an Identity matrix\n```\n# We create a 5 x 5 Identity matrix. \nX = np.eye(5)\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype)  \n```\n\n> X =  \n[[ 1.  0.  0.  0.  0.]  \n&nbsp;[ 0.  1.  0.  0.  0.]  \n&nbsp;[ 0.  0.  1.  0.  0.]  \n&nbsp;[ 0.  0.  0.  1.  0.]  \n&nbsp;[ 0.  0.  0.  0.  1.]]\n\n> X has dimensions: (5, 5)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: float64\n\nAs we can see, the  `np.eye()` function also creates by default an array with dtype float64. If desired, the data type can be changed by using the keyword `dtype`. You will learn all about Identity Matrices and their use in the Linear Algebra section of this course. We can also create diagonal matrices by using the `np.diag()` function. A diagonal matrix is a square matrix that only has values in its main diagonal. The `np.diag()` function creates an ndarray corresponding to a diagonal matrix , as shown in the example below:\n\n#### Example 4 b. Create a Numpy array of constants\n```\n# Create a 4 x 4 diagonal matrix that contains the numbers 10,20,30, and 50\n# on its main diagonal\nX = np.diag([10,20,30,50])\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n```\n\n> X =  \n[[10  0  0  0]  \n&nbsp;[ 0 20  0  0]  \n&nbsp;[ 0  0 30  0]  \n&nbsp;[ 0  0  0 50]]\n\n\n## numpy.arange\nSyntax:\n```\nnumpy.arange([start, ]stop, [step, ]dtype=None)\n```\nIt returns evenly spaced values within a given interval. Details about the optional arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.arange.html). \n\nNumPy also allows you to create ndarrays that have evenly spaced values within a given interval. NumPy's `np.arange()` function is very versatile and can be used with either one, two, or three arguments. Below we will see examples of each case and how they are used to create different kinds of ndarrays.\n\nLet's start by using `np.arange()` with only one argument. When used with only one argument, `np.arange(N)` will create a rank 1 ndarray with consecutive integers between `0` and `N - 1`. Therefore, notice that if I want an array to have integers between 0 and 9, I have to use N = 10, *NOT* N = 9, as in the example below:\n\n#### Example 5. Create a Numpy array of evenly spaced values in a given range, using `arange(stop_val)`\n```\n# We create a rank 1 ndarray that has sequential integers from 0 to 9\nx = np.arange(10)\n​\n# We print the ndarray\nprint()\nprint('x = ', x)\nprint()\n\n# We print information about the ndarray\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype) \n```\n\n> x =  [0 1 2 3 4 5 6 7 8 9]\n\n> x has dimensions: (10,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: int64\n\nWhen used with two arguments, `np.arange(start,stop)` will create a rank 1 ndarray with evenly spaced values within the half-open interval `[start, stop)`. This means the evenly spaced numbers will include `start` but *exclude* `stop`. Let's see an example\n\n#### Example 6. Create a Numpy array using `arange(start_val, stop_val)`\n```\n# We create a rank 1 ndarray that has sequential integers from 4 to 9. \nx = np.arange(4,10)\n\n# We print the ndarray\nprint()\nprint('x = ', x)\nprint()\n\n# We print information about the ndarray\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype) \n```\n\n> x =  [4 5 6 7 8 9]\n\n> x has dimensions: (6,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: int64\n\nAs we can see, the function `np.arange(4,10)` generates a sequence of integers with 4 inclusive and 10 exclusive.\n\nFinally, when used with three arguments, `np.arange(start,stop,step)` will create a rank 1 ndarray with evenly spaced values within the half-open interval `[start, stop)` with `step` being the distance between two adjacent values. Let's see an example:\n\n#### Example 7. Create a Numpy array using `arange(start_val, stop_val, step_size)`\n```\n# We create a rank 1 ndarray that has evenly spaced integers from 1 to 13 in steps of 3.\nx = np.arange(1,14,3)\n\n# We print the ndarray\nprint()\nprint('x = ', x)\nprint()\n\n# We print information about the ndarray\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype) \n```\n\n> x =  [ 1  4  7 10 13]\n\n> x has dimensions: (5,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: int64\n\nWe can see that `x` has sequential integers between 1 and 13 but the difference between all adjacent values is 3.\n\n\n## numpy.linspace\nSyntax:\n```\nnumpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)\n```\nIt returns `num` evenly spaced values calculated over the interval `[start, stop]`. Details about the optional arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.linspace.html). \n\n\nEven though the `np.arange()` function allows for non-integer steps, such as 0.3, the output is usually inconsistent, due to the finite floating point precision. For this reason, in the cases where non-integer steps are required, it is usually better to use the function `np.linspace()`. The `np.linspace(start, stop, N)` function returns `N` evenly spaced numbers over the *closed* interval `[start, stop]`. This means that both the `start` and the`stop` values are included. We should also note the `np.linspace()` function needs to be called with at least two arguments in the form `np.linspace(start,stop)`. In this case, the default number of elements in the specified interval will be *N= 50*. The reason `np.linspace()` works better than the `np.arange()` function, is that `np.linspace()` uses the number of elements we want in a particular interval, instead of the step between values.  Let's see some examples:\n\n#### Example 8. Create a Numpy array using `linspace(start, stop, n)`, with `stop` inclusive.\n```\n# We create a rank 1 ndarray that has 10 integers evenly spaced between 0 and 25.\nx = np.linspace(0,25,10)\n\n# We print the ndarray\nprint()\nprint('x = \\n', x)\nprint()\n\n# We print information about the ndarray\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype) \n```\n\n> x = [  0.           2.77777778   5.55555556   8.33333333  11.11111111\n  13.88888889  16.66666667  19.44444444  22.22222222  25.        ]\n\n> x has dimensions: (10,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: float64\n\nAs we can see from the above example, the function `np.linspace(0,25,10)` returns an ndarray with `10` evenly spaced numbers in the closed interval `[0, 25]`. We can also see that both the start and end points, `0` and `25` in this case, are included. However, you can let the endpoint of the interval be excluded (just like in the np.arange() function) by setting the keyword `endpoint = False` in the `np.linspace()` function. Let's create the same `x` ndarray we created above but now with the endpoint excluded:\n\n#### Example 9. Create a Numpy array using `linspace(start, stop, n)`, with `stop` excluded.\n```\n# We create a rank 1 ndarray that has 10 integers evenly spaced between 0 and 25,\n# with 25 excluded.\nx = np.linspace(0,25,10, endpoint = False)\n\n# We print the ndarray\nprint()\nprint('x = ', x)\nprint()\n\n# We print information about the ndarray\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype) \n```\n\n> x =  [  0.    2.5   5.    7.5  10.   12.5  15.   17.5  20.   22.5]\n\n> x has dimensions: (10,)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: float64\n\nAs we can see, because we have excluded the endpoint, the spacing between values had to change in order to fit 10 evenly spaced numbers in the given interval.\n\n## numpy.reshape - This is a Function.\nSyntax: \n```\nnumpy.reshape(array, newshape, order='C')[source]\n```\nIt gives a new shape to an array without changing its data. More details about the arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.reshape.html#numpy.reshape).\n\n\nSo far, we have only used the built-in functions `np.arange()` and `np.linspace()` to create rank 1 ndarrays. However, we can use these functions to create rank 2 ndarrays of any shape by combining them with the `np.reshape()` function. The `np.reshape(ndarray, new_shape)` function converts the given `ndarray` into the specified `new_shape`. It is important to note that the `new_shape` should be compatible with the number of elements in the given `ndarray`. For example, you can convert a rank 1 ndarray with 6 elements, into a 3 x 2 rank 2 ndarray, or a 2 x 3 rank 2 ndarray, since both of these rank 2 arrays will have a total of 6 elements. However, you can't reshape the rank 1 ndarray with 6 elements into a 3 x 3 rank 2 ndarray, since this rank 2 array will have 9 elements, which is greater than the number of elements in the original ndarray. Let's see some examples:\n\n#### Example 10. Create a Numpy array by feeding the output of `arange()` function as an argument to the `reshape()` function.\n```\n# We create a rank 1 ndarray with sequential integers from 0 to 19\nx = np.arange(20)\n\n# We print x\nprint()\nprint('Original x = ', x)\nprint()\n\n# We reshape x into a 4 x 5 ndarray \nx = np.reshape(x, (4,5))\n\n# We print the reshaped x\nprint()\nprint('Reshaped x = \\n', x)\nprint()\n\n# We print information about the reshaped x\nprint('x has dimensions:', x.shape)\nprint('x is an object of type:', type(x))\nprint('The elements in x are of type:', x.dtype) \n```\n\n> Original x =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n\n\n> Reshaped x =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n> x has dimensions: (4, 5)  \nx is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: int64\n\n## numpy.ndarray.reshape  - This one is a Method. \nSyntax: \n```\nndarray.reshape(shape, order='C')\n```\nIt returns an array containing the same data with a new shape. More details about the arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape).\n>**Need clarity between a Method versus Function?** - Refer to [this](https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function?rq=1) discussion on StackOverflow\n\nOne great feature about NumPy, is that some functions can also be applied as methods. This allows us to apply different functions in sequence in just one line of code. ndarray methods are similar to ndarray attributes in that they are both applied using *dot* notation (`.`). Let's see how we can accomplish the same result as in the above example, but in just one line of code:\n\n#### Example 11. Create a Numpy array by calling the `reshape()` function from the output of `arange()` function.\n```\n# We create a a rank 1 ndarray with sequential integers from 0 to 19 and\n# reshape it to a 4 x 5 array \nY = np.arange(20).reshape(4, 5)\n\n# We print Y\nprint()\nprint('Y = \\n', Y)\nprint()\n\n# We print information about Y\nprint('Y has dimensions:', Y.shape)\nprint('Y is an object of type:', type(Y))\nprint('The elements in Y are of type:', Y.dtype) \n```\n\n> Y =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n> Y has dimensions: (4, 5)  \nY is an object of type: class 'numpy.ndarray'  \nThe elements in Y are of type: int64\n\nAs we can see, we get the exact same result as before. Notice that when we use `reshape()` as a method, it's applied as `ndarray.reshape(new_shape)`. This converts the `ndarray` into the specified shape `new_shape`. As before, it is important to note that the `new_shape` should be compatible with the number of elements in `ndarray`. In the example above, the function `np.arange(20)` creates an ndarray and serves as the `ndarray` to be reshaped by the `reshape()` method. Therefore,  when using `reshape()` as a method, we don't need to pass  the `ndarray` as an argument to the `reshape()` function, instead we only need to pass the `new_shape` argument.\n\nIn the same manner, we can also combine `reshape()` with `np.linspace()` to create rank 2 arrays, as shown in the next example.\n\n#### Example 12. Create a rank 2 Numpy array by using the `reshape()` function.\n```\n# We create a rank 1 ndarray with 10 integers evenly spaced between 0 and 50,\n# with 50 excluded. We then reshape it to a 5 x 2 ndarray\nX = np.linspace(0,50,10, endpoint=False).reshape(5,2)\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype)\n```\n\n> X =  \n&nbsp;[[  0.   5.]  \n&nbsp;[ 10.  15.]  \n&nbsp;[ 20.  25.]  \n&nbsp;[ 30.  35.]  \n&nbsp;[ 40.  45.]]\n\n> X has dimensions: (5, 2)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: float64\n\nThe last type of ndarrays we are going to create are *random* ndarrays. Random ndarrays are arrays that contain random numbers. Often in Machine Learning, you need to create random matrices, for example, when initializing the weights of a Neural Network. NumPy offers a variety of random functions to help us create random ndarrays of any shape.\n\nLet's start by using the `np.random.random(shape)` function to create an ndarray of the given `shape` with random floats in the half-open interval [0.0, 1.0).\n\n#### Example 13. Create a Numpy array using the `numpy.random.random()` function. \n```\n# We create a 3 x 3 ndarray with random floats in the half-open interval [0.0, 1.0).\nX = np.random.random((3,3))\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in x are of type:', X.dtype)\n```\n\n> X =  \n[[ 0.12379926  0.52943854  0.3443525 ]  \n&nbsp;[ 0.11169547  0.82123909  0.52864397]  \n&nbsp;[ 0.58244133  0.21980803  0.69026858]]\n\n> X has dimensions: (3, 3)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in x are of type: float64\n\nNumPy also allows us to create ndarrays with random integers within a particular interval. The function `np.random.randint(start, stop, size = shape)` creates an ndarray of the given `shape` with random integers in the half-open interval `[start, stop)`. Let's see an example:\n#### Example 14. Create a Numpy array  using the `numpy.random.randint()` function. \n```\n# We create a 3 x 2 ndarray with random integers in the half-open interval [4, 15).\nX = np.random.randint(4,15,size=(3,2))\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype)\n```\n\n> X =  \n[[ 7 11]  \n&nbsp;[ 9 11]  \n&nbsp;[ 6  7]]\n\n> X has dimensions: (3, 2)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: int64\n\nIn some cases, you may need to create ndarrays with random numbers that satisfy certain statistical properties. For example, you may want the random numbers in the ndarray to have an average of 0. NumPy allows you create random ndarrays with numbers drawn from various probability distributions. The function `np.random.normal(mean, standard deviation, size=shape)`, for example, creates an ndarray with the given `shape` that contains random numbers picked from a `normal` (Gaussian) distribution with the given `mean` and `standard deviation`. Let's create a 1,000 x 1,000 ndarray of random floating point numbers drawn from a normal distribution with a mean (average) of zero and a standard deviation of 0.1.\n#### Example 15. Create a Numpy array of \"Normal\" distributed random numbers, using the `numpy.random.normal()` function. \n```\n# We create a 1000 x 1000 ndarray of random floats drawn from normal (Gaussian) distribution\n# with a mean of zero and a standard deviation of 0.1.\nX = np.random.normal(0, 0.1, size=(1000,1000))\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print information about X\nprint('X has dimensions:', X.shape)\nprint('X is an object of type:', type(X))\nprint('The elements in X are of type:', X.dtype)\nprint('The elements in X have a mean of:', X.mean())\nprint('The maximum value in X is:', X.max())\nprint('The minimum value in X is:', X.min())\nprint('X has', (X < 0).sum(), 'negative numbers')\nprint('X has', (X > 0).sum(), 'positive numbers')\n```\n\n> X =  \n[[ 0.04218614  0.03247225 -0.02936003 ...,  0.01586796 -0.05599115  -0.03630946]  \n&nbsp;[ 0.13879995 -0.01583122 -0.16599967 ...,  0.01859617 -0.08241612  0.09684025]  \n&nbsp;[ 0.14422252 -0.11635985 -0.04550231 ..., -0.09748604 -0.09350044  0.02514799]  \n&nbsp;...,  \n&nbsp;[-0.10472516 -0.04643974  0.08856722 ..., -0.02096011 -0.02946155  0.12930844]  \n&nbsp;[-0.26596955  0.0829783   0.11032549 ..., -0.14492074 -0.00113646  -0.03566034]  \n&nbsp;[-0.12044482  0.20355356  0.13637195 ...,  0.06047196 -0.04170031  -0.04957684]]\n\n> X has dimensions: (1000, 1000)  \nX is an object of type: class 'numpy.ndarray'  \nThe elements in X are of type: float64  \nThe elements in X have a mean of: -0.000121576684405  \nThe maximum value in X is: 0.476673923106  \nThe minimum value in X is: -0.499114224706  \nX has 500562 negative numbers  \nX has 499438 positive numbers\n\nAs we can see, the average of the random numbers in the ndarray is close to zero, both the maximum and minimum values in `X` are symmetric about zero (the average), and we have about the same amount of positive and negative numbers.",
              "instructor_notes": ""
            },
            {
              "id": 1083007,
              "key": "b282be54-a165-400f-834f-c2c5aed130c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Resource\n* Refer to more examples available at [NumPy.org - Array creation](https://numpy.org/devdocs/user/basics.creation.html#array-creation)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 556048,
          "key": "0188424b-fa4e-48d6-bfef-265f91f6be27",
          "title": "Create an ndarray",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0188424b-fa4e-48d6-bfef-265f91f6be27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 556049,
              "key": "18d90c49-6132-4483-86b5-4e2fa41af08f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Try creating the same array using the `np.linspace()` function. The answer is below:\n\n`np.linspace(2,32,16).reshape(4,4)`",
              "user_state": {
                "node_key": "18d90c49-6132-4483-86b5-4e2fa41af08f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6676231035158528",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\r\n\r\n# Using the Built-in functions you learned about in the\r\n# previous lesson, create a 4 x 4 ndarray that only\r\n# contains consecutive even numbers from 2 to 32 (inclusive)\r\n\r\nX = \r\n",
                    "name": "create_ndarray.py"
                  },
                  {
                    "text": "import numpy as np\r\n\r\nX = np.arange(2,34,2).reshape(4,4)",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 552628,
          "key": "5829db09-f51a-4018-b476-644b6fd19483",
          "title": "Accessing, Deleting, and Inserting Elements Into ndarrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5829db09-f51a-4018-b476-644b6fd19483",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Accessing, Deleting, and Inserting Elements Into ndarrays",
                "uri": "https://video.udacity-data.com/topher/2020/October/5f756fab_accessing-deleting-and-inserting-elements-into-ndarrays/accessing-deleting-and-inserting-elements-into-ndarrays.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 570065,
              "key": "2983ef4d-80a2-424b-83cb-68dfe9b81120",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Accessing, Deleting, and Inserting Elements Into ndarrays",
              "instructor_notes": ""
            },
            {
              "id": 569288,
              "key": "925a855e-0b41-4615-b055-f02d3cc614d1",
              "title": "NumPy 3 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": ">We strongly encourage you to type the commands that you have learned in this demo. However, the notebook file demonstrated in the video above is available at the bottom of this page. ",
              "video": {
                "youtube_id": "Rt4aydeo9F8",
                "china_cdn_id": "Rt4aydeo9F8.mp4"
              }
            },
            {
              "id": 552629,
              "key": "739971be-3b07-4560-9a09-bece176053ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you know how to create a variety of ndarrays, we will now see how NumPy allows us to effectively manipulate the data within the ndarrays. NumPy ndarrays are mutable, meaning that the elements in ndarrays can be changed after the ndarray has been created. NumPy ndarrays can also be sliced, which means that ndarrays can be split in many different ways. This allows us, for example, to retrieve any subset of the ndarray that we want. Often in Machine Learning you will use slicing to separate data, as for example when dividing a data set into training, cross validation, and testing sets.\n\nWe will start by looking at how the elements of an ndarray can be accessed or modified by indexing. Elements can be accessed using indices inside square brackets, [ ]. NumPy allows you to use both positive and negative indices to access elements in the ndarray. Positive indices are used to access elements from the beginning of the array, while negative indices are used to access elements from the end of the array. Let's see how we can access elements in rank 1 ndarrays:\n#### Example 1. Access individual elements of 1-D array\n```python\n# We create a rank 1 ndarray that contains integers from 1 to 5\nx = np.array([1, 2, 3, 4, 5])\n\n# We print x\nprint()\nprint('x = ', x)\nprint()\n\n# Let's access some elements with positive indices\nprint('This is First Element in x:', x[0]) \nprint('This is Second Element in x:', x[1])\nprint('This is Fifth (Last) Element in x:', x[4])\nprint()\n\n# Let's access the same elements with negative indices\nprint('This is First Element in x:', x[-5])\nprint('This is Second Element in x:', x[-4])\nprint('This is Fifth (Last) Element in x:', x[-1])\n```\n\n> x =  [1 2 3 4 5]\n\n> This is First Element in x: 1  \nThis is Second Element in x: 2  \nThis is Fifth (Last) Element in x: 5\n\n> This is First Element in x: 1  \nThis is Second Element in x: 2  \nThis is Fifth (Last) Element in x: 5\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083003,
              "key": "242edcf8-562e-4466-bfee-2a75fe2bf447",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice that to access the first element in the ndarray we have to use the index 0 not 1. Also notice, that the same element can be accessed using both positive and negative indices. As mentioned earlier, positive indices are used to access elements from the beginning of the array, while negative indices are used to access elements from the end of the array.\n\nNow let's see how we can change the elements in rank 1 ndarrays. We do this by accessing the element we want to change and then using the `=` sign to assign the new value:\n#### Example 2. Modify an element of 1-D array\n```python\n# We create a rank 1 ndarray that contains integers from 1 to 5\nx = np.array([1, 2, 3, 4, 5])\n\n# We print the original x\nprint()\nprint('Original:\\n x = ', x)\nprint()\n\n# We change the fourth element in x from 4 to 20\nx[3] = 20\n\n# We print x after it was modified \nprint('Modified:\\n x = ', x)\n```\n\n> Original:  \nx =  [1 2 3 4 5]\n\n> Modified:  \nx =  [ 1  2  3 20  5]\n\nSimilarly, we can also access and modify specific elements of rank 2 ndarrays. To access elements in rank 2 ndarrays we need to provide 2 indices in the form `[row, column]`. Let's see some examples.\n#### Example 3. Access individual elements of 2-D array\n```python\n# We create a 3 x 3 rank 2 ndarray that contains integers from 1 to 9\nX = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# Let's access some elements in X\nprint('This is (0,0) Element in X:', X[0,0])\nprint('This is (0,1) Element in X:', X[0,1])\nprint('This is (2,2) Element in X:', X[2,2])\n```\n\n> X =  \n[[1 2 3]  \n&nbsp;[4 5 6]  \n&nbsp;[7 8 9]]\n\n> This is (0,0) Element in X: 1  \nThis is (0,1) Element in X: 2  \nThis is (2,2) Element in X: 9\n\nRemember that the index `[0, 0]` refers to the element in the first row, first column.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083004,
              "key": "d0002d63-52c8-45c4-874c-8fff41165bf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Elements in rank 2 ndarrays can be modified in the same way as with rank 1 ndarrays. Let's see an example:\n#### Example 4. Modify an element of 2-D array             \n```python\n# We create a 3 x 3 rank 2 ndarray that contains integers from 1 to 9\nX = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n# We print the original x\nprint()\nprint('Original:\\n X = \\n', X)\nprint()\n\n# We change the (0,0) element in X from 1 to 20\nX[0,0] = 20\n\n# We print X after it was modified \nprint('Modified:\\n X = \\n', X)\n```\n\n> Original:  \nX =  \n[[1 2 3]  \n&nbsp;[4 5 6]  \n&nbsp;[7 8 9]]\n\n> Modified:  \nX =  \n[[20  2  3]  \n&nbsp;[ 4  5  6]  \n&nbsp;[ 7  8  9]]\n\nNow, let's take a look at how we can add and delete elements from ndarrays. We can delete elements using the `np.delete(ndarray, elements, axis)` function. This function `deletes` the given list of `elements` from the given `ndarray` along the specified `axis`. For rank 1 ndarrays the `axis` keyword is not required. For rank 2 ndarrays, `axis = 0` is used to select *rows*, and `axis = 1` is used to select *columns*. Let's see some examples:\n#### Example 5. Delete elements \n```python\n# We create a rank 1 ndarray \nx = np.array([1, 2, 3, 4, 5])\n\n# We create a rank 2 ndarray\nY = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n# We print x\nprint()\nprint('Original x = ', x)\n\n# We delete the first and last element of x\nx = np.delete(x, [0,4])\n\n# We print x with the first and last element deleted\nprint()\nprint('Modified x = ', x)\n\n# We print Y\nprint()\nprint('Original Y = \\n', Y)\n\n# We delete the first row of y\nw = np.delete(Y, 0, axis=0)\n\n# We delete the first and last column of y\nv = np.delete(Y, [0,2], axis=1)\n\n# We print w\nprint()\nprint('w = \\n', w)\n\n# We print v\nprint()\nprint('v = \\n', v)\n```\n\n> Original x =  [1 2 3 4 5]\n\n> Modified x =  [2 3 4]\n\n> Original Y =  \n[[1 2 3]  \n&nbsp;[4 5 6]  \n&nbsp;[7 8 9]]\n\n> w =  \n[[4 5 6]  \n&nbsp;[7 8 9]]\n\n> v =  \n[[2]  \n&nbsp;[5]  \n&nbsp;[8]]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083005,
              "key": "e6b98983-9d71-48d3-af06-29f7b4865ab2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## numpy.append\nSyntax:\n```\nnumpy.append(array, values, axis=None)\n```\nIt appends values to the end of an array. Refer [here](https://numpy.org/doc/stable/reference/generated/numpy.append.html) for more details about additional arguments.\n\nNow, let's see how we can append values to ndarrays. We can append values to ndarrays using the `np.append(ndarray, elements, axis)` function. This function appends the given list of `elements` to `ndarray` along the specified `axis`. Let's see some examples:\n#### Example 6. Append elements\n```python\n# We create a rank 1 ndarray \nx = np.array([1, 2, 3, 4, 5])\n\n# We create a rank 2 ndarray \nY = np.array([[1,2,3],[4,5,6]])\n\n# We print x\nprint()\nprint('Original x = ', x)\n\n# We append the integer 6 to x\nx = np.append(x, 6)\n\n# We print x\nprint()\nprint('x = ', x)\n\n# We append the integer 7 and 8 to x\nx = np.append(x, [7,8])\n\n# We print x\nprint()\nprint('x = ', x)\n\n# We print Y\nprint()\nprint('Original Y = \\n', Y)\n\n# We append a new row containing 7,8,9 to y\nv = np.append(Y, [[7,8,9]], axis=0)\n\n# We append a new column containing 9 and 10 to y\nq = np.append(Y,[[9],[10]], axis=1)\n\n# We print v\nprint()\nprint('v = \\n', v)\n\n# We print q\nprint()\nprint('q = \\n', q)\n```\n\n> Original x =  [1 2 3 4 5]\n\n> x =  [1 2 3 4 5 6]\n\n> x =  [1 2 3 4 5 6 7 8]\n\n> Original Y =  \n[[1 2 3]  \n&nbsp;[4 5 6]]\n\n> v =  \n[[1 2 3]  \n&nbsp;[4 5 6]  \n&nbsp;[7 8 9]]\n\n> q =  \n[[ 1  2  3  9]  \n&nbsp;[ 4  5  6 10]]\n\nNotice that when appending rows or columns to rank 2 ndarrays the rows or columns must have the correct shape, so as to match the shape of the rank 2 ndarray.\n\nNow let's see now how we can insert values to ndarrays. We can insert values to ndarrays using the `np.insert(ndarray, index, elements, axis)` function. This function inserts the given list of `elements` to `ndarray` right before the given `index` along the specified `axis`. Let's see some examples:\n#### Example 7.  Insert elements\n```python\n# We create a rank 1 ndarray \nx = np.array([1, 2, 5, 6, 7])\n\n# We create a rank 2 ndarray \nY = np.array([[1,2,3],[7,8,9]])\n\n# We print x\nprint()\nprint('Original x = ', x)\n\n# We insert the integer 3 and 4 between 2 and 5 in x. \nx = np.insert(x,2,[3,4])\n\n# We print x with the inserted elements\nprint()\nprint('x = ', x)\n\n# We print Y\nprint()\nprint('Original Y = \\n', Y)\n\n# We insert a row between the first and last row of y\nw = np.insert(Y,1,[4,5,6],axis=0)\n\n# We insert a column full of 5s between the first and second column of y\nv = np.insert(Y,1,5, axis=1)\n\n# We print w\nprint()\nprint('w = \\n', w)\n\n# We print v\nprint()\nprint('v = \\n', v)\n```\n\n> Original x =  [1 2 5 6 7]\n\n> x =  [1 2 3 4 5 6 7]\n\n> Original Y =  \n[[1 2 3]  \n&nbsp;[7 8 9]]\n\n> w =  \n[[1 2 3]  \n&nbsp;[4 5 6]  \n&nbsp;[7 8 9]]\n\n> v =  \n[[1 5 2 3]  \n&nbsp;[7 5 8 9]]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083006,
              "key": "60029026-ff4c-4d8e-bacb-7bed2cb35d85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## numpy.hstack and numpy.vstack\nSyntax:\n```\nnumpy.hstack(sequence_of_ndarray)\n```\nIt returns a stacked array formed by stacking the given arrays in sequence horizontally (column-wise). See the in-depth details [here](https://numpy.org/doc/stable/reference/generated/numpy.hstack.html). \n```\nnumpy.vstack(sequence_of_ndarray)\n```\nIt returns a stacked array formed by stacking the given arrays, will be at least 2-D, in sequence vertically (row-wise). See the in-depth details [here](https://numpy.org/doc/stable/reference/generated/numpy.vstack.html). \n\n\n\n\nNumPy also allows us to stack ndarrays on top of each other, or to stack them side by side. The stacking is done using either the `np.vstack()` function for vertical stacking, or the `np.hstack()` function for horizontal stacking. It is important to note that in order to stack ndarrays, the shape of the ndarrays must match. Let's see some examples:\n#### Example 8. Stack arrays\n```python\n# We create a rank 1 ndarray \nx = np.array([1,2])\n\n# We create a rank 2 ndarray \nY = np.array([[3,4],[5,6]])\n\n# We print x\nprint()\nprint('x = ', x)\n\n# We print Y\nprint()\nprint('Y = \\n', Y)\n\n# We stack x on top of Y\nz = np.vstack((x,Y))\n\n# We stack x on the right of Y. We need to reshape x in order to stack it on the right of Y. \nw = np.hstack((Y,x.reshape(2,1)))\n\n# We print z\nprint()\nprint('z = \\n', z)\n\n# We print w\nprint()\nprint('w = \\n', w)\n```\n\n> x =  [1 2]\n\n> Y =  \n[[3 4]  \n&nbsp;[5 6]]\n\n> z =  \n[[1 2]  \n&nbsp;[3 4]  \n&nbsp;[5 6]]\n\n> w =  \n[[3 4 1]  \n&nbsp;[5 6 2]]",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 531569,
          "key": "b267fa21-ebe2-4a73-b7b5-3c09c82782ff",
          "title": "Slicing ndarrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b267fa21-ebe2-4a73-b7b5-3c09c82782ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Slicing ndarrays",
                "uri": "https://video.udacity-data.com/topher/2020/October/5f757687_slicing-ndarrays/slicing-ndarrays.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 570066,
              "key": "a2434def-c303-47d0-b410-956a4cb28b70",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Slicing ndarrays",
              "instructor_notes": ""
            },
            {
              "id": 569289,
              "key": "9263e54d-de2e-4e3f-9091-54a65c133b0e",
              "title": "NumPy 4 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jeU7lLgyMms",
                "china_cdn_id": "jeU7lLgyMms.mp4"
              }
            },
            {
              "id": 531570,
              "key": "c776979f-23e9-4cce-99a9-8a9f2ee5abb3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As we mentioned earlier, in addition to being able to access individual elements one at a time, NumPy provides a way to access subsets of ndarrays. This is known as *slicing*. Slicing is performed by combining indices with the colon `:` symbol inside the square brackets. In general you will come across three types of slicing:\n\n```\n1. ndarray[start:end]\n2. ndarray[start:]\n3. ndarray[:end]\n```\n\nThe first method is used to select elements between the `start` and `end` indices. The second method is used to select all elements from the `start` index till the *last* index. The third method is used to select all elements from the *first* index till the `end` index. We should note that in methods one and three, the end index is *excluded*. We should also note that since ndarrays can be multidimensional, when doing slicing you usually have to specify a slice for each dimension of the array.\n\nWe will now see some examples of how to use the above methods to select different subsets of a rank 2 ndarray.\n#### Example 1. Slicing in a 2-D ndarray \n```\n# We create a 4 x 5 ndarray that contains integers from 0 to 19\nX = np.arange(20).reshape(4, 5)\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We select all the elements that are in the 2nd through 4th rows and in the 3rd to 5th columns\nZ = X[1:4,2:5]\n\n# We print Z\nprint('Z = \\n', Z)\n\n# We can select the same elements as above using method 2\nW = X[1:,2:5]\n\n# We print W\nprint()\nprint('W = \\n', W)\n\n# We select all the elements that are in the 1st through 3rd rows and in the 3rd to 4th columns\nY = X[:3,2:5]\n\n# We print Y\nprint()\nprint('Y = \\n', Y)\n\n# We select all the elements in the 3rd row\nv = X[2,:]\n\n# We print v\nprint()\nprint('v = ', v)\n\n# We select all the elements in the 3rd column\nq = X[:,2]\n\n# We print q\nprint()\nprint('q = ', q)\n\n# We select all the elements in the 3rd column but return a rank 2 ndarray\nR = X[:,2:3]\n\n# We print R\nprint()\nprint('R = \\n', R)\n```\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n> Z =  \n[[ 7  8  9]  \n&nbsp;[12 13 14]  \n&nbsp;[17 18 19]]\n\n> W =  \n[[ 7  8  9]  \n&nbsp;[12 13 14]  \n&nbsp;[17 18 19]]\n\n> Y =  \n[[ 2  3  4]  \n&nbsp;[ 7  8  9]  \n&nbsp;[12 13 14]]\n\n> v =  [10 11 12 13 14]\n\n> q =  [ 2  7 12 17]\n\n> R =  \n[[ 2]  \n&nbsp;[ 7]  \n&nbsp;[12]  \n&nbsp;[17]]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083015,
              "key": "74bd9c17-7d5e-462d-8c3b-62256865f23d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice that when we selected all the elements in the 3rd column, variable `q` above, the slice returned a rank 1 ndarray instead of a rank 2 ndarray. However, slicing `X` in a slightly different way, variable `R` above, we can actually get a rank 2 ndarray instead.\n\nIt is important to note that when we perform slices on ndarrays and save them into new variables, as we did above, the data is not copied into the new variable. This is one feature that often causes confusion for beginners. Therefore, we will look at this in a bit more detail.\n\nIn the above examples, when we make assignments, such as:\n\n```\nZ = X[1:4,2:5]\n```\n\nthe slice of the original array `X` is not copied in the variable `Z`. Rather, `X` and `Z` are now just two different names for the *same* ndarray. We say that slicing only creates a *view* of the original array. This means that if you make changes in `Z` you will be in effect changing the elements in `X` as well. Let's see this with an example:\n#### Example 2. Slicing and editing elements in a 2-D ndarray \n```\n# We create a 4 x 5 ndarray that contains integers from 0 to 19\nX = np.arange(20).reshape(4, 5)\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We select all the elements that are in the 2nd through 4th rows and in the 3rd to 4th columns\nZ = X[1:4,2:5]\n\n# We print Z\nprint()\nprint('Z = \\n', Z)\nprint()\n\n# We change the last element in Z to 555\nZ[2,2] = 555\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n```\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n\n> Z =  \n[[ 7  8  9]  \n&nbsp;[12 13 14]  \n&nbsp;[17 18 19]]\n\n\n> X =  \n[[  0   1   2   3   4]  \n&nbsp;[  5   6   7   8   9]  \n&nbsp;[ 10  11  12  13  14]  \n&nbsp;[ 15  16  17  18 555]]\n\nWe can clearly see in the above example that if we make changes to `Z`, `X` changes as well.\n\n## numpy.ndarray.copy\nSyntax: \n```\nndarray.copy(order='C')\n```\nIt returns a copy of the array. More details about the arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.copy.html).\n\n\nHowever, if we want to create a new ndarray that contains a copy of the values in the slice we need to use the `np.copy()` function. The `np.copy(ndarray)` function creates a copy of the given `ndarray`. This function can also be used as a method, in the same way as we did before with the reshape function. Let's do the same example we did before but now with copies of the arrays. We'll use `copy` both as a function and as a method.\n#### Example 3. Demonstrate the `copy()` function\n```\n# We create a 4 x 5 ndarray that contains integers from 0 to 19\nX = np.arange(20).reshape(4, 5)\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# create a copy of the slice using the np.copy() function\nZ = np.copy(X[1:4,2:5])\n\n#  create a copy of the slice using the copy as a method\nW = X[1:4,2:5].copy()\n\n# We change the last element in Z to 555\nZ[2,2] = 555\n\n# We change the last element in W to 444\nW[2,2] = 444\n\n# We print X\nprint()\nprint('X = \\n', X)\n\n# We print Z\nprint()\nprint('Z = \\n', Z)\n\n# We print W\nprint()\nprint('W = \\n', W)\n```\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n> Z =  \n[[  7   8   9]  \n&nbsp;[ 12  13  14]  \n&nbsp;[ 17  18 555]]\n\n> W =  \n[[  7   8   9]  \n&nbsp;[ 12  13  14]  \n&nbsp;[ 17  18 444]]\n\nWe can clearly see that by using the `copy` command, we are creating new ndarrays that are completely independent of each other.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083016,
              "key": "4e40abaf-463a-4009-bf6c-bbe9c762af71",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It is often useful to use one ndarray to make slices, select, or change elements in another ndarray. Let's see some examples:\n#### Example 4 a. Use an array as indices to either make slices, select, or change elements\n```python\n# We create a 4 x 5 ndarray that contains integers from 0 to 19\nX = np.arange(20).reshape(4, 5)\n\n# We create a rank 1 ndarray that will serve as indices to select elements from X\nindices = np.array([1,3])\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print indices\nprint('indices = ', indices)\nprint()\n\n# We use the indices ndarray to select the 2nd and 4th row of X\nY = X[indices,:]\n\n# We use the indices ndarray to select the 2nd and 4th column of X\nZ = X[:, indices]\n\n# We print Y\nprint()\nprint('Y = \\n', Y)\n\n# We print Z\nprint()\nprint('Z = \\n', Z)\n```\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]]\n\n> indices =  [1 3]\n\n> Y =  \n[[ 5  6  7  8  9]  \n&nbsp;[15 16 17 18 19]]\n\n> Z =  \n[[ 1  3]  \n&nbsp;[ 6  8]  \n&nbsp;[11 13]  \n&nbsp;[16 18]]\n",
              "instructor_notes": ""
            },
            {
              "id": 1083281,
              "key": "6cea512a-58c8-452f-9def-4b92e5b9a8be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "---\n#### Example 4 b. Use an array as indices to extract specific rows from a rank 2 ndarray.\n```python\nimport numpy as np\n# Let's create a rank 2 ndarray\nX = np.random.randint(1,20, size=(50,5))\nprint(\"Shape of X is: \", X.shape)\n```\n>Shape of X is:  (50, 5)\n\n```python\n# Create a rank 1 ndarray that contains a randomly chosen 10 values between `0` to `len(X)` (50)\n# The row_indices would represent the indices of rows of X\nrow_indices = np.random.randint(0,50, size=10)\nprint(\"Random 10 indices are: \", row_indices)\n```\n>Random 10 indices are:  [ 1 38 31 45 44 21  6 24 19 33]\n\n```python\n# To Do 1 - Print those rows of X whose indices are represented by entire row_indices ndarray\n# Hint - Use the row_indices ndarray to select specified rows of X\nX_subset = X[row_indices, :]\nprint(X_subset)\n\n# To Do 2 - Print those rows of X whose indices are present in row_indices[4:8]\nX_subset = X[row_indices[4:8], :]\nprint(X_subset)\n```\n\n---\n",
              "instructor_notes": ""
            },
            {
              "id": 1083279,
              "key": "ff35ee80-9469-46e1-9669-296d076e8794",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## numpy.diag\nSyntax: \n```\nnumpy.diag(array, k=0)\n```\nIt extracts or constructs the diagonal elements. More details about the arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.diag.html).\n\nNumPy also offers built-in functions to select specific elements within ndarrays. For example, the `np.diag(ndarray, k=N)` function extracts the elements along the `diagonal` defined by `N`. As default is `k=0`, which refers to the main diagonal. Values of `k > 0` are used to select elements in diagonals above the main diagonal, and values of `k < 0` are used to select elements in diagonals below the main diagonal. Let's see an example:\n#### Example 5. Demonstrate the `diag()` function\n```\n# We create a 4 x 5 ndarray that contains integers from 0 to 24\nX = np.arange(25).reshape(5, 5)\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print the elements in the main diagonal of X\nprint('z =', np.diag(X))\nprint()\n\n# We print the elements above the main diagonal of X\nprint('y =', np.diag(X, k=1))\nprint()\n\n# We print the elements below the main diagonal of X\nprint('w = ', np.diag(X, k=-1))\n```\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]  \n&nbsp;[20 21 22 23 24]]\n\n> z = [ 0  6 12 18 24]\n\n> y = [ 1  7 13 19]\n\n> w =  [ 5 11 17 23]\n\n## numpy.unique\nSyntax: \n```\nnumpy.unique(array, return_index=False, return_inverse=False, return_counts=False, axis=None)\n```\nIt returns the sorted unique elements of an array. Details about additional optional arguments are available [here](https://numpy.org/doc/stable/reference/generated/numpy.unique.html).\n\nIt is often useful to extract only the unique elements in an ndarray. We can find the unique elements in an ndarray by using the `np.unique()` function. The `np.unique(ndarray)` function returns the `unique` elements in the given `ndarray`, as in the example below:\n#### Example 6. Demonstrate the `unique()` function\n```python\n# Create 3 x 3 ndarray with repeated values\nX = np.array([[1,2,3],[5,2,8],[1,2,3]])\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n\n# We print the unique elements of X \nprint('The unique elements in X are:',np.unique(X))\n```\n\n> X =  \n[[1 2 3]  \n&nbsp;[5 2 8]  \n&nbsp;[1 2 3]]\n\n> The unique elements in X are: [1 2 3 5 8]",
              "instructor_notes": ""
            },
            {
              "id": 1083008,
              "key": "7c46c19c-1606-4e8f-8976-a313476352c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Resource\n* Refer to the more examples at [NumPy.org - Basic Slicing and Indexing](https://numpy.org/devdocs/reference/arrays.indexing.html?highlight=slicing#basic-slicing-and-indexing)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 531571,
          "key": "42233fd3-32a0-424d-84b3-49b96e44f1e1",
          "title": "Boolean Indexing, Set Operations, and Sorting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42233fd3-32a0-424d-84b3-49b96e44f1e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Boolean Indexing, Set Operations, and Sorting",
                "uri": "https://video.udacity-data.com/topher/2020/October/5f75a798_boolean-indexing-set-operations-and-sorting/boolean-indexing-set-operations-and-sorting.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 570068,
              "key": "a0eda410-6937-4859-b920-83b6275facaa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Boolean Indexing, Set Operations, and Sorting",
              "instructor_notes": ""
            },
            {
              "id": 569290,
              "key": "f1d13bfc-3ce4-41a9-9071-e550ba51b810",
              "title": "NumPy 5 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": ">**Erratum** - At time stamp 2:40 in the video above, it is shown to sort the unique elements as:\n`print(np.sort(np.unique(x)))`. In this statement, the `unique()` function already  returns the **sorted unique elements** of the array. Therefore, the `print(np.unique(x))` will give you equivalent result. \n\n",
              "video": {
                "youtube_id": "vGjI-WTnEbY",
                "china_cdn_id": "vGjI-WTnEbY.mp4"
              }
            },
            {
              "id": 531572,
              "key": "53b42898-cd00-4bef-8825-7038c3cb4f96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Up to now we have seen how to make slices and select elements of an ndarray using indices. This is useful when we know the exact indices of the elements we want to select. However, there are many situations in which we don't know the indices of the elements we want to select. For example, suppose we have a 10,000 x 10,000 ndarray of random integers ranging from 1 to 15,000 and we only want to select those integers that are less than 20. *Boolean* indexing can help us in these cases, by allowing us select elements using logical arguments instead of explicit indices. Let's see some examples:\n#### Example 1. Boolean indexing  \n```python\n# We create a 5 x 5 ndarray that contains integers from 0 to 24\nX = np.arange(25).reshape(5, 5)\n\n# We print X\nprint()\nprint('Original X = \\n', X)\nprint()\n\n# We use Boolean indexing to select elements in X:\nprint('The elements in X that are greater than 10:', X[X > 10])\nprint('The elements in X that less than or equal to 7:', X[X <= 7])\nprint('The elements in X that are between 10 and 17:', X[(X > 10) & (X < 17)])\n\n# We use Boolean indexing to assign the elements that are between 10 and 17 the value of -1\nX[(X > 10) & (X < 17)] = -1\n\n# We print X\nprint()\nprint('X = \\n', X)\nprint()\n```\n\n> Original X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 11 12 13 14]  \n&nbsp;[15 16 17 18 19]  \n&nbsp;[20 21 22 23 24]]\n\n> The elements in X that are greater than 10: [11 12 13 14 15 16 17 18 19 20 21 22 23 24]  \nThe elements in X that less than or equal to 7: [0 1 2 3 4 5 6 7]  \nThe elements in X that are between 10 and 17: [11 12 13 14 15 16]\n\n> X =  \n[[ 0  1  2  3  4]  \n&nbsp;[ 5  6  7  8  9]  \n&nbsp;[10 -1 -1 -1 -1]  \n&nbsp;[-1 -1 17 18 19]  \n&nbsp;[20 21 22 23 24]]\n",
              "instructor_notes": ""
            },
            {
              "id": 1083017,
              "key": "04725000-f086-4091-97c6-fbd54434680c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nIn addition to Boolean Indexing NumPy also allows for set operations. This useful when comparing ndarrays, for example, to find common elements between two ndarrays. Let's see some examples:\n#### Example 2. Set operations\n```python\n# We create a rank 1 ndarray\nx = np.array([1,2,3,4,5])\n\n# We create a rank 1 ndarray\ny = np.array([6,7,2,8,4])\n\n# We print x\nprint()\nprint('x = ', x)\n\n# We print y\nprint()\nprint('y = ', y)\n\n# We use set operations to compare x and y:\nprint()\nprint('The elements that are both in x and y:', np.intersect1d(x,y))\nprint('The elements that are in x that are not in y:', np.setdiff1d(x,y))\nprint('All the elements of x and y:',np.union1d(x,y))\n```\n\n> x =  [1 2 3 4 5]\n\n> y =  [6 7 2 8 4]\n\n> The elements that are both in x and y: [2 4]  \nThe elements that are in x that are not in y: [1 3 5]  \nAll the elements of x and y: [1 2 3 4 5 6 7 8]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083018,
              "key": "3c51c9c1-2fba-4a44-90f8-87897e864754",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## numpy.ndarray.sort method\nSyntax:\n```\nndarray.sort(axis=-1, kind=None, order=None)\n```\nThe method above sorts an array in-place. All arguments are optional, see the details [here](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.sort.html).\n\nLike with other functions we saw before, the `sort` can be used as a method as well as a function. The difference lies in how the data is stored in memory in this case. \n* When `numpy.sort()` is used as a function, it sorts the ndrrays out of place, meaning, that it doesn't change the original ndarray being sorted. \n* On the other hand, when you use `numpy.ndarray.sort()` as a method, `ndarray.sort()` sorts the ndarray in place, meaning, that the original array will be changed to the sorted one. \n\nLet's see some examples:\n#### Example 3. Sort arrays using sort() function\n```python\n# We create an unsorted rank 1 ndarray\nx = np.random.randint(1,11,size=(10,))\n\n# We print x\nprint()\nprint('Original x = ', x)\n\n# We sort x and print the sorted array using sort as a function.\nprint()\nprint('Sorted x (out of place):', np.sort(x))\n\n# When we sort out of place the original array remains intact. To see this we print x again\nprint()\nprint('x after sorting:', x)\n```\n\n> Original x =  [9 6 4 4 9 4 8 4 4 7]\n\n> Sorted x (out of place): [4 4 4 4 4 6 7 8 9 9]\n\n> x after sorting: [9 6 4 4 9 4 8 4 4 7]\n\nNotice that `np.sort()` sorts the array but, if the ndarray being sorted has repeated values, `np.sort()` leaves those values in the sorted array. However, if desired, we can use the `unique()` function. Let's see how we can sort the unique elements of `x` above:\n\n```python\n# Returns the sorted unique elements of an array\nprint(np.unique(x))\n```\n\n> [4 6 7 8 9]\n\nFinally, let's see how we can sort ndarrays in place, by using sort as a method:\n#### Example 4. Sort rank-1 arrays using sort() method\n```python\n# We create an unsorted rank 1 ndarray\nx = np.random.randint(1,11,size=(10,))\n\n# We print x\nprint()\nprint('Original x = ', x)\n\n# We sort x and print the sorted array using sort as a method.\nx.sort()\n\n# When we sort in place the original array is changed to the sorted array. To see this we print x again\nprint()\nprint('x after sorting:', x)\n```\n\n> Original x =  [9 9 8 1 1 4 3 7 2 8]\n\n> x after sorting: [1 1 2 3 4 7 8 8 9 9]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083019,
              "key": "1f5ed45d-408b-4807-bcc2-b5342dfcb1f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## numpy.sort function\nSyntax:\n```\nnumpy.sort(array, axis=-1, kind=None, order=None)\n```\nIt returns a sorted copy of an array. The `axis` denotes the axis along which to sort. It can take values in the range `-1` to `(ndim-1)`. Axis can take the following possible values for a given 2-D ndarray:\n* If nothing is specified, the default value is `axis = -1`, which sorts along the **last** axis. In the case of a given 2-D ndarray, the last axis value is `1`.\n* If explicitly `axis = None` is specified, the array is flattened before sorting. It will return a 1-D array. \n* If `axis = 0` is specified for a given 2-D array - For one column at a time, the function will sort all rows, without disturbing other elements. In the final output, *you will see that each column has been sorted individually.*    \n* The output of `axis = 1`  for a given 2-D array is vice-versa for `axis = 0`. In the final output, *you will see that each row has been sorted individually.*\n\n>**Tip**: As mentioned in [this](https://stackoverflow.com/questions/25773245/ambiguity-in-pandas-dataframe-numpy-array-axis-definition) discussion, you can read `axis = 0` as \"**down**\" and `axis = 1` as \"**across**\" the given 2-D array, to have a correct usage of axis in your methods/functions. \n\nRefer [here](https://numpy.org/doc/stable/reference/generated/numpy.sort.html) for details about the optional arguments. \n\n\nWhen sorting rank 2 ndarrays, we need to specify to the `np.sort()` function whether we are sorting by rows or columns. This is done by using the `axis` keyword. Let's see some examples:\n\n#### Example 5. Sort rank-2 arrays by specific axis. \n```python\n# We create an unsorted rank 2 ndarray\nX = np.random.randint(1,11,size=(5,5))\n\n# We print X\nprint()\nprint('Original X = \\n', X)\nprint()\n\n# We sort the columns of X and print the sorted array\nprint()\nprint('X with sorted columns :\\n', np.sort(X, axis = 0))\n\n# We sort the rows of X and print the sorted array\nprint()\nprint('X with sorted rows :\\n', np.sort(X, axis = 1))\n```\n\n> Original X =  \n[[6 1 7 6 3]  \n&nbsp; [3 9 8 3 5]  \n&nbsp; [6 5 8 9 3]  \n&nbsp; [2 1 5 7 7]  \n&nbsp; [9 8 1 9 8]]\n\n> X with sorted columns :  \n[[2 1 1 3 3]  \n&nbsp; [3 1 5 6 3]  \n&nbsp; [6 5 7 7 5]  \n&nbsp; [6 8 8 9 7]  \n&nbsp; [9 9 8 9 8]]\n\n> X with sorted rows :  \n[[1 3 6 6 7]  \n&nbsp; [3 3 5 8 9]  \n&nbsp; [3 5 6 8 9]  \n&nbsp; [1 2 5 7 7]  \n&nbsp; [1 8 8 9 9]]",
              "instructor_notes": ""
            },
            {
              "id": 1083002,
              "key": "348ea2ce-ac9a-4c9b-9781-3211be442c53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Resource\n* Try out the advanced examples of indexing available at [NumPy.org - Indexing](https://numpy.org/devdocs/user/basics.indexing.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 556005,
          "key": "bb71e2ab-85a3-4edd-9adb-adcae5e74132",
          "title": "Manipulating ndarrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bb71e2ab-85a3-4edd-9adb-adcae5e74132",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 556070,
              "key": "388802f3-9772-4bf2-9cd5-02d4d01769d8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "388802f3-9772-4bf2-9cd5-02d4d01769d8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6679190938714112",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\r\n\r\n# Create a 5 x 5 ndarray with consecutive integers from 1 to 25 (inclusive).\r\n# Afterwards use Boolean indexing to pick out only the odd numbers in the array\r\n\r\n# Create a 5 x 5 ndarray with consecutive integers from 1 to 25 (inclusive).\r\nX = \r\n\r\n# Use Boolean indexing to pick out only the odd numbers in the array\r\nY = \r\n",
                    "name": "pick_odd.py"
                  },
                  {
                    "text": "import numpy as np\r\n\r\nX = np.arange(1,26).reshape(5,5)\r\n\r\nY = X[X % 2 != 0]",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 531573,
          "key": "3a468c13-4d2d-4277-a49d-8634063d53cc",
          "title": "Arithmetic operations and Broadcasting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a468c13-4d2d-4277-a49d-8634063d53cc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Arithmetic operations and Broadcasting",
                "uri": "https://video.udacity-data.com/topher/2020/October/5f75b188_arithmetic-operations-and-broadcasting/arithmetic-operations-and-broadcasting.ipynb"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 570069,
              "key": "9ca16e13-d6b8-4ed7-a482-d27ac36758fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Arithmetic operations and Broadcasting",
              "instructor_notes": ""
            },
            {
              "id": 569291,
              "key": "9331afff-6115-48d9-b1f9-c2f58245b1f7",
              "title": "NumPy 6 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wtLRuGK0kW4",
                "china_cdn_id": "wtLRuGK0kW4.mp4"
              }
            },
            {
              "id": 531574,
              "key": "3e918002-2143-437d-aa25-fa7c6ce04171",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We have reached the last lesson in this Introduction to NumPy. In this last lesson we will see how NumPy does arithmetic operations on ndarrays. NumPy allows element-wise operations on ndarrays as well as matrix operations. In this lesson we will only be looking at element-wise operations on ndarrays. In order to do element-wise operations, NumPy sometimes uses something called *Broadcasting*. Broadcasting is the term used to describe how NumPy handles element-wise arithmetic operations with ndarrays of different shapes. For example, broadcasting is used implicitly when doing arithmetic operations between scalars and ndarrays.\n\nLet's start by doing element-wise addition, subtraction, multiplication, and division, between ndarrays. To do this, NumPy provides a functional approach, where we use functions such as `np.add()`, or by using arithmetic symbols, such as `+`, that resembles more how we write mathematical equations. Both forms will do the same operation, the only difference is that if you use the function approach, the functions usually have options that you can tweak using keywords. It is important to note that when performing element-wise operations, the shapes of the ndarrays being operated on, must have the same shape or be broadcastable. We'll explain more about this later in this lesson. Let's start by performing element-wise arithmetic operations on rank 1 ndarrays:\n### Example 1. Element-wise arithmetic operations on 1-D arrays\n```\n# We create two rank 1 ndarrays\nx = np.array([1,2,3,4])\ny = np.array([5.5,6.5,7.5,8.5])\n\n# We print x\nprint()\nprint('x = ', x)\n\n# We print y\nprint()\nprint('y = ', y)\nprint()\n\n# We perfrom basic element-wise operations using arithmetic symbols and functions\nprint('x + y = ', x + y)\nprint('add(x,y) = ', np.add(x,y))\nprint()\nprint('x - y = ', x - y)\nprint('subtract(x,y) = ', np.subtract(x,y))\nprint()\nprint('x * y = ', x * y)\nprint('multiply(x,y) = ', np.multiply(x,y))\nprint()\nprint('x / y = ', x / y)\nprint('divide(x,y) = ', np.divide(x,y))\n```\n\n> x =  [1 2 3 4]\n\n> y =  [ 5.5  6.5  7.5  8.5]\n\n> x + y =  [  6.5   8.5  10.5  12.5]  \nadd(x,y) =  [  6.5   8.5  10.5  12.5]\n\n> x - y =  [-4.5 -4.5 -4.5 -4.5]  \nsubtract(x,y) =  [-4.5 -4.5 -4.5 -4.5]\n\n> x * y =  [  5.5  13.   22.5  34. ]  \nmultiply(x,y) =  [  5.5  13.   22.5  34. ]\n\n> x / y =  [ 0.18181818  0.30769231  0.4         0.47058824]  \ndivide(x,y) =  [ 0.18181818  0.30769231  0.4         0.47058824]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083020,
              "key": "d4ca6120-9a2a-45fe-acf2-a7142c3e35ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can also perform the same element-wise arithmetic operations on rank 2 ndarrays. Again, remember that in order to do these operations the shapes of the ndarrays being operated on, must have the same shape or be broadcastable.\n### Example 2. Element-wise arithmetic operations on a 2-D array (Same shape)\n```\n# We create two rank 2 ndarrays\nX = np.array([1,2,3,4]).reshape(2,2)\nY = np.array([5.5,6.5,7.5,8.5]).reshape(2,2)\n\n# We print X\nprint()\nprint('X = \\n', X)\n\n# We print Y\nprint()\nprint('Y = \\n', Y)\nprint()\n\n# We perform basic element-wise operations using arithmetic symbols and functions\nprint('X + Y = \\n', X + Y)\nprint()\nprint('add(X,Y) = \\n', np.add(X,Y))\nprint()\nprint('X - Y = \\n', X - Y)\nprint()\nprint('subtract(X,Y) = \\n', np.subtract(X,Y))\nprint()\nprint('X * Y = \\n', X * Y)\nprint()\nprint('multiply(X,Y) = \\n', np.multiply(X,Y))\nprint()\nprint('X / Y = \\n', X / Y)\nprint()\nprint('divide(X,Y) = \\n', np.divide(X,Y))\n```\n\n> X =  \n[[1 2]  \n&nbsp;[3 4]]\n\n> Y =  \n[[ 5.5  6.5]  \n&nbsp;[ 7.5  8.5]]\n\n> X + Y =  \n[[  6.5   8.5]  \n&nbsp;[ 10.5  12.5]]\n\n> add(X,Y) =  \n[[  6.5   8.5]  \n&nbsp;[ 10.5  12.5]]\n\n> X - Y =  \n[[-4.5 -4.5]  \n&nbsp;[-4.5 -4.5]]\n\n> subtract(X,Y) =  \n[[-4.5 -4.5]  \n&nbsp;[-4.5 -4.5]]\n\n> X * Y =  \n[[  5.5  13. ]  \n&nbsp;[ 22.5  34. ]]\n\n> multiply(X,Y) =  \n[[  5.5  13. ]  \n&nbsp;[ 22.5  34. ]]\n\n> X / Y =  \n[[ 0.18181818  0.30769231]  \n&nbsp;[ 0.4         0.47058824]]\n\n> divide(X,Y) =  \n[[ 0.18181818  0.30769231]  \n&nbsp;[ 0.4         0.47058824]]\n\nWe can also apply mathematical functions, such as `sqrt(x)`, to all elements of an ndarray at once.\n### Example 3.  Additional mathematical functions\n```\n# We create a rank 1 ndarray\nx = np.array([1,2,3,4])\n\n# We print x\nprint()\nprint('x = ', x)\n\n# We apply different mathematical functions to all elements of x\nprint()\nprint('EXP(x) =', np.exp(x))\nprint()\nprint('SQRT(x) =',np.sqrt(x))\nprint()\nprint('POW(x,2) =',np.power(x,2)) # We raise all elements to the power of 2\n```\n\n> x =  [1 2 3 4]\n\n> EXP(x) = [  2.71828183   7.3890561   20.08553692  54.59815003]\n\n> SQRT(x) = [ 1.  1.41421356  1.73205081  2.        ]\n\n> POW(x,2) = [ 1  4  9 16]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083021,
              "key": "2fe79a52-4564-4910-a8e2-0defd58bdbbc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Another great feature of NumPy is that it has a wide variety of statistical functions. Statistical functions provide us with statistical information about the elements in an ndarray. \n>**Note** - Most of the statistical operations can be done using either a function or an equivalent method. For example, both [numpy.mean](https://numpy.org/doc/stable/reference/generated/numpy.mean.html) function and [numpy.ndarray.mean](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.mean.html#:~:text=method%20ndarray.,mean%20for%20full%20documentation.) method will return the arithmetic mean of the array elements along the given axis.\n\n\nLet's see some examples showing a variety of statistical operations:\n\n### Example 4. Statistical functions\n```\n# We create a 2 x 2 ndarray\nX = np.array([[1,2], [3,4]])\n\n# We print x\nprint()\nprint('X = \\n', X)\nprint()\n\nprint('Average of all elements in X:', X.mean())\nprint('Average of all elements in the columns of X:', X.mean(axis=0))\nprint('Average of all elements in the rows of X:', X.mean(axis=1))\nprint()\nprint('Sum of all elements in X:', X.sum())\nprint('Sum of all elements in the columns of X:', X.sum(axis=0))\nprint('Sum of all elements in the rows of X:', X.sum(axis=1))\nprint()\nprint('Standard Deviation of all elements in X:', X.std())\nprint('Standard Deviation of all elements in the columns of X:', X.std(axis=0))\nprint('Standard Deviation of all elements in the rows of X:', X.std(axis=1))\nprint()\nprint('Median of all elements in X:', np.median(X))\nprint('Median of all elements in the columns of X:', np.median(X,axis=0))\nprint('Median of all elements in the rows of X:', np.median(X,axis=1))\nprint()\nprint('Maximum value of all elements in X:', X.max())\nprint('Maximum value of all elements in the columns of X:', X.max(axis=0))\nprint('Maximum value of all elements in the rows of X:', X.max(axis=1))\nprint()\nprint('Minimum value of all elements in X:', X.min())\nprint('Minimum value of all elements in the columns of X:', X.min(axis=0))\nprint('Minimum value of all elements in the rows of X:', X.min(axis=1))\n```\n\n> X =  \n[[1 2]  \n&nbsp;[3 4]]\n\n> Average of all elements in X: 2.5  \nAverage of all elements in the columns of X: [ 2.  3.]  \nAverage of all elements in the rows of X: [ 1.5  3.5]\n\n> Sum of all elements in X: 10  \nSum of all elements in the columns of X: [4 6]  \nSum of all elements in the rows of X: [3 7]\n\n> Standard Deviation of all elements in X: 1.11803398875  \nStandard Deviation of all elements in the columns of X: [ 1.  1.]  \nStandard Deviation of all elements in the rows of X: [ 0.5  0.5]\n\n> Median of all elements in X: 2.5  \nMedian of all elements in the columns of X: [ 2.  3.]  \nMedian of all elements in the rows of X: [ 1.5  3.5]\n\n> Maximum value of all elements in X: 4  \nMaximum value of all elements in the columns of X: [3 4]  \nMaximum value of all elements in the rows of X: [2 4]\n\n> Minimum value of all elements in X: 1  \nMinimum value of all elements in the columns of X: [1 2]  \nMinimum value of all elements in the rows of X: [1 3]\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1083022,
              "key": "274489e5-2a40-44fa-be7d-9a51d359da72",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Finally, let's see how NumPy can add single numbers to all the elements of an ndarray without the use of complicated loops.\n### Example 5. Change value of all elements of an array\n```\n# We create a 2 x 2 ndarray\nX = np.array([[1,2], [3,4]])\n\n# We print x\nprint()\nprint('X = \\n', X)\nprint()\n\nprint('3 * X = \\n', 3 * X)\nprint()\nprint('3 + X = \\n', 3 + X)\nprint()\nprint('X - 3 = \\n', X - 3)\nprint()\nprint('X / 3 = \\n', X / 3)\n```\n\n> X =  \n[[1 2]  \n&nbsp;[3 4]]\n\n> 3 * X =  \n[[ 3  6]  \n&nbsp;[ 9 12]]\n\n> 3 + X =  \n[[4 5]  \n&nbsp;[6 7]]\n\n> X - 3 =  \n[[-2 -1]  \n&nbsp;[ 0  1]]\n\n> X / 3 =  \n[[ 0.33333333  0.66666667]  \n&nbsp;[ 1.  1.33333333]]\n\nIn the examples above, NumPy is working behind the scenes to broadcast `3` along the ndarray so that they have the same shape. This allows us to add 3 to each element of `X` with just one line of code.\n\nSubject to certain constraints, Numpy can do the same for two ndarrays of different shapes, as we can see below.\n### Example 6. Arithmetic operations on 2-D arrays (Compatible shape)\n```\n# We create a rank 1 ndarray\nx = np.array([1,2,3])\n\n# We create a 3 x 3 ndarray\nY = np.array([[1,2,3],[4,5,6],[7,8,9]])\n\n# We create a 3 x 1 ndarray\nZ = np.array([1,2,3]).reshape(3,1)\n\n# We print x\nprint()\nprint('x = ', x)\nprint()\n\n# We print Y\nprint()\nprint('Y = \\n', Y)\nprint()\n\n# We print Z\nprint()\nprint('Z = \\n', Z)\nprint()\n\nprint('x + Y = \\n', x + Y)\nprint()\nprint('Z + Y = \\n',Z + Y)\n```\n\n> x = [1 2 3]\n\n> Y =  \n[[1 2 3]  \n&nbsp;[4 5 6]  \n&nbsp;[7 8 9]]\n\n\n> Z =  \n[[1]  \n&nbsp;[2]  \n&nbsp;[3]]\n\n> x + Y =  \n[[ 2  4  6]  \n&nbsp;[ 5  7  9]  \n&nbsp;[ 8 10 12]]\n\n> Z + Y =  \n[[ 2  3  4]  \n&nbsp;[ 6  7  8]  \n&nbsp;[10 11 12]]\n\nAs before, NumPy is able to add 1 x 3 and 3 x 1 ndarrays to  3 x 3 ndarrays by broadcasting the smaller ndarrays along the big ndarray so that they have compatible shapes. In general, NumPy can do this provided that the smaller ndarray, such as the 1 x 3 ndarray in our example, can be expanded to the shape of the larger ndarray in such a way that the resulting broadcast is unambiguous.\n\nMake sure you check out the NumPy Documentation for more information on Broadcasting and its rules:  \n[Broadcasting](https://numpy.org/devdocs/user/basics.broadcasting.html)",
              "instructor_notes": ""
            },
            {
              "id": 1083031,
              "key": "8548a906-d379-404c-b3c2-41aaea232d67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Glossary of Mathematical Functions\n* Refer to this list of [NumPy Mathematical  Functions](https://numpy.org/devdocs/reference/routines.math.html?highlight=arithmetic#mathematical-functions) to find the one you need. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 556003,
          "key": "b4a9d454-157b-42dc-93fe-98886e6ea25d",
          "title": "Creating ndarrays with Broadcasting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4a9d454-157b-42dc-93fe-98886e6ea25d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 556004,
              "key": "986f9819-fe75-45c1-93c9-95a1b4490e50",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "986f9819-fe75-45c1-93c9-95a1b4490e50",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Create an ndarray",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5646204998909952",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\r\n\r\n# Use Broadcasting to create a 4 x 4 ndarray that has its first\r\n# column full of 1s, its second column full of 2s, its third\r\n# column full of 3s, etc.. \r\n\r\n# Do not change the name of this array. \r\n# Please don't print anything from your code! The TEST RUN button below will print your array. \r\nX = \r\n",
                    "name": "create_ndarray.py"
                  },
                  {
                    "text": "import numpy as np\r\n# We will make use of array multiplication, as demonstrated on the previous page:\r\n# \"Example 6. Arithmetic operations on 2-D arrays (Compatible shape)\"\r\n\r\n\r\n# np.ones((4,4)) will give you a 4 x 4 matrix\r\n#[[1. 1. 1. 1.],\r\n# [1. 1. 1. 1.],\r\n# [1. 1. 1. 1.],\r\n# [1. 1. 1. 1.]]\r\n\r\n# np.arange(1,5) will give you a 1 x 4 matrix\r\n# [1 2 3 4]\r\n\r\n# X can be calculated by multiplying the above two matrices, as shown below, to get:\r\n#[[1. 2. 3. 4.],\r\n# [1. 2. 3. 4.],\r\n# [1. 2. 3. 4.],\r\n# [1. 2. 3. 4.]]\r\nX = np.ones((4,4)) * np.arange(1,5)\r\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 1083282,
          "key": "a5aeff79-a71c-4eba-9760-9559afba13a8",
          "title": "Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5aeff79-a71c-4eba-9760-9559afba13a8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1083283,
              "key": "aa5c2855-f9e0-4681-b09f-de7f2b727aea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Glossary\nBelow is the summary of all the functions and methods that you learned in this lesson:\n### Category: General Purpose\n|**Function/Method**|**Description**|\n|---|---|\n|[`numpy.ndarray.dtype`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.dtype.html)| Return the data-type of the elements of the array. Remember, arrays are homogeneous. |\n|[`numpy.ndarray.ndim`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.ndim.html)|Return the *number* of array-dimensions (rank), e.g., it will return 2 for a 4x3 array. |\n|[`numpy.ndarray.shape`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.shape.html)|Return a tuple representing the array dimensions, e.g., it will return `(rows,columns)` for a rank 2 array.|\n|[`numpy.ndarray.size`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.size.html)|Return the number of elements present in the array.|\n|[`numpy.save`](https://numpy.org/doc/stable/reference/generated/numpy.save.html)|Save an array to `.npy` (numpy) format.|\n|[`numpy.load`](https://numpy.org/doc/stable/reference/generated/numpy.load.html)|Load array  from the `.npy` files.|\n|[`numpy.random.random`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.random.html)|Return random floats values from the interval [0.0, 1.0), in a specified shape.|\n|[`numpy.random.randint`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.randint.html)|Return random integers from the half-open interval [a, b), in a specified shape.|\n|[`numpy.random.normal`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html)|Return random samples from a Gaussian (normal) distribution.|\n|[`numpy.random.permutation`](https://numpy.org/devdocs/reference/random/generated/numpy.random.permutation.html)|Return a randomly permuted sequence from the given list|\n|[`numpy.reshape`](https://numpy.org/doc/stable/reference/generated/numpy.reshape.html)<br>[`numpy.ndarray.reshape`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape)|Returns an array containing the same elements with a new shape, without affecting the the original array.|\n\n\n### Category: Array Creation\n|**Function/Method**|**Description**|\n|---|---|\n|[`numpy.ones`](https://numpy.org/devdocs/reference/generated/numpy.ones.html)|Return a new array of given shape and type, filled with 1s.|\n|[`numpy.zeros`](https://numpy.org/doc/stable/reference/generated/numpy.zeros.html#numpy.zeros)|Return a new array of given shape and type, filled with 0s.|\n|[`numpy.full`](https://numpy.org/doc/stable/reference/generated/numpy.full.html#numpy.full)|Return a new array of given shape and type, filled with a specific value.|\n|[`numpy.eye`](https://numpy.org/doc/stable/reference/generated/numpy.eye.html#numpy-eye)|Return a 2-D array with 1s on the diagonal and 0s elsewhere.|\n|[`numpy.diag`](https://numpy.org/doc/stable/reference/generated/numpy.diag.html)|Extract the diagonal elements.|\n|[`numpy.unique`](https://numpy.org/doc/stable/reference/generated/numpy.unique.html)|Return the sorted unique elements of an array. |\n|[`numpy.array`](https://numpy.org/doc/stable/reference/generated/numpy.array.html)|Create an n-dimensional array.|\n|[`numpy.arange`](https://numpy.org/doc/stable/reference/generated/numpy.arange.html)|Return evenly spaced values within a given half-open interval [a, b).|\n|[`numpy.linspace`](https://numpy.org/doc/stable/reference/generated/numpy.linspace.html#numpy.linspace)|Return evenly spaced numbers over a specified interval [a,b].|\n|[`numpy.ndarray.copy`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.copy.html)|Returns a copy of the array. |\n",
              "instructor_notes": ""
            },
            {
              "id": 1083289,
              "key": "055d0ef2-22d5-4892-aa36-b84810496f62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n### Category: Operating with Elements and Indices\n|**Function/Method**|**Description**|\n|---|---|\n|[`numpy.insert`](https://numpy.org/doc/stable/reference/generated/numpy.insert.html)|Insert values along the given axis before the specified indices.|\n|[`numpy.delete`](https://numpy.org/doc/stable/reference/generated/numpy.delete.html)|Return a new array, after deleting sub-arrays along a specified axis. |\n|[`numpy.append`](https://numpy.org/doc/stable/reference/generated/numpy.append.html)|Append values at the end of the specified array.|\n|[`numpy.hstack`](https://numpy.org/doc/stable/reference/generated/numpy.hstack.html)|Return a stacked array formed by stacking the given arrays in sequence horizontally (column-wise).|\n|[`numpy.vstack`](https://numpy.org/doc/stable/reference/generated/numpy.vstack.html)|Return a stacked array formed by stacking the given arrays, will be at least 2-D, in sequence vertically (row-wise).|\n|[`numpy.sort`](https://numpy.org/doc/stable/reference/generated/numpy.sort.html)|Return a sorted copy of an array.|\n|[`numpy.ndarray.sort`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.sort.html#numpy-ndarray-sort)|Sort an array in-place. |\n\n### Category: Set Operations\n|**Function/Method**|**Description**|\n|---|---|\n|[`numpy.intersect1d`](https://numpy.org/doc/stable/reference/generated/numpy.intersect1d.html#numpy-intersect1d)|Find the intersection of two arrays.|\n|[`numpy.setdiff1d`](https://numpy.org/doc/stable/reference/generated/numpy.setdiff1d.html#numpy-setdiff1d)|Find the set difference of two arrays.|\n|[`numpy.union1d`](https://numpy.org/doc/stable/reference/generated/numpy.union1d.html)|Return the unique, sorted array of values that are in either of the two input arrays.|\n\n### Category: Arithmetic and Statistical Operations\n|**Function/Method**|**Description**|\n|---|---|\n|[`numpy.add`](https://numpy.org/doc/stable/reference/generated/numpy.add.html)|Element-wise add given arrays|\n|[`numpy.subtract`](https://numpy.org/doc/stable/reference/generated/numpy.subtract.html)|Subtract arguments of given arrays, element-wise.|\n|[`numpy.multiply`](https://numpy.org/doc/stable/reference/generated/numpy.multiply.html)|Multiply arguments of given arrays, element-wise.|\n|[`numpy.divide`](https://numpy.org/doc/stable/reference/generated/numpy.divide.html)|Returns a true division of the inputs, element-wise.|\n|[`numpy.exp`](https://numpy.org/doc/stable/reference/generated/numpy.exp.html)|Calculate the exponential of all elements in the input array.|\n|[`numpy.power`](https://numpy.org/doc/stable/reference/generated/numpy.power.html)|First array elements raised to powers from second array, element-wise.|\n|[`numpy.sqrt`](https://numpy.org/doc/stable/reference/generated/numpy.sqrt.html)|Return the non-negative square-root of an array, element-wise.|\n|[`numpy.ndarray.min`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.min.html)|Return the minimum along the specified axis.|\n|[`numpy.ndarray.max`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.max.html)|Return the maximum along a given axis.|\n|[`numpy.mean`](https://numpy.org/doc/stable/reference/generated/numpy.mean.html)<br>[`numpy.ndarray.mean`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.mean.html#:~:text=method%20ndarray.,mean%20for%20full%20documentation.)|Compute the arithmetic mean along the specified axis.|\n|[`numpy.median`](https://numpy.org/doc/stable/reference/generated/numpy.median.html)|Compute the median along the specified axis.|",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 552937,
          "key": "1e2832eb-6d79-4582-8426-cc0a6005762e",
          "title": "Getting Set Up for the Mini-Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e2832eb-6d79-4582-8426-cc0a6005762e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1083023,
              "key": "e4351214-5a1c-40b9-b738-8658ec54990c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting Set Up for the Mini-Project\nThere are two ways to code for the current Mini-Project:\n1. **Workspace** - You can use the *Workspace* provided on the very next page. The workspace already has the project instructions to follow. \n2. **Your Personal Computer** - You will have to use the Jupyter notebook on your PC or Mac. If you do not have the Jupyter notebook installed, refer to the Anaconda lesson for installation instructions. If you choose this option to work on the project, you may work outside the classroom, and even without an internet connection. You can find the starter code and instruction in this [GitHub repository](https://github.com/udacity/AIPND). The file to download is `Mean Normalization and Data Separation.ipynb` available [here](https://github.com/udacity/AIPND/blob/master/NumPy%20Mini-Project/Mean%20Normalization%20and%20Data%20Separation.ipynb). \n>**You cannot download an individual file. Git allows downloading only the entire repository.**\n\n\nIf you choose to work locally, refer to the next section below to download the Git repository to your PC/Mac. \n\n## How to download the Git repository\n**Step 1.** Download and install the [Git for your OS](https://git-scm.com/downloads) <br><br>\n**Step 2.** Open terminal (macOS/Linux) or Git Bash (Windows). <br><br>\n**Step 3.** Run the following commands:\n```bash\n# Change your directory\ncd <path_to_a_directory_where_you_want_to_download_the_repository>\n\n# Download the repository\ngit clone https://github.com/udacity/AIPND.git\n\n# Go inside the downloaded repository\ncd AIPND/NumPy\\ Mini-Project/\n\n# List the files. Did you see the `solution.ipynb` file as well? Refer to the solution only when it becomes essential. \nls\n\n# OPTIONAL STEP - Copy the .ipynb file to another directory\ncp Mean\\ Normalization\\ and\\ Data\\ Separation.ipynb <complete_path_to_the_directory_where_you_want_to_keep_this_notebook>\n```\n<br>\n**Step 4.** Navigate to the directory where your `Mean Normalization and Data Separation.ipynb` file is residing.\n```\n# start the server\njupyter notebook\n```\nLoad the `Mean Normalization and Data Separation.ipynb` file to the notebook server. \n\n\n\n\n ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 560539,
          "key": "6b2cf38a-205c-4c94-bc2a-c0f5cfb89220",
          "title": "Mini-Project: Mean Normalization and Data Separation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b2cf38a-205c-4c94-bc2a-c0f5cfb89220",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 587265,
              "key": "5668a9bc-1ac7-46fc-921e-7ed220e7b083",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5ed0862d",
              "pool_id": "jupyter",
              "view_id": "5ed0862d-f72e-497c-9d47-e0bc245373c9",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Mean%20Normalization%20and%20Data%20Separation.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 1083028,
              "key": "b4642389-229f-4478-9531-2dc236739b6c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\nYou can refer the the `Solution.ipynb` available in the notebook server. See the snapshots below to navigate to the Solution file. ",
              "instructor_notes": ""
            },
            {
              "id": 1083029,
              "key": "13621900-28b4-4b8b-8ca7-b40f70b680a3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/October/5f75de62_screenshot-2020-10-01-at-7.17.54-pm/screenshot-2020-10-01-at-7.17.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/13621900-28b4-4b8b-8ca7-b40f70b680a3",
              "caption": "Click on the Jupyter icon on the top-left of the notebook. ",
              "alt": "",
              "width": 993,
              "height": 159,
              "instructor_notes": null
            },
            {
              "id": 1083030,
              "key": "dd763116-a473-4e96-958d-490d82940999",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/October/5f75de73_screenshot-2020-10-01-at-7.18.55-pm/screenshot-2020-10-01-at-7.18.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/dd763116-a473-4e96-958d-490d82940999",
              "caption": "Click on the `Solution.ipynb` file",
              "alt": "",
              "width": 992,
              "height": 341,
              "instructor_notes": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}