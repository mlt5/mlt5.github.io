{
  "data": {
    "lesson": {
      "id": 590602,
      "key": "deafd1ea-f773-4207-9193-23a4006c6f21",
      "title": "Support Vector Machines",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Support vector machines are a common method used for classification problems.  They have been proven effective using what is known as the 'kernel' trick!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/deafd1ea-f773-4207-9193-23a4006c6f21/590602/1537291663167/Support+Vector+Machines+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/deafd1ea-f773-4207-9193-23a4006c6f21/590602/1537291657619/Support+Vector+Machines+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 495925,
          "key": "2d642b60-2f98-45b6-928e-967222fd8f75",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2d642b60-2f98-45b6-928e-967222fd8f75",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 531143,
              "key": "9fd60657-7e42-465e-8e7f-0f10538bafcb",
              "title": "Support Vector Machine V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LBmM6pZCrI0",
                "china_cdn_id": "LBmM6pZCrI0.mp4"
              }
            }
          ]
        },
        {
          "id": 495926,
          "key": "2937b557-c62b-45a5-b60f-4ae1fb0864e4",
          "title": "Which line is better?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2937b557-c62b-45a5-b60f-4ae1fb0864e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498611,
              "key": "a4c826b1-9529-4a9e-a571-770962e68938",
              "title": "SVM 01 Which Line Is Better V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NCml_NCvd1I",
                "china_cdn_id": "NCml_NCvd1I.mp4"
              }
            },
            {
              "id": 498697,
              "key": "ca87def3-2100-4a04-a3c8-fe584982707f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a51c204_screen-shot-2018-01-06-at-10.44.48-pm/screen-shot-2018-01-06-at-10.44.48-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ca87def3-2100-4a04-a3c8-fe584982707f",
              "caption": "",
              "alt": "",
              "width": 1635,
              "height": 690,
              "instructor_notes": null
            },
            {
              "id": 498698,
              "key": "d990cd1c-c170-4099-9641-1c8c68d1a54b",
              "title": "Line Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d990cd1c-c170-4099-9641-1c8c68d1a54b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which one is a better line?",
                "answers": [
                  {
                    "id": "a1515307544639",
                    "text": "The one in the left (yellow)",
                    "is_correct": true
                  },
                  {
                    "id": "a1515307563794",
                    "text": "The one in the right (green)",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495927,
          "key": "3745efb8-f6ed-4037-8d27-167be1973253",
          "title": "Minimizing Distances",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3745efb8-f6ed-4037-8d27-167be1973253",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498612,
              "key": "5630fe95-bc96-41fe-bd34-674a957a29f1",
              "title": "SVM 02 Minimizing Distances V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mNKk2dBsNGA",
                "china_cdn_id": "mNKk2dBsNGA.mp4"
              }
            }
          ]
        },
        {
          "id": 495928,
          "key": "3893d977-211b-4557-8962-852619a2a22e",
          "title": "Error Function Intuition",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3893d977-211b-4557-8962-852619a2a22e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498613,
              "key": "dab03fc0-61a2-4e2e-b175-ccc52e1c6cb2",
              "title": "SVM 03 Error Function V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "l-ahImxoi-U",
                "china_cdn_id": "l-ahImxoi-U.mp4"
              }
            }
          ]
        },
        {
          "id": 495929,
          "key": "4efed5c4-7bb1-4ee0-b496-9962f23798e7",
          "title": "Perceptron Algorithm",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4efed5c4-7bb1-4ee0-b496-9962f23798e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502664,
              "key": "4f0d6df9-0af3-40cc-bc5e-593fbd00ad17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptron Algorithm\n\nLet's recall something we've seen before: The perceptron algorithm. Before, we saw it as a trick in which we started with a random line, and iterated on a step in order to slowly walk the line towards the misclassified points, so we can classify them correctly. However, we can also see this algorithm as an algorithm which minimizes an error function. Here's the way to do this:",
              "instructor_notes": ""
            },
            {
              "id": 498614,
              "key": "38da0d7f-636e-4b1d-a6ca-1607a2cc13e2",
              "title": "SVM 04 Perceptron Algorithm V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IIlQHBOrD6Q",
                "china_cdn_id": "IIlQHBOrD6Q.mp4"
              }
            }
          ]
        },
        {
          "id": 495930,
          "key": "7c9469f1-d0d1-4e96-8c05-2728488bf648",
          "title": "Classification Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c9469f1-d0d1-4e96-8c05-2728488bf648",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498615,
              "key": "0948a66a-7e52-4bc3-a12b-44a9c569d0c6",
              "title": "SVM 05 Classification Error V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nWGVAGXwvGE",
                "china_cdn_id": "nWGVAGXwvGE.mp4"
              }
            }
          ]
        },
        {
          "id": 495931,
          "key": "91012d46-a863-4a79-aa4d-bd4d4784fe3a",
          "title": "Margin Error",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91012d46-a863-4a79-aa4d-bd4d4784fe3a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498711,
              "key": "d09d92ff-b26e-41b5-a3e5-8bd32e7622b8",
              "title": "SVM 06 Margin Error V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dSac8Gfgbok",
                "china_cdn_id": "dSac8Gfgbok.mp4"
              }
            }
          ]
        },
        {
          "id": 498739,
          "key": "b4e94dac-84d1-4243-b0d2-f8f7c815d103",
          "title": "(Optional) Margin Error Calculation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4e94dac-84d1-4243-b0d2-f8f7c815d103",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498755,
              "key": "51f0beee-88c6-406d-b553-5529637aba16",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# (Optional) Margin Error Calculation\n\nIn this optional section, we'll calculate the distance between the two margins in the SVM.\n\nFirst, recall the notation, where Where <span class=\"mathquill\">W = (w_1, w_2)</span> and <span class=\"mathquill\">x = (x_1,x_2)</span>, and <span class=\"mathquill\">Wx = w_1x_1 + w_2x_2</span>.\n\n\nNotice that all we have three lines, of the following equations:\n- <span class=\"mathquill\">Wx+b=1</span>\n- <span class=\"mathquill\">Wx+b=0</span>\n- <span class=\"mathquill\">Wx+b=-1</span>\n\nAnd in order to find the distance between the first and the third, we only need to find the distance between the first two, and multiply by two, as these are three equidistant parallel lines. That is, we need to find the distance between the two lines in Figure 1.\n",
              "instructor_notes": ""
            },
            {
              "id": 498745,
              "key": "2419f282-b296-4e47-83c5-925605228a7f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52bf15_margin-geometry-images.001/margin-geometry-images.001.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2419f282-b296-4e47-83c5-925605228a7f",
              "caption": "Figure 1",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 498756,
              "key": "feeba8b7-5e8f-4354-a4c4-8d21df071875",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, notice that since we're only measuring distances between lines, we might as well translate these two lines, so that one of them touches the origin (Figure 2). Thus, our new equations are:\n- <span class=\"mathquill\">Wx=0</span>\n- <span class=\"mathquill\">Wx=1</span>",
              "instructor_notes": ""
            },
            {
              "id": 498746,
              "key": "19c54970-925c-4c16-9017-72d827702f93",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52bf1e_margin-geometry-images.002/margin-geometry-images.002.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/19c54970-925c-4c16-9017-72d827702f93",
              "caption": "Figure 2",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 498757,
              "key": "32dd1b54-68d6-40fc-a771-58443c45ff3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, the first line has equation <span class=\"mathquill\">Wx=0</span>, which means it's orthogonal (perpendicular) to the vector <span class=\"mathquill\">W = (w_1, w_2)</span> colored in red (Figure 3).",
              "instructor_notes": ""
            },
            {
              "id": 498747,
              "key": "aeef8b1b-3df3-4450-8bab-84b23d568656",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52bf2b_margin-geometry-images.003/margin-geometry-images.003.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/aeef8b1b-3df3-4450-8bab-84b23d568656",
              "caption": "Figure 3",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 498758,
              "key": "46094f07-52c0-4260-a7b1-d377bef055dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This vector intersects the line of equation <span class=\"mathquill\">Wx=1</span> at the blue point (Figure 4). Let's say the point has coordinates <span class=\"mathquill\">(p,q)</span>. Then, we know two things:\n- <span class=\"mathquill\">w_1p + w_2q = 1</span> (since the point is over the line), and\n- <span class=\"mathquill\">(p,q)</span> is a multiple of <span class=\"mathquill\">(w_1, w_2)</span>, since the point is over the vector <span class=\"mathquill\">W = (w_1, w_2)</span>.\n\nWe can solve these two equations as follows: Let <span class=\"mathquill\">(p,q) = k(w_1, w_2)</span> for some <span class=\"mathquill\">k</span>. That turns our first equation into <span class=\"mathquill\">k(w_1^2 +\n w_2^2) = 1.</span> Therefore, <span class=\"mathquill\">k = \\frac{1}{w_1^2+w_2^2} = \\frac{1}{|W|^2}</span>. That means, our blue point represents the vector <span class=\"mathquill\">\\frac{W}{|W|^2}</span>, as shown in Figure 4.",
              "instructor_notes": ""
            },
            {
              "id": 498748,
              "key": "c48326c8-9ea1-432c-a3ac-9c24ead2d186",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52bf35_margin-geometry-images.004/margin-geometry-images.004.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c48326c8-9ea1-432c-a3ac-9c24ead2d186",
              "caption": "Figure 4",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 498759,
              "key": "5588351a-8e4e-4368-9971-5ac3613f6e4c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, the distance between the two lines, is simply the norm of the blue vector. Since the denominator is a scalar, one can see that the norm of the vector <span class=\"mathquill\">\\frac{W}{|W|^2}</span> is precisely <span class=\"mathquill\">\\frac{|W|}{|W|^2}</span>, which is the same as  <span class=\"mathquill\">\\frac{1}{|W|}</span> (Figure 5).",
              "instructor_notes": ""
            },
            {
              "id": 498749,
              "key": "60c745a8-30e1-4bc3-ba7a-627065388236",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52bf47_margin-geometry-images.005/margin-geometry-images.005.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/60c745a8-30e1-4bc3-ba7a-627065388236",
              "caption": "Figure 5",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 498760,
              "key": "679c42ce-cb9d-4f44-981e-bc6e5f4acee6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And finally, we remember that the desired distance was the sum of these two distances between the consecutive parallel lines (Figure 6). Since each one of them is  <span class=\"mathquill\">\\frac{1}{|W|}</span>, then the total distance is  <span class=\"mathquill\">\\frac{2}{|W|}</span>.",
              "instructor_notes": ""
            },
            {
              "id": 498751,
              "key": "5507310c-d48c-44be-ad26-c79ebc0d683f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52bf73_margin-geometry-images.008/margin-geometry-images.008.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5507310c-d48c-44be-ad26-c79ebc0d683f",
              "caption": "Figure 6",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 495932,
          "key": "1101ea43-427d-4ba2-b1cd-dbd2111d201d",
          "title": "Error Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1101ea43-427d-4ba2-b1cd-dbd2111d201d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498708,
              "key": "56660da8-2963-40d3-9878-781561841871",
              "title": "SVM 07 Error Function V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "A1wbrcSYc1c",
                "china_cdn_id": "A1wbrcSYc1c.mp4"
              }
            }
          ]
        },
        {
          "id": 495933,
          "key": "7ea5a50e-b463-4214-97c7-2a1af8f0e246",
          "title": "The C Parameter",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7ea5a50e-b463-4214-97c7-2a1af8f0e246",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498709,
              "key": "551bf380-b2e8-4f97-9077-1a6495e7200c",
              "title": "SVM 08 The C Parameter V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6CxPhVo0hRw",
                "china_cdn_id": "6CxPhVo0hRw.mp4"
              }
            }
          ]
        },
        {
          "id": 495934,
          "key": "be4088af-7009-44a7-8321-9e577005f6ba",
          "title": "Polynomial Kernel 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be4088af-7009-44a7-8321-9e577005f6ba",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498710,
              "key": "95d37ffe-44e4-4de0-bcaa-c01bc0c59a5f",
              "title": "SVM 09 Polynomial Kernel 1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8t2tVDHNBnk",
                "china_cdn_id": "8t2tVDHNBnk.mp4"
              }
            }
          ]
        },
        {
          "id": 495935,
          "key": "02d0588d-eec9-4fad-9f0d-48042a62a3aa",
          "title": "Polynomial Kernel 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "02d0588d-eec9-4fad-9f0d-48042a62a3aa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498718,
              "key": "7887680f-3069-4b41-93ad-76b4dbd3d28d",
              "title": "SVM 10 Polynomial Kernel 2 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9RfFvZ9DIRg",
                "china_cdn_id": "9RfFvZ9DIRg.mp4"
              }
            },
            {
              "id": 533926,
              "key": "e90260eb-c9d8-4032-a49a-d720d4968a56",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/February/5a78e676_polynomial-kernel-2-quiz/polynomial-kernel-2-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e90260eb-c9d8-4032-a49a-d720d4968a56",
              "caption": "",
              "alt": "",
              "width": 638,
              "height": 358,
              "instructor_notes": null
            },
            {
              "id": 498699,
              "key": "3514d26c-1881-42f3-a3c6-ddb26587d3ef",
              "title": "Function quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3514d26c-1881-42f3-a3c6-ddb26587d3ef",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which equation could come to our rescue?",
                "answers": [
                  {
                    "id": "a1515307707989",
                    "text": "x + y",
                    "is_correct": false
                  },
                  {
                    "id": "a1515307722483",
                    "text": "xy",
                    "is_correct": false
                  },
                  {
                    "id": "a1515307725818",
                    "text": "<span class=\"mathquill\">x^2 + y^2</span>",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 495936,
          "key": "7654258c-b3d2-40e9-85d0-6dc90eaf72ad",
          "title": "Polynomial Kernel 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7654258c-b3d2-40e9-85d0-6dc90eaf72ad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498774,
              "key": "1ca724af-0ee6-4a88-a915-99cf44a0188a",
              "title": "SVM 11 Polynomial Kernel 3 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XmbK8OjbX5U",
                "china_cdn_id": "XmbK8OjbX5U.mp4"
              }
            }
          ]
        },
        {
          "id": 495937,
          "key": "cc66e5cf-86e3-435e-b41c-e6a00f68cabe",
          "title": "RBF Kernel 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cc66e5cf-86e3-435e-b41c-e6a00f68cabe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498806,
              "key": "2089bebb-072b-46cc-a7eb-6a4d2ecb4b0e",
              "title": "SVM 12 RBF Kernel 1 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xdkIulxXWfQ",
                "china_cdn_id": "xdkIulxXWfQ.mp4"
              }
            }
          ]
        },
        {
          "id": 495938,
          "key": "bfe86406-983c-4b0e-958e-030618a4f5c5",
          "title": "RBF Kernel 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bfe86406-983c-4b0e-958e-030618a4f5c5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498807,
              "key": "7d04908b-0ea4-4422-ade5-1de7a5fdff3d",
              "title": "SVM 13 RBF Kernel 2 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ozl9UWVP0MI",
                "china_cdn_id": "ozl9UWVP0MI.mp4"
              }
            }
          ]
        },
        {
          "id": 495939,
          "key": "1a81fdc7-3078-4294-8f39-9794583b11c1",
          "title": "RBF Kernel 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a81fdc7-3078-4294-8f39-9794583b11c1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498808,
              "key": "a5c8cc8d-72f7-42e9-9d85-b3006e95d65a",
              "title": "SVM 14 RBF Kernel 3 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DctkE8kaWPY",
                "china_cdn_id": "DctkE8kaWPY.mp4"
              }
            }
          ]
        },
        {
          "id": 495941,
          "key": "d5a3f58b-29d7-4227-965f-edfe7315dd08",
          "title": "SVMs in sklearn",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d5a3f58b-29d7-4227-965f-edfe7315dd08",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498693,
              "key": "88a9429a-6c91-45d6-bd87-3882c990b2cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Support Vector Machines in sklearn\n\nIn this section, you'll use support vector machines to fit a given sample dataset.\n\nBefore you do that, let's go over the tools required to build this model.\n\nFor your support vector machine model, you'll be using scikit-learn's [`SVC`](http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html) class.  This class provides the functions to define and fit the model to your data.\n\n```python\n>>> from sklearn.svm import SVC\n>>> model = SVC()\n>>> model.fit(x_values, y_values)\n```\n\nIn the example above, the `model` variable is a support vector machine model that has been fitted to the data `x_values` and `y_values`.  Fitting the model means finding the best boundary that fits the training data.  Let's make two predictions using the model's `predict()` function.\n\n```python\n>>> print(model.predict([ [0.2, 0.8], [0.5, 0.4] ]))\n[[ 0., 1.]]\n```\n\nThe model returned an array of predictions, one prediction for each input array.  The first input, `[0.2, 0.8]`, got a prediction of `0.`.  The second input, `[0.5, 0.4]`, got a prediction of `1.`. \n\n### Hyperparameters\nWhen we define the model, we can specify the hyperparameters. As we've seen in this section, the most common ones are\n- `C`: The C parameter.\n- `kernel`: The kernel. The most common ones are 'linear', 'poly', and 'rbf'.\n- `degree`: If the kernel is polynomial, this is the maximum degree of the monomials in the kernel.\n- `gamma` : If the kernel is rbf, this is the gamma parameter.\n\nFor example, here we define a model with a polynomial kernel of degree 4, and a C parameter of 0.1.\n```python\n>>> model = SVC(kernel='poly', degree=4, C=0.1)\n```\n\n## Support Vector Machines Quiz\n\nIn this quiz, you'll be given with the following sample dataset, and your goal is to define a model that gives 100% accuracy on it.",
              "instructor_notes": ""
            },
            {
              "id": 498694,
              "key": "bb571bec-1489-4bd6-80ac-e1fafe98afe1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a519e76_screen-shot-2018-01-06-at-8.13.20-pm/screen-shot-2018-01-06-at-8.13.20-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bb571bec-1489-4bd6-80ac-e1fafe98afe1",
              "caption": "",
              "alt": "",
              "width": 386,
              "height": 254,
              "instructor_notes": null
            },
            {
              "id": 498695,
              "key": "d6a7ab90-7fa3-4f41-a377-49836b66ddef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The data file can be found under the \"data.csv\" tab in the quiz below. It includes three columns, the first 2 comprising of the coordinates of the points, and the third one of the label.\n\nThe data will be loaded for you, and split into features `X` and labels `y`.\n\n### You'll need to complete each of the following steps:\n\n**1. Build a support vector machine model**\n* Create a support vector machine classification model using scikit-learn's [`SVC`](http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html) and assign it to the variable`model`.\n\n**2. Fit the model to the data**\n* If necessary, specify some of the hyperparameters. The goal is to obtain an accuracy of 100% in the dataset. _Hint: Not every kernel will work well._\n\n**3. Predict using the model**\n* Predict the labels for the training set, and assign this list to the variable `y_pred`.\n\n**4. Calculate the accuracy of the model**\n* For this, use the function sklearn function [`accuracy_score`](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html).\n\nWhen you hit **Test Run**, you'll be able to see the boundary region of your model, which will help you tune the correct parameters, in case you need them.\n\n***Note:*** This quiz requires you to find an accuracy of 100% on the training set. Of course, this screams overfitting! If you pick very large values for your parameters, you will fit the training set very well, but it may not be the best model. Try to find the smallest possible parameters that do the job, which has less chance of overfitting, although this part won't be graded.",
              "instructor_notes": ""
            },
            {
              "id": 498696,
              "key": "e07cfd71-7a1d-4080-90cd-9861096be60f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e07cfd71-7a1d-4080-90cd-9861096be60f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4947529033187328",
                "initial_code_files": [
                  {
                    "text": "# Import statements \nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Read the data.\ndata = np.asarray(pd.read_csv('data.csv', header=None))\n# Assign the features to the variable X, and the labels to the variable y. \nX = data[:,0:2]\ny = data[:,2]\n\n# TODO: Create the model and assign it to the variable model.\n# Find the right parameters for this model to achieve 100% accuracy on the dataset.\nmodel = None\n\n# TODO: Fit the model.\n\n# TODO: Make predictions. Store them in the variable y_pred.\ny_pred = None\n\n# TODO: Calculate the accuracy and assign it to the variable acc.\nacc = None",
                    "name": "quiz.py"
                  },
                  {
                    "text": "0.24539,0.81725,0\n0.21774,0.76462,0\n0.20161,0.69737,0\n0.20161,0.58041,0\n0.2477,0.49561,0\n0.32834,0.44883,0\n0.39516,0.48099,0\n0.39286,0.57164,0\n0.33525,0.62135,0\n0.33986,0.71199,0\n0.34447,0.81433,0\n0.28226,0.82602,0\n0.26613,0.75,0\n0.26613,0.63596,0\n0.32604,0.54825,0\n0.28917,0.65643,0\n0.80069,0.71491,0\n0.80069,0.64181,0\n0.80069,0.50146,0\n0.79839,0.36988,0\n0.73157,0.25,0\n0.63249,0.18275,0\n0.60023,0.27047,0\n0.66014,0.34649,0\n0.70161,0.42251,0\n0.70853,0.53947,0\n0.71544,0.63304,0\n0.74309,0.72076,0\n0.75,0.63596,0\n0.75,0.46345,0\n0.72235,0.35526,0\n0.66935,0.28509,0\n0.20622,0.94298,1\n0.26613,0.8962,1\n0.38134,0.8962,1\n0.42051,0.94591,1\n0.49885,0.86404,1\n0.31452,0.93421,1\n0.53111,0.72076,1\n0.45276,0.74415,1\n0.53571,0.6038,1\n0.60484,0.71491,1\n0.60945,0.58333,1\n0.51267,0.47807,1\n0.50806,0.59211,1\n0.46198,0.30556,1\n0.5288,0.41082,1\n0.38594,0.35819,1\n0.31682,0.31433,1\n0.29608,0.20906,1\n0.36982,0.27632,1\n0.42972,0.18275,1\n0.51498,0.10965,1\n0.53111,0.20906,1\n0.59793,0.095029,1\n0.73848,0.086257,1\n0.83065,0.18275,1\n0.8629,0.10965,1\n0.88364,0.27924,1\n0.93433,0.30848,1\n0.93433,0.19444,1\n0.92512,0.43421,1\n0.87903,0.43421,1\n0.87903,0.58626,1\n0.9182,0.71491,1\n0.85138,0.8348,1\n0.85599,0.94006,1\n0.70853,0.94298,1\n0.70853,0.87281,1\n0.59793,0.93129,1\n0.61175,0.83187,1\n0.78226,0.82895,1\n0.78917,0.8962,1\n0.90668,0.89912,1\n0.14862,0.92251,1\n0.15092,0.85819,1\n0.097926,0.85819,1\n0.079493,0.91374,1\n0.079493,0.77632,1\n0.10945,0.79678,1\n0.12327,0.67982,1\n0.077189,0.6886,1\n0.081797,0.58626,1\n0.14862,0.58041,1\n0.14862,0.5307,1\n0.14171,0.41959,1\n0.08871,0.49269,1\n0.095622,0.36696,1\n0.24539,0.3962,1\n0.1947,0.29678,1\n0.16935,0.22368,1\n0.15553,0.13596,1\n0.23848,0.12427,1\n0.33065,0.12427,1\n0.095622,0.2617,1\n0.091014,0.20322,1\n",
                    "name": "data.csv"
                  },
                  {
                    "text": "# Import statements \nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Read the data.\ndata = np.asarray(pd.read_csv('data.csv', header=None))\n# Assign the features to the variable X, and the labels to the variable y. \nX = data[:,0:2]\ny = data[:,2]\n\n# TODO: Create the model and assign it to the variable model.\n# Find the right parameters for this model to achieve 100% accuracy on the dataset.\nmodel = SVC(kernel='rbf', gamma=27)\n\n# TODO: Fit the model.\nmodel.fit(X,y)\n\n# TODO: Make predictions. Store them in the variable y_pred.\ny_pred = model.predict(X)\n\n# TODO: Calculate the accuracy and assign it to the variable acc.\nacc = accuracy_score(y, y_pred)",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 634099,
          "key": "fdba1c81-05df-43e4-9af8-1b2b82cdf120",
          "title": "Recap & Additional Resources",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fdba1c81-05df-43e4-9af8-1b2b82cdf120",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634497,
              "key": "79ca8599-c588-4277-bfdd-e6ba1781a9c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Recap\n\nIn this lesson, you learned about Support Vector Machines (or SVMs).  SVMs are a popular algorithm used for classification problems.  You saw three different ways that SVMs can be implemented:\n\n1. Maximum Margin Classifier\n2. Classification with Inseparable Classes\n3. Kernel Methods\n\n\n##### Maximum Margin Classifier\n\nWhen your data can be completely separated, the linear version of SVMs attempts to maximize the distance from the linear boundary to the closest points (called the support vectors).  For this reason, we saw that in the picture below, the boundary on the left is better than the one on the right.",
              "instructor_notes": ""
            },
            {
              "id": 634498,
              "key": "ca25c0c5-decb-4066-a628-decac8c1c604",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/June/5b1337e8_screen-shot-2018-06-02-at-5.34.36-pm/screen-shot-2018-06-02-at-5.34.36-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ca25c0c5-decb-4066-a628-decac8c1c604",
              "caption": "",
              "alt": "",
              "width": 1635,
              "height": 619,
              "instructor_notes": null
            },
            {
              "id": 634499,
              "key": "3bdd80bc-0cda-4497-8c25-63e23cd98c39",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##### Classification with Inseparable Classes\n\nUnfortunately, data in the real world is rarely completely separable as shown in the above images.  For this reason, we introduced a new hyper-parameter called **C**. The **C** hyper-parameter determines how flexible we are willing to be with the points that fall on the wrong side of our dividing boundary.  The value of **C** ranges between 0 and infinity.  When **C** is large, you are forcing your boundary to have fewer errors  than when it is a small value. \n\n**Note: when C is too large for a particular set of data, you might not get convergence at all because your data cannot be separated with the small number of errors allotted with such a large value of C**.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 634500,
              "key": "408480b2-d2ff-4521-9715-776138094cb8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/June/5b133bfb_screen-shot-2018-06-02-at-5.52.44-pm/screen-shot-2018-06-02-at-5.52.44-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/408480b2-d2ff-4521-9715-776138094cb8",
              "caption": "",
              "alt": "",
              "width": 1790,
              "height": 972,
              "instructor_notes": null
            },
            {
              "id": 634501,
              "key": "9d70ead1-236d-4985-b99b-1f90cf2cb3d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##### Kernels\n\nFinally, we looked at what makes SVMs truly powerful, kernels.  Kernels in SVMs allow us the ability to separate data when the boundary between them is nonlinear.  Specifically, you saw two types of kernels:\n\n* polynomial\n* rbf\n\n\n By far the most popular kernel is the **rbf** kernel (which stands for radial basis function).  The rbf kernel allows you the opportunity to classify points that seem hard to separate in any space.  This is a density based approach that looks at the closeness of points to one another.  This introduces another hyper-parameter **gamma**.  When **gamma** is large, the outcome is similar to having a large value of **C**, that is your algorithm will attempt to classify every point correctly.  Alternatively, small values of **gamma** will try to cluster in a more general way that will make more mistakes, but may perform better when it sees new data.",
              "instructor_notes": ""
            },
            {
              "id": 634502,
              "key": "11df1691-0ed1-44dc-af10-07a51ff64311",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/June/5b133ff6_screen-shot-2018-06-02-at-6.07.54-pm/screen-shot-2018-06-02-at-6.07.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/11df1691-0ed1-44dc-af10-07a51ff64311",
              "caption": "",
              "alt": "",
              "width": 1686,
              "height": 913,
              "instructor_notes": null
            },
            {
              "id": 634496,
              "key": "1df5d8ee-246e-4b92-b9f2-d81aea0a80a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n### Resources\n\n[Support Vector Machines are described in Introduction to Statistical Learning starting on page 337.](http://www-bcf.usc.edu/~gareth/ISL/ISLR%20First%20Printing.pdf)\n\n[The wikipedia page related to SVMs](https://en.wikipedia.org/wiki/Support_vector_machine)\n\n[The derivation of SVMs from Stanford's CS229 notes.](http://cs229.stanford.edu/notes/cs229-notes3.pdf)",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}