{
  "data": {
    "lesson": {
      "id": 590599,
      "key": "0bced143-7e54-4395-896c-41106ae71487",
      "title": "Perceptron Algorithm",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "The perceptron algorithm is an algorithm for classifying data. It is the building block of neural networks.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/0bced143-7e54-4395-896c-41106ae71487/590599/1538800889843/Perceptron+Algorithm+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/0bced143-7e54-4395-896c-41106ae71487/590599/1538800886548/Perceptron+Algorithm+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 502671,
          "key": "3c2e21c9-2660-4a5e-8ffa-940bddb0cd97",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3c2e21c9-2660-4a5e-8ffa-940bddb0cd97",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 531142,
              "key": "bb998161-7772-42a9-95d1-82ef02ccfcd3",
              "title": "Perception Algorithm V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ebIlG6Pqwas",
                "china_cdn_id": "ebIlG6Pqwas.mp4"
              }
            }
          ]
        },
        {
          "id": 301678,
          "key": "501ce6c5-9b80-4536-8754-f7da607fc40d",
          "title": "Classification Problems 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "501ce6c5-9b80-4536-8754-f7da607fc40d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308923,
              "key": "83927222-7248-4f54-974e-27fb2598db5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Classification Problems\nWe'll start by defining what we mean by classification problems, and applying it to a simple example.",
              "instructor_notes": ""
            },
            {
              "id": 791702,
              "key": "ec2efddc-a3a2-441a-b038-f9e99b1b274e",
              "title": "Exemplo de classificação",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Dh625piH7Z0",
                "china_cdn_id": "Dh625piH7Z0.mp4"
              }
            },
            {
              "id": 309228,
              "key": "3583f4e1-51e7-4488-bec5-1b376670888d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912bcf6_student-quiz/student-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3583f4e1-51e7-4488-bec5-1b376670888d",
              "caption": "",
              "alt": null,
              "width": 2560,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 307754,
              "key": "623e87b9-7117-4771-bb0e-04efc0ad7237",
              "title": "Classification Example",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "623e87b9-7117-4771-bb0e-04efc0ad7237",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Does the student get accepted?",
                "answers": [
                  {
                    "id": "a1494006799855",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1494006825413",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 379485,
          "key": "64b290a9-b38b-4a5a-859f-215eaae008d1",
          "title": "Classification Problems 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "64b290a9-b38b-4a5a-859f-215eaae008d1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791704,
              "key": "240a9e6f-94f0-428f-9873-cc654a1426d6",
              "title": "分类问题 2 ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "46PywnGa_cQ",
                "china_cdn_id": "46PywnGa_cQ.mp4"
              }
            }
          ]
        },
        {
          "id": 308853,
          "key": "55e267a6-888b-4093-90cb-6b131ad00c6d",
          "title": "Linear Boundaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "55e267a6-888b-4093-90cb-6b131ad00c6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791705,
              "key": "14ae427e-5e69-4c06-b384-25bf27d0c86c",
              "title": "Linear Boundaries",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "X-uMlsBi07k",
                "china_cdn_id": "X-uMlsBi07k.mp4"
              }
            },
            {
              "id": 378611,
              "key": "469c2b98-adcb-4b75-9aa6-aee701d69f95",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "469c2b98-adcb-4b75-9aa6-aee701d69f95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now that you know the equation for the line (2x<sub>1</sub> + x<sub>2</sub> - 18=0), and similarly the “score” (2x<sub>1</sub> + x<sub>2</sub> - 18), what is the score of the student who got 7 in the test and 6 for grades? ",
                "matchers": [
                  {
                    "expression": "^([2]{1})$"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308854,
          "key": "3a0e2972-89dc-4b08-826a-1011b9b554ac",
          "title": "Higher Dimensions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a0e2972-89dc-4b08-826a-1011b9b554ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791706,
              "key": "2e169ccb-a205-49d5-9cc5-b22501fb1d90",
              "title": "09 Higher Dimensions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eBHunImDmWw",
                "china_cdn_id": "eBHunImDmWw.mp4"
              }
            },
            {
              "id": 378619,
              "key": "d4815d03-7e0b-4db9-884f-d3bc9f03ef3e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d4815d03-7e0b-4db9-884f-d3bc9f03ef3e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given the table in the video above, what would the dimensions be for input features (x), the weights (W), and the bias (b) to satisfy (Wx + b)?",
                "answers": [
                  {
                    "id": "a1503541594791",
                    "text": "W: (nx1), x: (1xn), b: (1x1) ",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541617335",
                    "text": "W: (1xn), x: (1xn), b: (nx1) ",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541626821",
                    "text": "W: (1xn), x: (nx1), b: (1x1) ",
                    "is_correct": true
                  },
                  {
                    "id": "a1503541635317",
                    "text": "W: (1xn), x: (nx1), b: (1xn) ",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308214,
          "key": "6ba9c9eb-2e36-4b03-9bcc-01e71260a024",
          "title": "Perceptrons",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6ba9c9eb-2e36-4b03-9bcc-01e71260a024",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 791708,
              "key": "83ec4c80-7e00-4682-9319-054650c2ae83",
              "title": "DL 06 Perceptron Definition Fix V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hImSxZyRiOw",
                "china_cdn_id": "hImSxZyRiOw.mp4"
              }
            },
            {
              "id": 814306,
              "key": "4046e81e-4461-4a62-8a90-096e1c119956",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Corrections:** \n- At 3:07 in the video, the title should read \"Step Function\", not \"Set Function\".\n- At 3:07 in the video, the definition of the Step function should be:\n   \n  y=1 if x >= 0;\n  y=0 if x<0",
              "instructor_notes": ""
            },
            {
              "id": 378612,
              "key": "d87f6c38-4fd9-47d6-a832-37000882304a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d87f6c38-4fd9-47d6-a832-37000882304a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given Score = 2\\*Test + 1*Grade - 18, suppose w<sub>1</sub> was 1.5 instead of 2. Would the student who got 7 on the test and 6 on the grades be accepted or rejected?",
                "answers": [
                  {
                    "id": "a1503541286843",
                    "text": "Accepted",
                    "is_correct": false
                  },
                  {
                    "id": "a1503541296314",
                    "text": "Rejected",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301687,
          "key": "4d015fb7-e73c-447f-a17a-34a0a2b694a0",
          "title": "Perceptrons as Logical Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4d015fb7-e73c-447f-a17a-34a0a2b694a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308861,
              "key": "66e4ffdd-f84c-4b28-a379-0600ba2dcb6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptrons as Logical Operators\n\nIn this lesson, we'll see one of the many great applications of perceptrons. As logical operators! You'll have the chance to create the perceptrons for the most common of these, the **AND**, **OR**, and **NOT** operators. And then, we'll see what to do about the elusive **XOR** operator. Let's dive in!\n\n# AND Perceptron",
              "instructor_notes": ""
            },
            {
              "id": 791711,
              "key": "004dba17-a1ca-4951-b48a-13ee1790b3dd",
              "title": "DL 08 AND And OR Perceptrons",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Y-ImuxNpS40",
                "china_cdn_id": "Y-ImuxNpS40.mp4"
              }
            },
            {
              "id": 966908,
              "key": "84a0e5b2-aeca-4f29-a6d8-0bdb926c528e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Note: The second and third rows of the third column from 1:50-onward should be blue in color (they have the correct value of 1) for the OR perceptron.",
              "instructor_notes": ""
            },
            {
              "id": 309230,
              "key": "cd9d82d7-b53f-434f-a029-b8dc517f43e1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912bf0e_and-quiz/and-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cd9d82d7-b53f-434f-a029-b8dc517f43e1",
              "caption": "",
              "alt": null,
              "width": 1800,
              "height": 460,
              "instructor_notes": null
            },
            {
              "id": 308240,
              "key": "fdd28d8a-fcaf-4fc0-a222-a7199f1db55d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What are the weights and bias for the AND perceptron?\nSet the weights (`weight1`, `weight2`)  and bias (`bias`) to values that will correctly determine the AND operation as shown above.  \nMore than one set of values will work!",
              "instructor_notes": ""
            },
            {
              "id": 307783,
              "key": "11c90890-7258-40ad-a29a-f7cd3593d47f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "11c90890-7258-40ad-a29a-f7cd3593d47f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5630399981158400",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\n# TODO: Set weight1, weight2, and bias\nweight1 = 0.0\nweight2 = 0.0\nbias = 0.0\n\n\n# DON'T CHANGE ANYTHING BELOW\n# Inputs and outputs\ntest_inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]\ncorrect_outputs = [False, False, False, True]\noutputs = []\n\n# Generate and check output\nfor test_input, correct_output in zip(test_inputs, correct_outputs):\n    linear_combination = weight1 * test_input[0] + weight2 * test_input[1] + bias\n    output = int(linear_combination >= 0)\n    is_correct_string = 'Yes' if output == correct_output else 'No'\n    outputs.append([test_input[0], test_input[1], linear_combination, output, is_correct_string])\n\n# Print output\nnum_wrong = len([output[4] for output in outputs if output[4] == 'No'])\noutput_frame = pd.DataFrame(outputs, columns=['Input 1', '  Input 2', '  Linear Combination', '  Activation Output', '  Is Correct'])\nif not num_wrong:\n    print('Nice!  You got it all correct.\\n')\nelse:\n    print('You got {} wrong.  Keep trying!\\n'.format(num_wrong))\nprint(output_frame.to_string(index=False))\n",
                    "name": "quiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 309352,
              "key": "7b7a5347-894d-45ad-95e3-8e4e76ea86f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# OR Perceptron",
              "instructor_notes": ""
            },
            {
              "id": 309231,
              "key": "6cfa3fe3-458e-4132-bd3f-864074da39d1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912c102_or-quiz/or-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6cfa3fe3-458e-4132-bd3f-864074da39d1",
              "caption": "",
              "alt": null,
              "width": 2523,
              "height": 590,
              "instructor_notes": null
            },
            {
              "id": 308241,
              "key": "33817358-f608-405c-9164-3f01ae5744b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The OR perceptron is very similar to an AND perceptron.  In the image below, the OR perceptron has the same line as the AND perceptron, except the line is shifted down.  What can you do to the weights and/or bias to achieve this?  Use the following AND perceptron to create an OR Perceptron.",
              "instructor_notes": ""
            },
            {
              "id": 309232,
              "key": "90883050-5cc9-4d3f-9cd3-087edde9eaeb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912c232_and-to-or/and-to-or.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/90883050-5cc9-4d3f-9cd3-087edde9eaeb",
              "caption": "",
              "alt": null,
              "width": 2519,
              "height": 704,
              "instructor_notes": null
            },
            {
              "id": 308242,
              "key": "73ddcfe0-0272-4bdc-99ab-ea89f068a887",
              "title": "OR Perceptron Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "73ddcfe0-0272-4bdc-99ab-ea89f068a887",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are two ways to go from an AND perceptron to an OR perceptron?",
                "answers": [
                  {
                    "id": "a1494182870768",
                    "text": "Increase the weights",
                    "is_correct": true
                  },
                  {
                    "id": "a1494182883245",
                    "text": "Decrease the weights",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182884153",
                    "text": "Increase a single weight",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182884879",
                    "text": "Decrease a single weight",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182885650",
                    "text": "Increase the magnitude of the bias",
                    "is_correct": false
                  },
                  {
                    "id": "a1494182887943",
                    "text": "Decrease the magnitude of the bias",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 308216,
              "key": "900788cb-de0c-45b1-9a6a-38132e814ba7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# NOT Perceptron\nUnlike the other perceptrons we looked at, the NOT operation only cares about one input.  The operation returns a `0` if the input is `1` and a `1` if it's a `0`.  The other inputs to the perceptron are ignored.\n\nIn this quiz, you'll set the weights (`weight1`, `weight2`)  and bias `bias` to the values that calculate the NOT operation on the second input and ignores the first input.",
              "instructor_notes": ""
            },
            {
              "id": 308217,
              "key": "9c5828f7-2d28-495b-824a-1a72647c4df8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "9c5828f7-2d28-495b-824a-1a72647c4df8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4935618422505472",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\n# TODO: Set weight1, weight2, and bias\nweight1 = 0.0\nweight2 = 0.0\nbias = 0.0\n\n\n# DON'T CHANGE ANYTHING BELOW\n# Inputs and outputs\ntest_inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]\ncorrect_outputs = [True, False, True, False]\noutputs = []\n\n# Generate and check output\nfor test_input, correct_output in zip(test_inputs, correct_outputs):\n    linear_combination = weight1 * test_input[0] + weight2 * test_input[1] + bias\n    output = int(linear_combination >= 0)\n    is_correct_string = 'Yes' if output == correct_output else 'No'\n    outputs.append([test_input[0], test_input[1], linear_combination, output, is_correct_string])\n\n# Print output\nnum_wrong = len([output[4] for output in outputs if output[4] == 'No'])\noutput_frame = pd.DataFrame(outputs, columns=['Input 1', '  Input 2', '  Linear Combination', '  Activation Output', '  Is Correct'])\nif not num_wrong:\n    print('Nice!  You got it all correct.\\n')\nelse:\n    print('You got {} wrong.  Keep trying!\\n'.format(num_wrong))\nprint(output_frame.to_string(index=False))",
                    "name": "quiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 791712,
              "key": "4f98bd55-4386-4f27-91c5-e6ed6827767f",
              "title": "DL 09 XOR Perceptron",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-z9K49fdE3g",
                "china_cdn_id": "-z9K49fdE3g.mp4"
              }
            },
            {
              "id": 309233,
              "key": "79a219c6-c286-4c31-ba2a-24ea02296b37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# XOR Perceptron",
              "instructor_notes": ""
            },
            {
              "id": 309234,
              "key": "bcb66ae2-ee07-44a6-b131-3288b04a8a25",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912c2f1_xor/xor.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bcb66ae2-ee07-44a6-b131-3288b04a8a25",
              "caption": "",
              "alt": null,
              "width": 1898,
              "height": 526,
              "instructor_notes": null
            },
            {
              "id": 308220,
              "key": "15028e9f-0aa4-4162-91cd-e507dd9ed407",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Build an XOR Multi-Layer Perceptron\n\nNow, let's build a multi-layer perceptron from the AND, NOT, and OR perceptrons to create XOR logic!\n\nThe neural network below contains 3 perceptrons, A, B, and C. The last one (AND) has been given for you. The input to the neural network is from the first node. The output comes out of the last node.\n\nThe multi-layer perceptron below calculates XOR.  Each perceptron is a logic operation of AND, OR, and NOT.   However, the perceptrons A, B, and C don't indicate their operation.  In the following quiz, set the correct operations for the perceptrons to calculate XOR.",
              "instructor_notes": ""
            },
            {
              "id": 308677,
              "key": "af97e020-f83a-47fb-ad7e-6c0bded2de89",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/59112a6b_xor-quiz/xor-quiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/af97e020-f83a-47fb-ad7e-6c0bded2de89",
              "caption": "",
              "alt": null,
              "width": 1760,
              "height": 599,
              "instructor_notes": null
            },
            {
              "id": 308225,
              "key": "84a12a7b-ef22-4003-9528-9e44fd73d648",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "84a12a7b-ef22-4003-9528-9e44fd73d648",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Set the operations for the perceptrons in the XOR neural network."
                },
                "concepts_label": "Perceptron",
                "answers_label": "Operators",
                "concepts": [
                  {
                    "text": "A",
                    "correct_answer": {
                      "id": "a1494297409537",
                      "text": "AND"
                    }
                  },
                  {
                    "text": "B",
                    "correct_answer": {
                      "id": "a1494297414036",
                      "text": "OR"
                    }
                  },
                  {
                    "text": "C",
                    "correct_answer": {
                      "id": "a1494297422474",
                      "text": "NOT"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1494297414036",
                    "text": "OR"
                  },
                  {
                    "id": "a1494297409537",
                    "text": "AND"
                  },
                  {
                    "id": "a1494297422474",
                    "text": "NOT"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 308841,
          "key": "8ea20904-0215-4e44-afa9-bb5a720bd028",
          "title": "Perceptron Trick",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8ea20904-0215-4e44-afa9-bb5a720bd028",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308864,
              "key": "e0971445-04f0-4968-ab4d-a1ebeace7bd9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptron Trick\nIn the last section you used your logic and your mathematical knowledge to create perceptrons for some of the most common logical operators. In real life, though, we can't be building these perceptrons ourselves. The idea is that we give them the result, and they build themselves. For this, here's a pretty neat trick that will help us.",
              "instructor_notes": ""
            },
            {
              "id": 308844,
              "key": "e640ff2d-fdb0-458c-b12b-d3ef72bfe93f",
              "title": "Perceptron Algorithm",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-zhTROHtscQ",
                "china_cdn_id": "-zhTROHtscQ.mp4"
              }
            },
            {
              "id": 308846,
              "key": "e0640565-e4ef-420d-98b5-51d4d0eec4e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5912022e_perceptronquiz/perceptronquiz.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e0640565-e4ef-420d-98b5-51d4d0eec4e0",
              "caption": "",
              "alt": null,
              "width": 1132,
              "height": 405,
              "instructor_notes": null
            },
            {
              "id": 308847,
              "key": "d5bc6c8f-b9a3-4f8f-97d0-9777f6895dd2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5bc6c8f-b9a3-4f8f-97d0-9777f6895dd2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Does the misclassified point want the line to be closer or farther?",
                "answers": [
                  {
                    "id": "a1494352441693",
                    "text": "Closer",
                    "is_correct": true
                  },
                  {
                    "id": "a1494352459483",
                    "text": "Farther",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 379484,
              "key": "455adbfa-7188-4d02-8c4a-8e1dd4be6b11",
              "title": "DL 10 S  Perceptron Algorithm",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fATmrG2hQzI",
                "china_cdn_id": "fATmrG2hQzI.mp4"
              }
            },
            {
              "id": 379491,
              "key": "135f4b15-5ec8-4ed6-98f7-52240c7e30f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Time for some math!\nNow that we've learned that the points that are misclassified, want the line to move closer to them, let's do some math. The following video shows a mathematical trick that modifies the equation of the line, so that it comes closer to a particular point.",
              "instructor_notes": ""
            },
            {
              "id": 385196,
              "key": "84154f0f-806b-46dd-ba2d-e2031b1cae98",
              "title": "07 Perceptron Algorithm Trick",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lif_qPmXvWA",
                "china_cdn_id": "lif_qPmXvWA.mp4"
              }
            },
            {
              "id": 378615,
              "key": "9ec3484a-6109-4705-a670-43846571a014",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9ec3484a-6109-4705-a670-43846571a014",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "For the second example, where the line is described by 3x<sub>1</sub>+ 4x<sub>2</sub> - 10 = 0, if the learning rate was set to 0.1, how many times would you have to apply the perceptron trick to move the line to a position where the blue point, at (1, 1), is correctly classified? \n",
                "matchers": [
                  {
                    "expression": "10"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 301689,
          "key": "dc837952-c0d8-43fc-921c-f1ffe316c795",
          "title": "Perceptron Algorithm",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc837952-c0d8-43fc-921c-f1ffe316c795",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308866,
              "key": "a60d96eb-348a-4b28-afc5-8690d2e9275e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Perceptron Algorithm\nAnd now, with the perceptron trick in our hands, we can fully develop the perceptron algorithm! The following video will show you the pseudocode, and in the quiz below, you'll have the chance to code it in Python.",
              "instructor_notes": ""
            },
            {
              "id": 543496,
              "key": "aa6e7c27-1f41-4664-8120-23f5d0a80622",
              "title": "Perceptron Algorithm Pseudocode",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "There's a small error in the above video in that <span class=\"mathquill\">W_i</span> should be updated to <span class=\"mathquill\">W_i  = W_i + \\alpha x_i</span> (plus or minus depending on the situation).",
              "video": {
                "youtube_id": "p8Q3yu9YqYk",
                "china_cdn_id": "p8Q3yu9YqYk.mp4"
              }
            },
            {
              "id": 308046,
              "key": "5cde4654-e7cf-47d5-967c-ad2b91f8fe00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Coding the Perceptron Algorithm\nTime to code! In this quiz, you'll have the chance to implement the perceptron algorithm to separate the following data (given in the file data.csv).",
              "instructor_notes": ""
            },
            {
              "id": 308043,
              "key": "28d86cb6-c4b4-4b75-a919-bddc10c5c7c1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/590d06dd_points/points.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/28d86cb6-c4b4-4b75-a919-bddc10c5c7c1",
              "caption": "",
              "alt": "",
              "width": 385,
              "height": 260,
              "instructor_notes": null
            },
            {
              "id": 308208,
              "key": "a5b3a99b-0299-47bd-b2fe-1a8ebf07d1d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Recall that the perceptron step works as follows. For a point with coordinates\n<span class=\"mathquill\">(p,q)</span>, label <span class=\"mathquill\"> y</span>, and prediction given by the equation <span class=\"mathquill\">\\hat{y} = step(w_1x_1 + w_2x_2 + b)</span>:\n\n- If the point is correctly classified, do nothing.\n- If the point is classified positive, but it has a negative label, subtract\n<span class=\"mathquill\">\\alpha p, \\alpha q,</span> and\n<span class=\"mathquill\">\\alpha</span>\nfrom\n<span class=\"mathquill\">w_1, w_2,</span>\nand\n<span class=\"mathquill\">b</span>\nrespectively.\n- If the point is classified negative, but it has a positive label, add\n<span class=\"mathquill\">\\alpha p, \\alpha q,</span>\nand\n<span class=\"mathquill\">\\alpha</span>\nto\n<span class=\"mathquill\">w_1, w_2,</span>\nand\n<span class=\"mathquill\">b</span>\nrespectively.\n\nThen click on `test run` to graph the solution that the perceptron algorithm gives you. It'll actually draw a set of dotted lines, that show how the algorithm approaches to the best solution, given by the black solid line.\n\nFeel free to play with the parameters of the algorithm (number of epochs, learning rate, and even the randomizing of the initial parameters) to see how your initial conditions can affect the solution!",
              "instructor_notes": ""
            },
            {
              "id": 308040,
              "key": "d9b6c9f8-b58d-45a4-9ea9-6dacd8fcfd7c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d9b6c9f8-b58d-45a4-9ea9-6dacd8fcfd7c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5660419386638336",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n# Setting the random seed, feel free to change it and see different solutions.\nnp.random.seed(42)\n\ndef stepFunction(t):\n    if t >= 0:\n        return 1\n    return 0\n\ndef prediction(X, W, b):\n    return stepFunction((np.matmul(X,W)+b)[0])\n\n# TODO: Fill in the code below to implement the perceptron trick.\n# The function should receive as inputs the data X, the labels y,\n# the weights W (as an array), and the bias b,\n# update the weights and bias W, b, according to the perceptron algorithm,\n# and return W and b.\ndef perceptronStep(X, y, W, b, learn_rate = 0.01):\n    # Fill in code\n    return W, b\n    \n# This function runs the perceptron algorithm repeatedly on the dataset,\n# and returns a few of the boundary lines obtained in the iterations,\n# for plotting purposes.\n# Feel free to play with the learning rate and the num_epochs,\n# and see your results plotted below.\ndef trainPerceptronAlgorithm(X, y, learn_rate = 0.01, num_epochs = 25):\n    x_min, x_max = min(X.T[0]), max(X.T[0])\n    y_min, y_max = min(X.T[1]), max(X.T[1])\n    W = np.array(np.random.rand(2,1))\n    b = np.random.rand(1)[0] + x_max\n    # These are the solution lines that get plotted below.\n    boundary_lines = []\n    for i in range(num_epochs):\n        # In each epoch, we apply the perceptron step.\n        W, b = perceptronStep(X, y, W, b, learn_rate)\n        boundary_lines.append((-W[0]/W[1], -b/W[1]))\n    return boundary_lines\n",
                    "name": "perceptron.py"
                  },
                  {
                    "text": "0.78051,-0.063669,1\n0.28774,0.29139,1\n0.40714,0.17878,1\n0.2923,0.4217,1\n0.50922,0.35256,1\n0.27785,0.10802,1\n0.27527,0.33223,1\n0.43999,0.31245,1\n0.33557,0.42984,1\n0.23448,0.24986,1\n0.0084492,0.13658,1\n0.12419,0.33595,1\n0.25644,0.42624,1\n0.4591,0.40426,1\n0.44547,0.45117,1\n0.42218,0.20118,1\n0.49563,0.21445,1\n0.30848,0.24306,1\n0.39707,0.44438,1\n0.32945,0.39217,1\n0.40739,0.40271,1\n0.3106,0.50702,1\n0.49638,0.45384,1\n0.10073,0.32053,1\n0.69907,0.37307,1\n0.29767,0.69648,1\n0.15099,0.57341,1\n0.16427,0.27759,1\n0.33259,0.055964,1\n0.53741,0.28637,1\n0.19503,0.36879,1\n0.40278,0.035148,1\n0.21296,0.55169,1\n0.48447,0.56991,1\n0.25476,0.34596,1\n0.21726,0.28641,1\n0.67078,0.46538,1\n0.3815,0.4622,1\n0.53838,0.32774,1\n0.4849,0.26071,1\n0.37095,0.38809,1\n0.54527,0.63911,1\n0.32149,0.12007,1\n0.42216,0.61666,1\n0.10194,0.060408,1\n0.15254,0.2168,1\n0.45558,0.43769,1\n0.28488,0.52142,1\n0.27633,0.21264,1\n0.39748,0.31902,1\n0.5533,1,0\n0.44274,0.59205,0\n0.85176,0.6612,0\n0.60436,0.86605,0\n0.68243,0.48301,0\n1,0.76815,0\n0.72989,0.8107,0\n0.67377,0.77975,0\n0.78761,0.58177,0\n0.71442,0.7668,0\n0.49379,0.54226,0\n0.78974,0.74233,0\n0.67905,0.60921,0\n0.6642,0.72519,0\n0.79396,0.56789,0\n0.70758,0.76022,0\n0.59421,0.61857,0\n0.49364,0.56224,0\n0.77707,0.35025,0\n0.79785,0.76921,0\n0.70876,0.96764,0\n0.69176,0.60865,0\n0.66408,0.92075,0\n0.65973,0.66666,0\n0.64574,0.56845,0\n0.89639,0.7085,0\n0.85476,0.63167,0\n0.62091,0.80424,0\n0.79057,0.56108,0\n0.58935,0.71582,0\n0.56846,0.7406,0\n0.65912,0.71548,0\n0.70938,0.74041,0\n0.59154,0.62927,0\n0.45829,0.4641,0\n0.79982,0.74847,0\n0.60974,0.54757,0\n0.68127,0.86985,0\n0.76694,0.64736,0\n0.69048,0.83058,0\n0.68122,0.96541,0\n0.73229,0.64245,0\n0.76145,0.60138,0\n0.58985,0.86955,0\n0.73145,0.74516,0\n0.77029,0.7014,0\n0.73156,0.71782,0\n0.44556,0.57991,0\n0.85275,0.85987,0\n0.51912,0.62359,0\n",
                    "name": "data.csv"
                  },
                  {
                    "text": "def perceptronStep(X, y, W, b, learn_rate = 0.01):\n    for i in range(len(X)):\n        y_hat = prediction(X[i],W,b)\n        if y[i]-y_hat == 1:\n            W[0] += X[i][0]*learn_rate\n            W[1] += X[i][1]*learn_rate\n            b += learn_rate\n        elif y[i]-y_hat == -1:\n            W[0] -= X[i][0]*learn_rate\n            W[1] -= X[i][1]*learn_rate\n            b -= learn_rate\n    return W, b\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 502490,
          "key": "e1e998ea-bd5d-4d66-9330-6f596c9692a3",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e1e998ea-bd5d-4d66-9330-6f596c9692a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 502674,
              "key": "8646eeb8-8891-4191-b57f-cf37ad8e26c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/June/59406a18_meme/meme.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8646eeb8-8891-4191-b57f-cf37ad8e26c2",
              "caption": "",
              "alt": "",
              "width": 250,
              "height": 250,
              "instructor_notes": null
            },
            {
              "id": 502675,
              "key": "90200ca8-9d9e-4fb6-b940-fd1f4142bd36",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Great job! In this section you learned what the perceptron algorithm is, and how to use it for solving classification problems. Next, we'll see other very useful classification algorithms.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}